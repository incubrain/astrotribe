server/
  api/
    log-pipe.post.ts
  middleware/
    server-error.middleware.server.ts
  plugins/
    server-error.plugin.server.ts
  utils/
    logger.server.ts
  tsconfig.json
.nuxtrc
nuxt.config.ts
package.json
project.json
tsconfig.json

================================================================
Repository Files
================================================================

================
File: server/api/log-pipe.post.ts
================
// server/api/log-pipe.post.ts
import { defineEventHandler, readBody, createError, type H3Event } from 'h3'
import { logger } from '../utils/logger'

// Initialize logger for client errors

export interface ClientErrorPayload {
  level: 'error' | 'warn'
  message: string
  metadata?: {
    error?: Error
    context?: string
    component?: string
    [key: string]: any
  }
}

export async function pipeClientError(payload: ClientErrorPayload, event: H3Event) {
  const { level, message, metadata = {} } = payload

  // Enrich metadata with request info
  const enrichedMetadata = {
    ...metadata,
    userAgent: event.headers.get('user-agent'),
    ip: event.headers.get('x-forwarded-for') || event.headers.get('x-real-ip'),
    timestamp: Date.now(),
    environment: process.env.NODE_ENV,
    // Add any correlation IDs or request context
    requestId: event.headers.get('x-request-id'),
    correlationId: event.headers.get('x-correlation-id'),
  }

  // Use our existing logger
  if (level === 'error') {
    await logger.error(message, enrichedMetadata)
  } else {
    await logger.warn(message, enrichedMetadata)
  }
}

export default defineEventHandler(async (event) => {
  const body = await readBody(event)
  const { level, message, metadata } = body

  // Only accept error and warning logs
  if (!['error', 'warn'].includes(level)) {
    return { success: false, message: 'Only error and warning logs are accepted' }
  }

  try {
    await pipeClientError({ level, message, metadata }, event)
    return { success: true }
  } catch (error: any) {
    console.error('Failed to process client log:', error)
    throw createError({
      statusCode: 500,
      message: 'Failed to process log',
    })
  }
})

================
File: server/middleware/server-error.middleware.server.ts
================
// server/middleware/error.ts
import { useRuntimeConfig } from 'nuxt/app'
import { logger } from '../utils/logger'

export default defineEventHandler((event) => {
  const env = useRuntimeConfig().public

  // Add error handler
  event.context.onerror = (error) => {
    logger.error(`Middleware error: ${error.message}`, {
      error,
      url: event.path,
      method: event.method,
      headers: event.headers,
      query: event.context.params,
    })
  }
})

================
File: server/plugins/server-error.plugin.server.ts
================
// server/plugins/error-handler.ts
import { useRuntimeConfig } from 'nuxt/app'
import { logger } from '../utils/logger'

export default defineNitroPlugin((nitroApp) => {
  // Initialize logger
  const env = useRuntimeConfig().public

  // Handle all errors
  nitroApp.hooks.hook('error', (error, { event }) => {
    const errorContext = {
      url: event?.path || 'unknown',
      method: event?.method,
      headers: event?.headers,
      query: event?.context?.params,
      body: event?.context?.body,
      error: {
        message: error.message,
        stack: error.stack,
        code: error.statusCode || 500,
      },
      // Add request IDs if available
      requestId: event?.headers?.get('x-request-id'),
      correlationId: event?.headers?.get('x-correlation-id'),
    }

    // Log the error
    logger.error(`Nitro server error: ${error.message}`, errorContext)
  })

  // Optionally handle request completion for performance monitoring
  nitroApp.hooks.hook('request', async (event) => {
    const start = Date.now()

    // Wait for request to complete
    await event.handle()

    const duration = Date.now() - start

    // Log slow requests (e.g., over 1000ms)
    if (duration > 1000) {
      logger.warn('Slow request detected', {
        url: event.path,
        method: event.method,
        duration,
        headers: event.headers,
        query: event.context.params,
      })
    }
  })

  // Handle unhandled rejections and exceptions
  if (process) {
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('Unhandled Promise Rejection', {
        reason,
        promise,
      })
    })

    process.on('uncaughtException', (error) => {
      logger.error('Uncaught Exception', {
        error: {
          message: error.message,
          stack: error.stack,
        },
      })

      // Gracefully shutdown after uncaught exception
      setTimeout(() => {
        process.exit(1)
      }, 1000)
    })
  }
})

================
File: server/utils/logger.server.ts
================
// server/utils/logger.ts
import { createCentralizedLogger } from '@ib/logger'

if (import.meta.client) {
  throw new Error('Server-only module')
}

// Create a single instance for the Nitro server
const logger = createCentralizedLogger()
logger.setServiceName('api')
logger.setDomain('server')

export { logger }

================
File: server/tsconfig.json
================
{
  "extends": "../tsconfig.json",
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@ib/logger": ["../../../libs/logger/dist/index.esm.js"]
    },
    "types": ["node"]
  },
  "include": ["./**/*"],
  "exclude": ["node_modules", "dist"]
}

================
File: .nuxtrc
================
typescript.includeWorkspace = true

================
File: nuxt.config.ts
================
import { defineNuxtConfig } from 'nuxt/config'

export default defineNuxtConfig({
  workspaceDir: '../../',
  srcDir: '.',
  nitro: {
    serverAssets: [
      {
        baseName: 'logger',
        dir: './server/utils',
      },
    ],
  },
})

================
File: package.json
================
{
  "name": "@astronera/logging",
  "version": "0.0.3",
  "private": true,
  "type": "module",
  "scripts": {
    "lint": "pnpm nx lint @astronera/logging",
    "test": "pnpm nx test @astronera/logging",
    "dev": "pnpx nuxi dev",
    "build": "pnpx nuxi build",
    "prepare": "pnpx nuxi prepare"
  },
  "dependencies": {
    "@ib/logger": "workspace:*"
  },
  "devDependencies": {
    "h3": "^1.8.2",
    "nuxt": "^3.13.2",
    "vue": "^3.3.4",
    "vue-router": "^4.2.4"
  }
}

================
File: project.json
================
{
  "name": "@astronera/logging",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "projectType": "library",
  "sourceRoot": "layers/logging",
  "targets": {
    "prepare": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cd layers/logging && pnpx nuxi prepare"
      }
    },
    "build": {
      "executor": "@nx/js:tsc",
      "outputs": ["{options.outputPath}"],
      "dependsOn": [
        "prepare",
        {
          "target": "build",
          "projects": ["@ib/logger"]
        }
      ],
      "options": {
        "outputPath": "layers/logging/dist",
        "tsConfig": "layers/logging/tsconfig.json",
        "main": "layers/logging/index.ts",
        "assets": [
          {
            "glob": "**/*.{css,scss,html,json,vue}",
            "input": "layers/logging",
            "output": "."
          }
        ]
      }
    },
    "lint": {
      "executor": "@nx/eslint:lint",
      "outputs": ["{options.outputFile}"],
      "options": {
        "lintFilePatterns": ["layers/logging/**/*.{ts,tsx,vue}"]
      }
    },
    "test": {
      "executor": "@nx/vite:test",
      "outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
      "options": {
        "passWithNoTests": true,
        "reportsDirectory": "../../coverage/layers/{projectRoot}"
      }
    }
  },
  "tags": ["type:layer", "scope:shared"]
}

================
File: tsconfig.json
================
{
  "extends": ["../../tsconfig.web.json", "./.nuxt/tsconfig.json"],
  "compilerOptions": {
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "#layers/*": ["../../layers/*"]
    }
  },
  "exclude": ["node_modules", "dist"]
}
