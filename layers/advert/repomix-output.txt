================================================================
Repository Structure
================================================================
assets/
  advertisements.json
components/
  AdminDashboard.vue
  AdminPreview.vue
  Banner.vue
  Contact.vue
  DiscountBanner.vue
  FeedCard.vue
  Packages.vue
  Performance.vue
  RoiCalculator.vue
  Showcase.vue
  VariantTesting.vue
  VisibilityWrapper.vue
composables/
  useAdsAdminStore.ts
  useAdsEvents.ts
  useAdsPackages.ts
  useAdsStore.ts
plugins/
  initialize-ads.client.ts
server/
  api/
    ads/
      analytics/
        daily-trends.ts
        overview.ts
      variants/
        [id]/
          metrics.ts
      active.ts
      contact.ts
      packages.ts
      track.post.ts
types/
  ads.ts
.nuxtrc
nuxt.config.ts
package.json
project.json
tsconfig.json

================================================================
Repository Files
================================================================

================
File: assets/advertisements.json
================
[
  {
    "id": 1,
    "title": "Amazing Product",
    "description": "You won't believe how great this is!",
    "imageUrl": "/astronera-logo.jpg",
    "link": "https://example.com/product1",
    "active": true
  },
  {
    "id": 2,
    "title": "Amazing Product",
    "description": "You won't believe how great this is!",
    "imageUrl": "/astronera-logo.jpg",
    "link": "https://example.com/product1",
    "active": true
  }
]

================
File: components/AdminDashboard.vue
================
<!-- pages/admin/ads/analytics.vue -->
<script setup lang="ts">
import { FilterMatchMode, FilterOperator } from '@primevue/core/api'

const adsAdminStore = useAdsAdminStore()
const { overview } = storeToRefs(adsAdminStore)

const selectedPeriod = ref('30')
const selectedAdId = ref<string | null>(null)
const dialogVisible = ref(false)

const periods = [
  { label: 'Last 7 Days', value: '7' },
  { label: 'Last 30 Days', value: '30' },
  { label: 'Last 90 Days', value: '90' },
]

// Load initial data
onMounted(async () => {
  await adsAdminStore.fetchAnalyticsOverview(selectedPeriod.value)
})

// Watch for period changes
watch(selectedPeriod, async (newPeriod) => {
  await adsAdminStore.fetchAnalyticsOverview(newPeriod)
})

const formatPercent = (value: number | null | undefined) => {
  if (value == null) return '0%'
  return `${value}%`
}

const formatNumber = (value: number | null | undefined) => {
  if (value == null) return '0'
  return value.toLocaleString()
}

// Computed metrics for the summary cards
const chartData = computed(() => {
  if (!selectedAdId.value || !adsAdminStore.trends[selectedAdId.value]) return null

  const trendData = adsAdminStore.trends[selectedAdId.value] as DailyMetrics[]

  return {
    labels: trendData.map((day) => day.date),
    datasets: [
      {
        label: 'Views',
        data: trendData.map((day) => day.views ?? 0),
        backgroundColor: 'rgba(33, 150, 243, 0.1)',
        borderColor: '#2196F3',
        type: 'line',
        tension: 0.4,
        yAxisID: 'y',
        valueType: 'number',
      },
      {
        label: 'Clicks',
        data: trendData.map((day) => day.clicks ?? 0),
        backgroundColor: '#4CAF50',
        borderColor: '#4CAF50',
        type: 'bar',
        yAxisID: 'y-2',
        valueType: 'number',
      },
    ],
  }
})

// Add these computed properties for the chart info
const totalViews = computed(() => {
  if (!selectedAdId.value || !adsAdminStore.trends[selectedAdId.value]) return 0
  return adsAdminStore.trends[selectedAdId.value].reduce((sum, day) => sum + (day.views ?? 0), 0)
})

const totalClicks = computed(() => {
  if (!selectedAdId.value || !adsAdminStore.trends[selectedAdId.value]) return 0
  return adsAdminStore.trends[selectedAdId.value].reduce((sum, day) => sum + (day.clicks ?? 0), 0)
})

const avgCTR = computed(() => {
  if (totalViews.value === 0) return 0
  return ((totalClicks.value / totalViews.value) * 100).toFixed(2)
})

// Update summary metrics computation
const summaryMetrics = computed(() => {
  if (!overview.value?.length) return []

  const totalViews = overview.value.reduce((sum, ad) => sum + (ad.total_views ?? 0), 0)
  const totalClicks = overview.value.reduce((sum, ad) => sum + (ad.total_clicks ?? 0), 0)

  return [
    {
      label: 'Total Views',
      value: formatNumber(totalViews),
      icon: 'i-lucide-eye',
    },
    {
      label: 'Total Clicks',
      value: formatNumber(totalClicks),
      icon: 'i-lucide-mouse-pointer',
    },
    {
      label: 'Average CTR',
      value: formatPercent(totalViews > 0 ? (totalClicks / totalViews) * 100 : 0),
      icon: 'i-lucide-percent',
    },
    {
      label: 'Active Ads',
      value: overview.value.length,
      icon: 'i-lucide-layout-template',
    },
  ]
})

const handleAdSelect = async (ad: AdMetrics) => {
  selectedAdId.value = ad.id
  dialogVisible.value = true // Open dialog when ad is selected

  await Promise.all([
    adsAdminStore.fetchDailyTrends(ad.id, selectedPeriod.value),
    adsAdminStore.fetchVariantMetrics(ad.id),
  ])
}

watch(dialogVisible, (newValue) => {
  if (!newValue) {
    selectedAdId.value = null
  }
})
</script>

<template>
  <div class="p-6 max-w-[1400px] mx-auto space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <h1 class="text-2xl font-bold">Advertising Analytics</h1>
      <PrimeSelect
        v-model="selectedPeriod"
        :options="periods"
        option-label="label"
        option-value="value"
        placeholder="Select Period"
        class="w-48"
      />
    </div>

    <!-- Loading State -->
    <div
      v-if="adsAdminStore.isLoading"
      class="flex justify-center items-center h-64"
    >
      <PrimeProgressSpinner />
    </div>

    <template v-else>
      <!-- Error State -->
      <PrimeMessage
        v-if="adsAdminStore.error"
        severity="error"
        :closable="false"
        class="mb-4"
      >
        {{ adsAdminStore.error }}
      </PrimeMessage>

      <!-- Summary Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div
          v-for="metric in summaryMetrics"
          :key="metric.label"
          class="bg-primary-950 rounded-lg shadow p-4"
        >
          <div class="flex items-center gap-3">
            <div :class="[metric.icon, 'text-blue-600 text-xl']" />
            <div>
              <div class="text-sm text-gray-500">{{ metric.label }}</div>
              <div class="text-2xl font-bold">{{ metric.value }}</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Ads Performance Table -->
      <PrimeDataTable
        :value="adsAdminStore.overview"
        :paginator="true"
        :rows="10"
        :row-hover="true"
        class="p-datatable-sm"
        striped-rows
        responsive-layout="scroll"
        @row-click="(e) => handleAdSelect(e.data)"
      >
        <PrimeColumn
          field="company_name"
          header="Company"
        />
        <PrimeColumn
          field="title"
          header="Ad Title"
        />
        <PrimeColumn
          field="total_views"
          header="Views"
          data-type="numeric"
          :sortable="true"
        >
          <template #body="{ data }">
            {{ formatNumber(data.total_views) }}
          </template>
        </PrimeColumn>
        <PrimeColumn
          field="total_clicks"
          header="Clicks"
          data-type="numeric"
          :sortable="true"
        >
          <template #body="{ data }">
            {{ formatNumber(data.total_clicks) }}
          </template>
        </PrimeColumn>
        <PrimeColumn
          field="ctr"
          header="CTR"
          data-type="numeric"
          :sortable="true"
        >
          <template #body="{ data }">
            {{ formatPercent(data.ctr) }}
          </template>
        </PrimeColumn>
        <PrimeColumn
          field="ad_position"
          header="Position"
          :filter-match-mode="FilterMatchMode.EQUALS"
        >
          <template #body="{ data }">
            <PrimeTag
              :value="data.ad_position"
              :severity="data.ad_position === 'top' ? 'success' : 'info'"
            />
          </template>
        </PrimeColumn>
      </PrimeDataTable>

      <!-- Selected Ad Details Dialog -->
      <PrimeDialog
        v-model:visible="dialogVisible"
        :modal="true"
        :style="{ width: '80vw' }"
        header="Ad Performance Details"
      >
        <template v-if="selectedAdId && adsAdminStore.trends[selectedAdId]">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Performance Chart -->
            <div class="rounded-lg shadow p-4">
              <h3 class="text-lg font-medium mb-4">Performance Trends</h3>
              <Chart
                :options-visible="false"
                :chart="{
                  id: selectedAdId,
                  type: 'line', // Base type
                  title: 'Performance Trends',
                  subtitle: 'Views and Clicks Over Time',
                  scaleType: 'linear',
                  data: chartData,
                  info: [
                    { name: 'Total Views', value: totalViews },
                    { name: 'Total Clicks', value: totalClicks },
                    { name: 'Average CTR', value: `${avgCTR}%` },
                  ],
                }"
              />
            </div>

            <!-- Variants Comparison -->
            <div class="rounded-lg shadow p-4">
              <h3 class="text-lg font-medium mb-4">A/B Test Results</h3>
              <PrimeDataTable
                :value="adsAdminStore.variants[selectedAdId]"
                class="p-datatable-sm"
                responsive-layout="scroll"
              >
                <PrimeColumn
                  field="is_control"
                  header="Variant"
                >
                  <template #body="{ data }">
                    {{ data.is_control ? 'Control' : 'Variant B' }}
                  </template>
                </PrimeColumn>
                <PrimeColumn
                  field="total_views"
                  header="Views"
                >
                  <template #body="{ data }">
                    {{ formatNumber(data.total_views) }}
                  </template>
                </PrimeColumn>
                <PrimeColumn
                  field="total_clicks"
                  header="Clicks"
                >
                  <template #body="{ data }">
                    {{ formatNumber(data.total_clicks) }}
                  </template>
                </PrimeColumn>
                <PrimeColumn
                  field="ctr"
                  header="CTR"
                >
                  <template #body="{ data }">
                    {{ formatPercent(data.ctr) }}
                  </template>
                </PrimeColumn>
              </PrimeDataTable>
            </div>
          </div>
        </template>
      </PrimeDialog>
    </template>
  </div>
</template>

================
File: components/AdminPreview.vue
================
<!-- components/AdsAdminDashboard.vue -->
<script setup lang="ts">
const supabase = useSupabaseClient()
const ads = ref<Ad[]>([])
const currentIndex = ref(0)
const isLoading = ref(true)
const previewType = ref<'card' | 'banner'>('card')
const bannerPosition = ref<'top' | 'bottom'>('top')

const currentAd = computed(() => ads.value[currentIndex.value])

const fetchAds = async () => {
  try {
    const { data: adsData, error: adsError } = await supabase
      .from('ads')
      .select(
        `
        *,
        company:company_id (*),
        package:package_id (*),
        variants:ad_variants (
          *,
          metrics:ad_daily_metrics (*)
        )
      `,
      )
      .eq('active', true)
      .gte('end_date', new Date().toISOString())

    if (adsError) throw adsError
    ads.value = adsData || []
  } catch (error) {
    console.error('Error fetching ads:', error)
  } finally {
    isLoading.value = false
  }
}

const handleNext = () => {
  currentIndex.value = (currentIndex.value + 1) % ads.value.length
}

const handlePrevious = () => {
  currentIndex.value = (currentIndex.value - 1 + ads.value.length) % ads.value.length
}

const calculateMetrics = (variant: any) => {
  const totalViews = variant.metrics?.reduce((sum: number, m: any) => sum + m.views, 0) || 0
  const totalClicks = variant.metrics?.reduce((sum: number, m: any) => sum + m.clicks, 0) || 0
  const ctr = totalViews > 0 ? (totalClicks / totalViews) * 100 : 0

  return {
    totalViews,
    totalClicks,
    ctr: ctr.toFixed(2),
  }
}

onMounted(() => {
  fetchAds()
})
</script>

<template>
  <div class="w-full p-6">
    <div class="rounded-xl overflow-hidden">
      <div class="p-6">
        <!-- Header Controls -->
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-white">Advertisement Preview</h2>
          <div class="flex items-center gap-4">
            <!-- Preview Type Toggle -->
            <div class="flex rounded-lg bg-slate-800 overflow-hidden">
              <button
                class="px-4 py-2 text-sm transition-colors"
                :class="
                  previewType === 'card'
                    ? 'bg-blue-500 text-white'
                    : 'text-slate-400 hover:text-white'
                "
                @click="previewType = 'card'"
              >
                Card
              </button>
              <button
                class="px-4 py-2 text-sm transition-colors"
                :class="
                  previewType === 'banner'
                    ? 'bg-blue-500 text-white'
                    : 'text-slate-400 hover:text-white'
                "
                @click="previewType = 'banner'"
              >
                Banner
              </button>
            </div>

            <!-- Navigation -->
            <span class="text-sm text-slate-400">{{ currentIndex + 1 }} of {{ ads.length }}</span>
          </div>
        </div>

        <!-- Loading State -->
        <div
          v-if="isLoading"
          class="flex items-center justify-center h-96"
        >
          <PrimeProgressSpinner />
        </div>

        <template v-else-if="currentAd">
          <!-- Ad Info -->
          <div class="mb-6">
            <div class="grid grid-cols-4 gap-4 p-4 bg-slate-800/50 rounded-lg">
              <div>
                <p class="text-sm text-slate-400">Company</p>
                <p class="font-medium text-white">{{ currentAd.company.name }}</p>
              </div>
              <div>
                <p class="text-sm text-slate-400">Package</p>
                <p class="font-medium text-white">{{ currentAd.package.name }}</p>
              </div>
              <div>
                <p class="text-sm text-slate-400">Status</p>
                <p class="font-medium text-white">
                  {{ new Date() < new Date(currentAd.start_date) ? 'Scheduled' : 'Active' }}
                </p>
              </div>
              <div>
                <p class="text-sm text-slate-400">Date Range</p>
                <p class="font-medium text-white">
                  {{ new Date(currentAd.start_date).toLocaleDateString() }} -
                  {{ new Date(currentAd.end_date).toLocaleDateString() }}
                </p>
              </div>
            </div>
          </div>

          <!-- Preview Area -->
          <div
            :class="[
              previewType === 'card'
                ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8'
                : 'flex flex-col space-y-8',
            ]"
          >
            <div
              v-for="variant in currentAd.variants"
              :key="variant.id"
              class="space-y-4"
            >
              <!-- Variant Header -->
              <div class="flex justify-between items-center">
                <div class="flex items-center gap-2">
                  <h4 class="font-medium text-white">
                    {{
                      variant.is_control ? 'Control Variant' : `Variant ${variant.id.slice(0, 8)}`
                    }}
                  </h4>
                  <span class="px-2 py-0.5 rounded text-xs bg-green-500/20 text-green-400">
                    Active
                  </span>
                </div>
              </div>

              <!-- Metrics -->
              <div class="bg-slate-800/50 rounded-lg p-4">
                <div class="grid grid-cols-4 gap-4">
                  <div>
                    <p class="text-sm text-slate-400 mb-1">Total Views</p>
                    <p class="text-lg font-medium text-white">
                      {{ calculateMetrics(variant).totalViews.toLocaleString() }}
                    </p>
                  </div>
                  <div>
                    <p class="text-sm text-slate-400 mb-1">Total Clicks</p>
                    <p class="text-lg font-medium text-white">
                      {{ calculateMetrics(variant).totalClicks.toLocaleString() }}
                    </p>
                  </div>
                  <div>
                    <p class="text-sm text-slate-400 mb-1">CTR</p>
                    <p class="text-lg font-medium text-white">
                      {{ calculateMetrics(variant).ctr }}%
                    </p>
                  </div>
                  <div>
                    <p class="text-sm text-slate-400 mb-1">Performance</p>
                    <p class="text-lg font-medium text-green-400">
                      {{ variant.performance_metrics?.avgEngagementTime?.toFixed(1) || '0.0' }}s avg
                    </p>
                  </div>
                </div>
              </div>

              <!-- Preview Frame -->
              <div
                class="relative rounded-lg overflow-hidden"
                :class="{ 'w-full': previewType === 'banner' }"
              >
                <div class="absolute inset-0 bg-slate-800/50" />
                <!-- Card Preview -->
                <AdsFeedCard
                  v-if="previewType === 'card'"
                  :ad="{
                    ...currentAd,
                    variants: [variant],
                  }"
                />

                <!-- Banner Preview -->
                <div
                  v-else
                  class="w-full"
                >
                  <AdsBanner
                    :ad="{
                      ...currentAd,
                      variants: [variant],
                    }"
                    :position="bannerPosition"
                  />
                </div>
              </div>
            </div>
          </div>
        </template>

        <div
          v-else
          class="text-center p-8"
        >
          <p class="text-lg text-slate-400">No active advertisements found</p>
        </div>
      </div>
    </div>
  </div>
</template>

================
File: components/Banner.vue
================
<script setup lang="ts">
import type { Ad } from '~/types/ads'

interface Props {
  ad: Ad
  position?: 'top' | 'bottom'
}

const props = withDefaults(defineProps<Props>(), {
  position: 'top',
})

const { trackInteraction } = useAdsStore()

// Get control variant
const variant = computed(() => props.ad.variants.find((v) => v.is_control) || props.ad.variants[0])

const handleClick = async (isVisible: boolean, startTime: number) => {
  if (!isVisible) return

  const engagementTime = (Date.now() - startTime) / 1000
  await trackInteraction(variant.value.id, 'click', engagementTime)
  window.open(variant.value.content.cta_url, '_blank')
}
</script>

<template>
  <AdsVisibilityWrapper
    v-slot="{ isVisible, startTime }"
    :variant-id="variant.id"
    :threshold="0.8"
  >
    <div
      class="bg-slate-900/80 backdrop-blur-sm border-color"
      :class="[position === 'bottom' ? 'border-t' : 'border-b']"
    >
      <div class="max-w-[940px] mx-auto px-4 py-6 md:px-8">
        <div
          class="relative overflow-hidden rounded-xl bg-slate-800/50 group hover:bg-slate-800/80 transition-all"
        >
          <!-- Background image with overlay if provided -->
          <div
            v-if="variant.content.background_image"
            class="absolute inset-0"
          >
            <img
              :src="variant.content.background_image"
              :alt="ad.company.name"
              class="w-full h-full object-cover"
            />
            <div
              class="absolute inset-0 bg-gradient-to-r from-slate-900/95 via-slate-900/90 to-slate-900/80"
            />
          </div>

          <div class="relative p-6 flex items-center justify-between">
            <div class="flex items-center gap-6">
              <div class="w-16 h-16 rounded-lg overflow-hidden bg-slate-700 flex-shrink-0">
                <img
                  v-if="ad.company.logo_url"
                  :src="ad.company.logo_url"
                  :alt="ad.company.name"
                  class="w-full h-full object-cover"
                />
              </div>
              <div>
                <div class="flex items-center gap-2 mb-1">
                  <span class="text-xs font-medium text-blue-400">SPONSORED</span>
                  <span class="text-blue-200">•</span>
                  <span class="text-sm text-blue-200">{{ ad.company.name }}</span>
                </div>
                <h3 class="text-xl font-bold text-white mb-1">{{ variant.content.title }}</h3>
                <p class="text-blue-200 text-sm line-clamp-2">{{ variant.content.description }}</p>
              </div>
            </div>

            <button
              class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-all group-hover:scale-105 flex items-center gap-2 text-nowrap"
              @click="() => handleClick(isVisible, startTime)"
            >
              {{ variant.content.cta_text || 'Learn More' }}
              <Icon
                name="arrow-right"
                class="w-4 h-4"
              />
            </button>
          </div>
        </div>
      </div>
    </div>
  </AdsVisibilityWrapper>
</template>

================
File: components/Contact.vue
================
<script setup lang="ts">
const form = reactive({
  // Company Information
  companyName: '',
  website: '',

  // Contact Information
  contactName: '',
  email: '',
  position: '',

  // Advertising Details
  interestedPackage: '',
  budget: null as number | null,
  startDate: '',

  // Campaign Information
  objectives: [] as string[],
  targetAudience: '',
  message: '',
})

const { adPackages } = storeToRefs(useAdsStore())

const objectives = [
  'Brand Awareness',
  'Lead Generation',
  'Product Launch',
  'Recruitment',
  'Event Promotion',
  'Research/Study Promotion',
]

const loading = ref(false)
const error = ref<string | null>(null)
const success = ref(false)

const handleSubmit = async () => {
  loading.value = true
  error.value = null

  try {
    await $fetch('/api/advertising/inquiries', {
      method: 'POST',
      body: form,
    })
    success.value = true
    // Reset form after successful submission
  } catch (err) {
    error.value = 'Failed to submit inquiry. Please try again or contact us directly.'
    console.error('Form submission error:', err)
  } finally {
    loading.value = false
  }
}
</script>

<template>
  <section class="container mx-auto px-4 py-16">
    <h2 class="text-2xl md:text-3xl font-bold mb-4 text-center">Get Started</h2>
    <p class="text-gray-400 text-center mb-12">Tell us about your advertising goals</p>

    <div class="bg-[#0A1021] rounded-lg border border-blue-900/30 p-6">
      <form
        @submit.prevent="handleSubmit"
        class="space-y-6"
      >
        <!-- Success Message -->
        <div
          v-if="success"
          class="bg-green-500/10 border border-green-500/20 text-green-400 p-4 rounded-lg"
        >
          Thank you for your interest! We'll get back to you within 24 hours.
        </div>

        <!-- Error Message -->
        <div
          v-if="error"
          class="bg-red-500/10 border border-red-500/20 text-red-400 p-4 rounded-lg"
        >
          {{ error }}
        </div>

        <!-- Company Information -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-sm text-gray-400 mb-2">Company Name *</label>
            <PrimeInputText
              v-model="form.companyName"
              class="w-full bg-[#030711]"
              required
            />
          </div>
          <div>
            <label class="block text-sm text-gray-400 mb-2">Company Website</label>
            <PrimeInputText
              v-model="form.website"
              class="w-full bg-[#030711]"
              type="url"
            />
          </div>
        </div>

        <!-- Contact Information -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-sm text-gray-400 mb-2">Contact Name *</label>
            <PrimeInputText
              v-model="form.contactName"
              class="w-full bg-[#030711]"
              required
            />
          </div>
          <div>
            <label class="block text-sm text-gray-400 mb-2">Position/Role *</label>
            <PrimeInputText
              v-model="form.position"
              class="w-full bg-[#030711]"
              required
            />
          </div>
        </div>

        <div>
          <label class="block text-sm text-gray-400 mb-2">Email *</label>
          <PrimeInputText
            v-model="form.email"
            type="email"
            class="w-full bg-[#030711]"
            required
          />
        </div>

        <!-- Advertising Details -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-sm text-gray-400 mb-2">Package Interest *</label>
            <PrimeSelect
              v-model="form.interestedPackage"
              :options="adPackages"
              option-label="name"
              option-value="id"
              placeholder="Select a package"
              class="w-full bg-[#030711]"
              required
            />
          </div>
          <div>
            <label class="block text-sm text-gray-400 mb-2">Desired Start Date</label>
            <PrimeCalendar
              v-model="form.startDate"
              class="w-full bg-[#030711]"
              :min-date="new Date()"
            />
          </div>
        </div>

        <!-- Campaign Information -->
        <div class="flex flex-col gap-2">
          <label class="text-sm text-gray-400">Campaign Objectives</label>
          <PrimeSelectButton
            v-model="form.objectives"
            :options="objectives"
            multiple
            class="w-full grid grid-cols-3 gap-2"
          />
        </div>

        <div>
          <label class="block text-sm text-gray-400 mb-2">Target Audience Description</label>
          <PrimeTextarea
            v-model="form.targetAudience"
            class="w-full bg-[#030711]"
            rows="2"
            placeholder="Describe your ideal audience..."
          />
        </div>

        <div>
          <label class="block text-sm text-gray-400 mb-2">Additional Information</label>
          <PrimeTextarea
            v-model="form.message"
            rows="4"
            class="w-full bg-[#030711]"
            placeholder="Tell us more about your advertising goals..."
          />
        </div>

        <div class="text-center">
          <PrimeButton
            type="submit"
            :loading="loading"
            class="px-8"
          >
            <template #default>
              <span class="flex items-center gap-2">
                <Icon name="mdi:rocket-launch-outline" />
                Submit Inquiry
              </span>
            </template>
          </PrimeButton>
        </div>
      </form>
    </div>
  </section>
</template>

================
File: components/DiscountBanner.vue
================
<template>
  <div
    class="promo-banner relative overflow-hidden bg-gradient-to-br from-slate-900 via-purple-950 to-slate-900 rounded-lg p-8"
  >
    <!-- Animated stars background -->
    <div class="absolute inset-0 overflow-hidden">
      <div
        v-for="i in 50"
        :key="i"
        class="star absolute bg-white rounded-full"
        :style="{
          top: `${Math.random() * 100}%`,
          left: `${Math.random() * 100}%`,
          width: `${1 + Math.random() * 2}px`,
          height: `${1 + Math.random() * 2}px`,
          animation: `twinkle ${2 + Math.random() * 3}s infinite`,
        }"
      >
      </div>
    </div>

    <!-- Main content -->
    <div class="relative z-10">
      <!-- Main grid layout -->
      <div class="grid grid-cols-[1fr_320px] gap-24">
        <!-- Left column -->
        <div class="space-y-8">
          <div class="space-y-4">
            <h1
              class="text-5xl font-bold bg-clip-text text-transparent uppercase bg-gradient-to-r from-blue-300 via-purple-300 to-pink-300 leading-tight"
            >
              Join the Frontier
            </h1>
            <p class="text-xl font-semibold text-blue-200">
              Explore the Cosmos, Shape the Future
            </p>
          </div>

          <div class="grid grid-cols-2 gap-4 grid-flow-row-dense">
            <div class="flex items-center gap-3">
              <Icon
                name="mdi:star"
                size="30"
                class="text-yellow-400 w-8 h-8"
              />
              <span class="text-lg text-blue-100">50% OFF for life on all premium features</span>
            </div>
            <div class="flex items-center gap-4">
              <Icon
                name="mdi:rocket"
                size="30"
                class="text-purple-400 w-8 h-8"
              />
              <span class="text-lg text-blue-100">Exclusive beta access to new features</span>
            </div>
            <div class="flex items-center gap-4">
              <Icon
                name="mdi:crown"
                size="30"
                class="text-yellow-400 w-8 h-8"
              />
              <span class="text-lg text-blue-100">Recognition as a community leader</span>
            </div>
            <div class="flex items-center gap-3">
              <Icon
                name="mdi:star"
                size="30"
                class="text-yellow-400 w-8 h-8"
              />
              <span class="text-lg text-blue-100">50% OFF for life on all premium features</span>
            </div>
            <div class="flex items-center gap-4">
              <Icon
                name="mdi:rocket"
                size="30"
                class="text-purple-400 w-8 h-8"
              />
              <span class="text-lg text-blue-100">Exclusive beta access to new features</span>
            </div>
            <div class="flex items-center gap-4">
              <Icon
                name="mdi:crown"
                size="30"
                class="text-yellow-400 w-8 h-8"
              />
              <span class="text-lg text-blue-100">Recognition as a community leader</span>
            </div>
          </div>
        </div>

        <!-- Right column -->
        <div class="space-y-8">
          <div
            class="w-full aspect-square bg-white rounded-lg flex items-center justify-center shadow-lg shadow-purple-500/20"
          >
            <p class="text-gray-400 text-sm text-center">QR Code Space</p>
          </div>
        </div>
      </div>

      <!-- Bottom section with progress bar and button -->
      <div class="mt-6">
        <div class="grid grid-cols-[1fr_320px] gap-24">
          <!-- Progress bar section -->
          <div class="space-y-3">
            <div class="flex justify-between text-blue-200">
              <span>ONLY 47 REMAINING</span>
            </div>
            <div class="w-full h-6 bg-purple-950/50 rounded-r-full rounded-l-lg overflow-hidden">
              <div
                class="h-full bg-gradient-to-r from-emerald-500 to-green-400 rounded-l-lg rounded-r-full transition-all duration-1000"
                style="width: 6%"
              >
              </div>
            </div>
          </div>

          <div class="w-full flex justify-center">
            <div class="flex items-center gap-4 text-blue-200">
              <div class="flex items-center gap-1">
                <span class="text-xl font-bold">{{ countdown.seconds }}</span>
                <span class="text-xs uppercase">secs</span>
              </div>
              <div class="flex items-center gap-1">
                <span class="text-xl font-bold">{{ countdown.minutes }}</span>
                <span class="text-xs uppercase">mins</span>
              </div>
              <div class="flex items-center gap-1">
                <span class="text-xl font-bold">{{ countdown.hours }}</span>
                <span class="text-xs uppercase">hours</span>
              </div>
              <div class="flex items-center gap-1">
                <span class="text-xl font-bold">{{ countdown.days }}</span>
                <span class="text-xs uppercase">days</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
const endDate = new Date('2025-01-16T23:59:59Z')

// Reactive countdown object
const countdown = ref({
  days: 0,
  hours: 0,
  minutes: 0,
  seconds: 0,
})

// Function to update countdown
const updateCountdown = () => {
  const now = new Date()
  const timeDiff = endDate.getTime() - now.getTime()

  if (timeDiff > 0) {
    const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24))
    const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
    const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60))
    const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000)

    countdown.value = { days, hours, minutes, seconds }
  } else {
    countdown.value = { days: 0, hours: 0, minutes: 0, seconds: 0 }
  }
}

// Set up timer
let timer: number

onMounted(() => {
  updateCountdown() // Initial update
  timer = window.setInterval(updateCountdown, 1000)
})

onUnmounted(() => {
  if (timer) clearInterval(timer)
})
</script>

<style scoped>
.custom-button {
  background: linear-gradient(135deg, #4f46e5, #7c3aed) !important;
  border: none !important;
  box-shadow: 0 0 30px rgba(124, 58, 237, 0.3) !important;
  padding: 1.5rem 2.5rem !important;
  transition: all 0.3s ease !important;
}

.custom-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 0 40px rgba(124, 58, 237, 0.5) !important;
}

@keyframes twinkle {
  0%,
  100% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
}

.star {
  box-shadow: 0 0 4px #fff;
}
</style>

================
File: components/FeedCard.vue
================
<!-- components/AdsFeedCard.vue -->
<script setup lang="ts">
import type { Ad } from '~/types/ads'

interface Props {
  ad: Ad
}

const props = defineProps<Props>()
const ads = useAdsStore()
const { currentAdQueue } = storeToRefs(ads)


const isFlipped = ref(false)
const startTime = ref(Date.now())
const flipStartTime = ref(0)

// Get control variant
const variant = computed(() => props.ad.variants.find((v) => v.is_control) || props.ad.variants[0])

const handleClick = async (event: MouseEvent, isVisible: boolean, startTime: number) => {
  if (!isVisible) return

  const target = event.target as HTMLElement
  if (target.closest('a') || target.closest('button')) {
    event.stopPropagation()
    return
  }

  isFlipped.value = !isFlipped.value
  if (isFlipped.value) {
    flipStartTime.value = Date.now()
  } else if (flipStartTime.value > 0) {
    const flipEngagementTime = (Date.now() - flipStartTime.value) / 1000
    await ads.trackInteraction(variant.value.id, 'view', flipEngagementTime)
  }
}

const handleSourceVisit = async (isVisible: boolean, startTime: number) => {
  if (!isVisible) return
  const engagementTime = (Date.now() - startTime) / 1000
  await ads.trackInteraction(variant.value.id, 'click', engagementTime)
}

const handleMouseEnter = () => {
  isFlipped.value = true
  flipStartTime.value = Date.now()
}

const handleMouseLeave = () => {
  isFlipped.value = false
  if (flipStartTime.value > 0) {
    // Track engagement time when mouse leaves
    const flipEngagementTime = (Date.now() - flipStartTime.value) / 1000
    ads.trackInteraction(variant.value.id, 'view', flipEngagementTime)
    flipStartTime.value = 0
  }
}

// Track initial view
onMounted(() => {
  ads.trackInteraction(variant.value.id, 'view')
})

// Track final engagement time when component is unmounted
onBeforeUnmount(() => {
  const totalEngagementTime = (Date.now() - startTime.value) / 1000
  ads.trackInteraction(variant.value.id, 'view', totalEngagementTime)
})
</script>

<template>
  <AdsVisibilityWrapper
    v-slot="{ isVisible, startTime }"
    :variant-id="variant.id"
    :threshold="0.5"
  >
    <div
      class="group relative h-[450px] perspective-1000 hover:cursor-pointer foreground rounded-lg"
      @click="(e) => handleClick(e, isVisible, startTime)"
      @mouseenter="
        () => {
          if (isVisible) isFlipped = true
        }
      "
      @mouseleave="
        () => {
          if (isVisible) isFlipped = false
        }
      "
    >
      <div
        class="relative w-full h-full transition-all duration-500 transform-style-preserve-3d border-2 border-blue-500/30 rounded-lg"
        :class="[{ 'rotate-y-180': isFlipped }]"
      >
        <!-- Front of card -->
        <div class="absolute w-full h-full backface-hidden">
          <div class="p-4 flex flex-col justify-between h-full">
            <div>
              <div class="flex items-center gap-2 mb-2">
                <div class="flex-shrink-0 w-6 h-6 rounded-full overflow-hidden">
                  <img
                    :src="ad.company.logo_url"
                    :alt="ad.company.name"
                    class="w-full h-full object-cover"
                  />
                </div>
                <div class="flex items-center gap-2">
                  <span class="font-medium text-sm">{{ ad.company.name }}</span>
                  <span class="text-xs text-blue-500 font-medium">SPONSORED</span>
                </div>
              </div>
              <h3
                class="text-xl font-bold mb-2 line-clamp-3 min-h-[3.5rem]"
                :title="variant.content.title"
              >
                {{ variant.content.title }}
              </h3>
              <p>{{ variant.content.tagline }}</p>
            </div>
            <div>
              <div class="mb-4">
                <div class="relative w-full pb-[56.25%]">
                  <img
                    :src="variant.content.featured_image"
                    :alt="variant.content.title"
                    class="absolute inset-0 w-full h-full object-cover rounded-lg"
                  />
                </div>
              </div>
              <div class="flex w-full">
                <a
                  :href="variant.content.cta_url"
                  target="_blank"
                  rel="noopener noreferrer sponsored"
                  class="bg-blue-600 text-white px-4 flex justify-center items-center w-full py-2 rounded-lg hover:bg-blue-700 transition-colors"
                  @click="() => handleSourceVisit(isVisible, startTime)"
                >
                  {{ variant.content.cta_text || 'Learn More' }}
                </a>
              </div>
            </div>
          </div>
        </div>

        <!-- Back of card -->
        <div
          class="absolute w-full h-full backface-hidden rotate-y-180 bg-primary-950 rounded-lg p-4 flex flex-col"
        >
          <div class="flex-grow overflow-hidden flex flex-col">
            <h3 class="text-xl font-bold mb-4 line-clamp-3 min-h-[3.5rem]">
              {{ variant.content.title }}
            </h3>
            <p class="text-base overflow-y-auto flex-grow">
              {{ variant.content.description }}
            </p>
          </div>

          <div class="border-t border-primary-900 pt-4">
            <a
              :href="variant.content.cta_url"
              target="_blank"
              rel="noopener noreferrer sponsored"
              class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors w-full inline-block text-center"
              @click="handleSourceVisit"
            >
              {{ variant.content.cta_text || 'Learn More' }}
            </a>
          </div>
        </div>
      </div>
    </div>
  </AdsVisibilityWrapper>
</template>

<style scoped>
.perspective-1000 {
  perspective: 1000px;
}

.transform-style-preserve-3d {
  transform-style: preserve-3d;
}

.backface-hidden {
  backface-visibility: hidden;
}

.rotate-y-180 {
  transform: rotateY(180deg);
}
</style>

================
File: components/Packages.vue
================
<script setup lang="ts">
import type { AdPackage } from '~/types/ads'

const { adPackages, isLoading } = storeToRefs(useAdsStore())
const { selectedPackageId, selectPackage } = useAdvertising()

const handleSelectPackage = (packageId: string) => {
  selectPackage(packageId)
  // Scroll to calculator
  const calculator = document.querySelector('#impact-calculator')
  calculator?.scrollIntoView({ behavior: 'smooth' })
}

// Position-based configuration for order and badges
const POSITION_CONFIG = {
  top: { order: 1, highlight: true },
  feed: { order: 2, badge: 'Most Popular' },
  newsletter: { order: 3 },
} as const

// Feature icons mapping
const FEATURE_ICONS = {
  placement: 'mdi:view-dashboard-outline',
  visibility: 'mdi:eye-outline',
  branding: 'mdi:palette-outline',
  testing: 'mdi:ab-testing',
  analytics: 'mdi:chart-line',
  support: 'mdi:headphones',
  integration: 'mdi:layers-outline',
  tracking: 'mdi:trending-up',
  templates: 'mdi:email-outline',
  audience: 'mdi:account-group-outline',
} as const

// Get appropriate icon for a feature
const getFeatureIcon = (feature: string) => {
  const key = Object.keys(FEATURE_ICONS).find((k) => feature.toLowerCase().includes(k))
  return FEATURE_ICONS[key as keyof typeof FEATURE_ICONS] || 'mdi:check-circle-outline'
}

const formattedPackages = computed(() => {
  return adPackages.value
    .filter((pkg) => pkg.active)
    .map((pkg) => ({
      ...pkg,
      badge: POSITION_CONFIG[pkg.position as keyof typeof POSITION_CONFIG]?.badge || '',
      highlight: POSITION_CONFIG[pkg.position as keyof typeof POSITION_CONFIG]?.highlight || false,
    }))
    .sort((a, b) => {
      const orderA = POSITION_CONFIG[a.position as keyof typeof POSITION_CONFIG]?.order || 99
      const orderB = POSITION_CONFIG[b.position as keyof typeof POSITION_CONFIG]?.order || 99
      return orderA - orderB
    })
})
</script>

<template>
  <section class="container mx-auto px-4 py-16">
    <h2 class="text-2xl md:text-3xl font-bold mb-4 text-center">Launch Packages</h2>
    <p class="text-gray-400 text-center mb-12">Choose your trajectory in the advertising cosmos</p>

    <!-- Loading State -->
    <div
      v-if="isLoading"
      class="flex justify-center items-center py-12"
    >
      <div class="relative w-16 h-16">
        <div class="absolute inset-0 rounded-full border-4 border-blue-500/20 animate-pulse" />
        <div class="absolute inset-0 rounded-full border-t-4 border-blue-400 animate-spin" />
      </div>
    </div>

    <!-- Packages Grid -->
    <div
      v-else
      class="grid grid-cols-1 md:grid-cols-3 gap-6"
    >
      <div
        v-for="pkg in formattedPackages"
        :key="pkg.id"
        class="relative group"
      >
        <!-- Card Container with conditional highlighting -->
        <div
          class="h-full flex flex-col rounded-lg border transition-all duration-300 relative"
          :class="[
            pkg.highlight
              ? 'bg-gradient-to-b from-slate-800 to-slate-900 border-slate-400/30 shadow-lg shadow-slate-500/10'
              : 'bg-[#0A1021] border-blue-900/30 hover:border-blue-500/30',
          ]"
        >
          <!-- Most Popular Badge -->
          <PrimeBadge
            v-if="pkg.badge"
            :value="pkg.badge"
            severity="info"
            size="small"
            class="absolute -top-3 right-4 bg-blue-500 text-white border-none px-4 uppercase"
          />

          <!-- Card Content -->
          <div class="p-6 flex-grow flex flex-col">
            <div class="flex-grow">
              <h3 class="text-xl font-bold mb-2">{{ pkg.name }}</h3>
              <p class="text-gray-400 text-sm mb-4">{{ pkg.description }}</p>

              <div class="text-3xl font-bold text-white mb-6">
                ${{ pkg.price.toLocaleString() }}<span class="text-lg text-gray-400">/month</span>
              </div>

              <ul class="space-y-3 mb-8">
                <li
                  v-for="feature in pkg.features"
                  :key="feature"
                  class="flex items-start gap-3 text-sm text-gray-300"
                >
                  <div
                    class="p-1 rounded-lg flex bg-blue-500/10 flex-shrink-0"
                    :class="{ 'bg-slate-400/10': pkg.highlight }"
                  >
                    <Icon
                      :name="getFeatureIcon(feature)"
                      class="flex"
                      size="20px"
                      :class="pkg.highlight ? 'text-slate-300' : 'text-blue-400'"
                    />
                  </div>
                  <span>{{ feature }}</span>
                </li>
              </ul>
            </div>

            <!-- Button always at bottom -->
            <button
              class="w-full px-4 py-2 rounded-lg transition-colors"
              :class="[
                selectedPackageId === pkg.id
                  ? 'bg-blue-500 text-white'
                  : pkg.highlight
                    ? 'bg-gradient-to-r from-slate-300 to-slate-400 text-slate-900 hover:from-slate-200 hover:to-slate-300'
                    : 'bg-blue-500/10 text-blue-400 border border-blue-500/20 hover:bg-blue-500/20',
              ]"
              @click="handleSelectPackage(pkg.id)"
            >
              {{ selectedPackageId === pkg.id ? 'Selected' : 'Select Package' }}
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- No Packages State -->
    <div
      v-if="!isLoading && formattedPackages.length === 0"
      class="text-center py-12 text-gray-400"
    >
      No packages available at this time. Please check back later.
    </div>
  </section>
</template>

================
File: components/Performance.vue
================
<script setup lang="ts">
const { fetchAnalyticsOverview } = useAdsAdminStore()

const metrics = ref({
  daily: {
    avgViews: 0,
    topBannerImpressions: 0,
    feedViews: 0,
    newsletterSubs: 0,
  },
  growth: {
    monthlyGrowth: 32,
    yearlyGrowth: 284,
  },
  engagement: {
    avgTimeOnSite: '4:32',
    returningUsers: 68,
    avgPagesPerVisit: 4.2,
  },
  demographics: {
    industry: [
      { name: 'Space Industry', percentage: 45 },
      { name: 'Research/Academia', percentage: 30 },
      { name: 'Technology', percentage: 15 },
      { name: 'Other', percentage: 10 },
    ],
  },
})

const isLoading = ref(true)

onMounted(async () => {
  try {
    // Fetch real analytics data
    const data = await fetchAnalyticsOverview('30')
    // Update metrics with real data when available
    isLoading.value = false
  } catch (error: any) {
    console.error('Error fetching metrics:', error)
    isLoading.value = false
  }
})
</script>

<template>
  <section class="container mx-auto px-4 py-16">
    <h2 class="text-2xl md:text-3xl font-bold mb-4 text-center">Platform Performance</h2>
    <p class="text-gray-400 text-center mb-12"
      >Reach a growing community of space enthusiasts and industry professionals</p
    >

    <!-- Loading State -->
    <div
      v-if="isLoading"
      class="flex justify-center items-center py-12"
    >
      <div class="relative w-16 h-16">
        <div class="absolute inset-0 rounded-full border-4 border-blue-500/20 animate-pulse" />
        <div class="absolute inset-0 rounded-full border-t-4 border-blue-400 animate-spin" />
      </div>
    </div>

    <div
      v-else
      class="space-y-8"
    >
      <!-- Daily Metrics -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div
          v-for="(stat, index) in [
            { label: 'Daily Views', value: '15K+', icon: 'mdi:eye-outline' },
            { label: 'Banner Impressions', value: '12K+', icon: 'mdi:presentation' },
            { label: 'Feed Engagement', value: '8K+', icon: 'mdi:thumb-up-outline' },
            { label: 'Newsletter Subscribers', value: '5K+', icon: 'mdi:email-outline' },
          ]"
          :key="index"
          class="bg-[#0A1021] rounded-lg border border-blue-900/30 p-6"
        >
          <div class="flex items-start gap-4">
            <div class="p-2 rounded-lg bg-blue-500/10">
              <Icon
                :name="stat.icon"
                class="w-6 h-6 text-blue-400"
              />
            </div>
            <div>
              <div class="text-2xl font-bold text-white">{{ stat.value }}</div>
              <div class="text-sm text-gray-400">{{ stat.label }}</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Growth Metrics -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Audience Growth -->
        <div class="bg-[#0A1021] rounded-lg border border-blue-900/30 p-6">
          <h3 class="text-lg font-semibold mb-4 flex items-center gap-2">
            <Icon
              name="mdi:trending-up"
              class="text-blue-400"
            />
            Platform Growth
          </h3>
          <div class="space-y-4">
            <div class="flex justify-between items-center">
              <span class="text-gray-400">Monthly Growth</span>
              <span class="text-green-400">+{{ metrics.growth.monthlyGrowth }}%</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="text-gray-400">Yearly Growth</span>
              <span class="text-green-400">+{{ metrics.growth.yearlyGrowth }}%</span>
            </div>
          </div>
        </div>

        <!-- Engagement Metrics -->
        <div class="bg-[#0A1021] rounded-lg border border-blue-900/30 p-6">
          <h3 class="text-lg font-semibold mb-4 flex items-center gap-2">
            <Icon
              name="mdi:account-group"
              class="text-blue-400"
            />
            Audience Engagement
          </h3>
          <div class="space-y-4">
            <div class="flex justify-between items-center">
              <span class="text-gray-400">Avg. Time on Site</span>
              <span class="text-white">{{ metrics.engagement.avgTimeOnSite }}</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="text-gray-400">Returning Users</span>
              <span class="text-white">{{ metrics.engagement.returningUsers }}%</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="text-gray-400">Pages per Visit</span>
              <span class="text-white">{{ metrics.engagement.avgPagesPerVisit }}</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Audience Demographics -->
      <div class="bg-[#0A1021] rounded-lg border border-blue-900/30 p-6">
        <h3 class="text-lg font-semibold mb-6 flex items-center gap-2">
          <Icon
            name="mdi:chart-pie"
            class="text-blue-400"
          />
          Audience Demographics
        </h3>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div
            v-for="demo in metrics.demographics.industry"
            :key="demo.name"
            class="text-center p-4"
          >
            <div class="text-2xl font-bold text-white mb-1">{{ demo.percentage }}%</div>
            <div class="text-sm text-gray-400">{{ demo.name }}</div>
          </div>
        </div>
      </div>
    </div>
  </section>
</template>

================
File: components/RoiCalculator.vue
================
<script setup lang="ts">
const { selectedPackage, getPackageMetrics } = useAdvertising()
const duration = ref(1)
const isLoading = ref(false)

const metrics = computed(() => {
  if (!selectedPackage.value) return null

  const baseMetrics = getPackageMetrics(selectedPackage.value.position)
  if (!baseMetrics) return null

  return {
    // Reach Metrics
    totalViews: baseMetrics.avgViews * duration.value,
    uniqueVisitors: Math.round(baseMetrics.avgViews * 0.75) * duration.value,
    viewFrequency: 2.4,

    // Engagement Metrics
    projectedClicks: Math.round(
      baseMetrics.avgViews * (baseMetrics.clickRate / 100) * duration.value,
    ),
    avgEngagement: baseMetrics.avgEngagement,
    clickRate: baseMetrics.clickRate,
    bounceRate: 28,

    // Audience Metrics
    industryReach: {
      spaceIndustry: 45,
      research: 30,
      technology: 15,
      other: 10,
    },
    geographicReach: {
      namerica: 40,
      europe: 35,
      asia: 20,
      other: 5,
    },

    // Investment Metrics
    totalInvestment: selectedPackage.value.price * duration.value,
    cpmRate:
      ((selectedPackage.value.price * duration.value) / (baseMetrics.avgViews * duration.value)) *
      1000,
    estimatedRoi: 280,
  }
})
</script>

<template>
  <section class="container mx-auto px-4 py-16">
    <h2 class="text-2xl md:text-3xl font-bold mb-4 text-center">Calculate Your Impact</h2>
    <p class="text-gray-400 text-center mb-12"
      >Project your reach based on historical platform data</p
    >

    <div
      v-if="!selectedPackage"
      class="text-center py-12"
    >
      <p class="text-gray-400 mb-4">Select a package above to see projected performance</p>
      <Icon
        name="mdi:arrow-up-circle"
        class="w-8 h-8 text-blue-400 animate-bounce"
      />
    </div>

    <div
      v-else
      class="bg-[#0A1021] rounded-lg border border-blue-900/30 p-8"
    >
      <!-- Package Info -->
      <div class="mb-8">
        <div class="text-sm text-blue-400 mb-2">Selected Package</div>
        <div class="text-3xl font-bold text-white mb-4">{{ selectedPackage.name }}</div>
        <p class="text-gray-400">{{ selectedPackage.description }}</p>
      </div>

      <!-- Duration Selector -->
      <div class="mb-12">
        <label class="block text-sm text-blue-400 mb-2">Campaign Duration (months)</label>
        <PrimeInputNumber
          v-model="duration"
          :min="1"
          :max="12"
          class="w-full bg-[#030711]"
          :pt="{
            input: {
              class: 'w-full bg-slate-900 border-blue-900/30 text-xl py-3',
            },
          }"
        />
      </div>

      <!-- Metrics Display -->
      <div
        v-if="metrics"
        class="space-y-12"
      >
        <!-- Reach Metrics -->
        <div>
          <h3 class="text-lg font-semibold text-blue-400 mb-4">Reach Metrics</h3>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="bg-slate-900/50 rounded-lg p-6 border border-blue-900/20">
              <div class="flex items-center gap-2 mb-3 text-blue-400">
                <Icon
                  name="mdi:eye-outline"
                  class="w-5 h-5"
                />
                <span class="text-sm">Total Views</span>
              </div>
              <div class="text-3xl font-bold text-white">
                {{ metrics.totalViews.toLocaleString() }}
              </div>
              <div class="text-sm text-gray-400 mt-1">
                {{ Math.round(metrics.totalViews / duration.value).toLocaleString() }} per month
              </div>
            </div>

            <div class="bg-slate-900/50 rounded-lg p-6 border border-blue-900/20">
              <div class="flex items-center gap-2 mb-3 text-blue-400">
                <Icon
                  name="mdi:account-multiple-outline"
                  class="w-5 h-5"
                />
                <span class="text-sm">Unique Visitors</span>
              </div>
              <div class="text-3xl font-bold text-white">
                {{ metrics.uniqueVisitors.toLocaleString() }}
              </div>
              <div class="text-sm text-gray-400 mt-1">
                {{ metrics.viewFrequency }}x average frequency
              </div>
            </div>

            <div class="bg-slate-900/50 rounded-lg p-6 border border-blue-900/20">
              <div class="flex items-center gap-2 mb-3 text-blue-400">
                <Icon
                  name="mdi:cursor-pointer"
                  class="w-5 h-5"
                />
                <span class="text-sm">Click Rate</span>
              </div>
              <div class="text-3xl font-bold text-white"> {{ metrics.clickRate }}% </div>
              <div class="text-sm text-gray-400 mt-1">
                {{ metrics.projectedClicks.toLocaleString() }} total clicks
              </div>
            </div>
          </div>
        </div>

        <!-- Audience Insights -->
        <div>
          <h3 class="text-lg font-semibold text-blue-400 mb-4">Audience Insights</h3>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Industry Distribution -->
            <div class="bg-slate-900/50 rounded-lg p-6 border border-blue-900/20">
              <div class="flex items-center gap-2 mb-4 text-blue-400">
                <Icon
                  name="mdi:briefcase-outline"
                  class="w-5 h-5"
                />
                <span class="text-sm">Industry Distribution</span>
              </div>
              <div class="space-y-3">
                <div
                  v-for="(value, key) in metrics.industryReach"
                  :key="key"
                  class="flex justify-between"
                >
                  <span class="text-gray-400">{{ key.replace(/([A-Z])/g, ' $1').trim() }}</span>
                  <span class="text-white font-medium">{{ value }}%</span>
                </div>
              </div>
            </div>

            <!-- Geographic Reach -->
            <div class="bg-slate-900/50 rounded-lg p-6 border border-blue-900/20">
              <div class="flex items-center gap-2 mb-4 text-blue-400">
                <Icon
                  name="mdi:earth"
                  class="w-5 h-5"
                />
                <span class="text-sm">Geographic Distribution</span>
              </div>
              <div class="space-y-3">
                <div
                  v-for="(value, key) in metrics.geographicReach"
                  :key="key"
                  class="flex justify-between"
                >
                  <span class="text-gray-400">{{ key.replace(/([A-Z])/g, ' $1').trim() }}</span>
                  <span class="text-white font-medium">{{ value }}%</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Investment Summary -->
        <div>
          <h3 class="text-lg font-semibold text-blue-400 mb-4">Investment Summary</h3>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="bg-slate-900/50 rounded-lg p-6 border border-blue-900/20">
              <div class="flex items-center gap-2 mb-3 text-blue-400">
                <Icon
                  name="mdi:currency-usd"
                  class="w-5 h-5"
                />
                <span class="text-sm">Total Investment</span>
              </div>
              <div class="text-3xl font-bold text-white">
                ${{ metrics.totalInvestment.toLocaleString() }}
              </div>
              <div class="text-sm text-gray-400 mt-1">
                ${{ selectedPackage.price.toLocaleString() }} per month
              </div>
            </div>

            <div class="bg-slate-900/50 rounded-lg p-6 border border-blue-900/20">
              <div class="flex items-center gap-2 mb-3 text-blue-400">
                <Icon
                  name="mdi:chart-line"
                  class="w-5 h-5"
                />
                <span class="text-sm">CPM Rate</span>
              </div>
              <div class="text-3xl font-bold text-white">${{ metrics.cpmRate.toFixed(2) }}</div>
              <div class="text-sm text-gray-400 mt-1">Cost per 1,000 views</div>
            </div>

            <div class="bg-slate-900/50 rounded-lg p-6 border border-blue-900/20">
              <div class="flex items-center gap-2 mb-3 text-blue-400">
                <Icon
                  name="mdi:trending-up"
                  class="w-5 h-5"
                />
                <span class="text-sm">Estimated ROI</span>
              </div>
              <div class="text-3xl font-bold text-white">{{ metrics.estimatedRoi }}%</div>
              <div class="text-sm text-gray-400 mt-1">Based on industry average</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Call to Action -->
      <div class="mt-12 text-center">
        <p class="text-gray-400 mb-4">Ready to get started with {{ selectedPackage.name }}?</p>
        <a
          href="#contact-form"
          class="inline-flex items-center gap-2 bg-blue-500 text-white px-8 py-3 rounded-lg hover:bg-blue-600 transition-colors"
        >
          Contact Us
          <Icon name="mdi:arrow-right" />
        </a>
      </div>
    </div>
  </section>
</template>

================
File: components/Showcase.vue
================
<script setup lang="ts">
const { fetchAnalyticsOverview } = useAdsAdminStore()
</script>

<template>
  <div class="bg-[#030711] min-h-screen text-white">
    <!-- Hero Section -->
    <div class="relative h-[60vh] flex items-center justify-center overflow-hidden">
      <div
        class="absolute inset-0 bg-[url('/api/placeholder/1920/1080')] bg-cover bg-center opacity-20"
      />
      <div
        class="absolute inset-0 bg-gradient-to-b from-transparent via-[#030711]/80 to-[#030711]"
      />
      <div class="relative text-center px-4">
        <h1 class="text-4xl md:text-6xl font-bold mb-4">
          A Cosmos to
          <span class="text-blue-400">Advertise</span>
        </h1>
        <p class="text-lg md:text-xl text-gray-400 max-w-2xl mx-auto">
          Your gateway to reaching space enthusiasts, industry leaders, and cosmic innovators
        </p>
      </div>
    </div>

    <AdsPerformance />

    <!-- AD PACKAGES -->
    <AdsPackages />

    <!-- ROI Calculator Section -->
    <AdsRoiCalculator />

    <AdsContact />
  </div>
</template>

================
File: components/VariantTesting.vue
================
<!-- components/AdsVariantTesting.vue -->
<script setup lang="ts">

interface Props {
  adId: string // Changed from sponsorId to adId to match our schema
}

defineProps<Props>()

const { fetchVariantMetrics, createVariant, variants } = useAdsAdminStore()

const isLoading = ref(true)

const metrics = computed(() => {
  if (!variants.value[props.adId]) return []
  return variants.value[props.adId]
})

onMounted(async () => {
  isLoading.value = true
  await fetchVariantMetrics(props.adId)
  isLoading.value = false
})
</script>

<template>
  <div class="bg-white rounded-xl shadow-lg p-6">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-2xl font-bold">A/B Testing</h3>
      <Button
        label="Create Variant"
        severity="primary"
        @click="() => createVariant(props.adId)"
      />
    </div>

    <div
      v-if="isLoading"
      class="p-4 text-center"
    >
      <PrimeProgressSpinner />
    </div>

    <div
      v-else
      class="grid grid-cols-1 md:grid-cols-2 gap-6"
    >
      <div
        v-for="variant in metrics"
        :key="variant.id"
        class="border rounded-lg p-4"
      >
        <div class="mb-4">
          <h4 class="font-medium mb-2">
            {{ variant.is_control ? 'Control Variant' : `Variant ${variant.id}` }}
          </h4>
          <div class="grid grid-cols-3 gap-4 text-sm">
            <div>
              <div class="text-gray-600">Views</div>
              <div class="font-bold">{{ variant.total_views.toLocaleString() }}</div>
            </div>
            <div>
              <div class="text-gray-600">Clicks</div>
              <div class="font-bold">{{ variant.total_clicks.toLocaleString() }}</div>
            </div>
            <div>
              <div class="text-gray-600">CTR</div>
              <div class="font-bold">{{ variant.ctr }}%</div>
            </div>
          </div>
        </div>

        <AdsFeedCard :ad="{ ...ad, variants: [variant] }" />
      </div>
    </div>
  </div>
</template>

================
File: components/VisibilityWrapper.vue
================
<!-- components/AdVisibilityWrapper.vue -->
<script setup lang="ts">
const props = defineProps<{
  variantId: string
  threshold?: number
}>()

const { isVisible, startTime, onVisibilityChange } = useAdsEvents()
const elementRef = ref<HTMLElement | null>(null)
const { trackInteraction } = useAdsStore()

console.log('Observer', isVisible)

const slotProps = computed(() => ({
  isVisible: isVisible.value,
  startTime: startTime.value,
}))

onMounted(() => {
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        onVisibilityChange(entry.isIntersecting, props.variantId, trackInteraction)
      })
    },
    {
      threshold: props.threshold ?? 0.5,
    },
  )

  if (elementRef.value) {
    observer.observe(elementRef.value)
  }

  onBeforeUnmount(() => {
    if (elementRef.value) {
      observer.unobserve(elementRef.value)
    }
  })
})
</script>

<template>
  <div ref="elementRef">
    <slot v-bind="slotProps" />
  </div>
</template>

================
File: composables/useAdsAdminStore.ts
================
// stores/adsAdmin.ts
import { defineStore } from 'pinia'

// types/ads.ts
export interface AdMetrics {
  id: string
  package_name: string
  ad_position: string
  company_name: string
  logo_url: string
  title: string
  total_views: number
  total_clicks: number
  ctr: number
  ad_start_date: string
  ad_end_date: string
  days_tracked: number
}

export interface DailyMetrics {
  date: string
  views: number
  clicks: number
  ctr: number
}

export interface AdVariantMetrics {
  variant_id: string
  is_control: boolean
  content: {
    title: string
    description: string
    featured_image?: string
    cta_text: string
  }
  total_views: number
  total_clicks: number
  ctr: number
  daily_metrics: DailyMetrics[]
}

export const useAdsAdminStore = defineStore('adsAdmin', () => {
  // State
  const overview = ref<AdMetrics[]>([])
  const trends = ref<Record<string, DailyMetrics[]>>({})
  const variants = ref<Record<string, AdVariantMetrics[]>>({})
  const isLoading = ref(false)
  const error = ref<string | null>(null)

  // Actions
  async function fetchAnalyticsOverview(period: string = '30') {
    isLoading.value = true
    error.value = null

    try {
      const response = await $fetch('/api/ads/analytics/overview', {
        query: { period },
      })
      overview.value = response.data
      return response.data
    } catch (err) {
      error.value = 'Failed to fetch analytics overview'
      console.error('Analytics overview error:', err)
    } finally {
      isLoading.value = false
    }
  }

  async function fetchDailyTrends(adId: string, period: string = '300') {
    isLoading.value = true
    error.value = null

    try {
      const response = await $fetch('/api/ads/analytics/daily-trends', {
        query: { adId, period },
      })
      console.log('Daily trends:', response.data)
      trends.value[adId] = response.data
      return response.data
    } catch (err) {
      error.value = 'Failed to fetch daily trends'
      console.error('Daily trends error:', err)
    } finally {
      isLoading.value = false
    }
  }

  async function fetchVariantMetrics(adId: string) {
    isLoading.value = true
    error.value = null

    try {
      const response = await $fetch(`/api/ads/variants/${adId}/metrics`)
      console.log('Variant metrics:', response.data)
      variants.value[adId] = response.data
      return response.data
    } catch (err) {
      error.value = 'Failed to fetch variant metrics'
      console.error('Variant metrics error:', err)
    } finally {
      isLoading.value = false
    }
  }

  function clearCache() {
    overview.value = null
    trends.value = {}
    variants.value = {}
    error.value = null
  }

  return {
    // State
    overview,
    trends,
    variants,
    isLoading,
    error,

    // Actions
    fetchAnalyticsOverview,
    fetchDailyTrends,
    fetchVariantMetrics,
    clearCache,
  }
})

================
File: composables/useAdsEvents.ts
================
// composables/useAdsEvents.ts
export const useAdsEvents = () => {
  const isVisible = ref<boolean>(false)
  const startTime = ref(0)

  const onVisibilityChange = (
    isIntersecting: boolean,
    variantId: string,
    trackInteraction: Function,
  ) => {
    if (isIntersecting && !isVisible.value) {
      isVisible.value = true
      startTime.value = Date.now()
      trackInteraction(variantId, 'view')
    } else if (!isIntersecting && isVisible.value) {
      isVisible.value = false
      if (startTime.value > 0) {
        const engagementTime = (Date.now() - startTime.value) / 1000
        trackInteraction(variantId, 'view', engagementTime)
        startTime.value = 0
      }
    }
  }

  return {
    isVisible,
    startTime,
    onVisibilityChange,
  }
}

================
File: composables/useAdsPackages.ts
================
// composables/useAdvertising.ts
import type { AdPackage } from '~/types/referrals'

export const useAdvertising = () => {
  const selectedPackageId = useState<string | null>('selected-package-id', () => null)

  const { adPackages } = storeToRefs(useAdsStore())

  const selectedPackage = computed(() => {
    if (!selectedPackageId.value) return null
    return adPackages.value.find((pkg) => pkg.id === selectedPackageId.value)
  })

  // Package-specific metrics (these would come from real data)
  const getPackageMetrics = (position: string) => {
    const metrics = {
      top: {
        avgViews: 15000,
        clickRate: 2.8,
        avgEngagement: '00:45',
        monthlyGrowth: 32,
      },
      feed: {
        avgViews: 12000,
        clickRate: 3.2,
        avgEngagement: '01:15',
        monthlyGrowth: 28,
      },
      newsletter: {
        avgViews: 5000,
        clickRate: 4.5,
        avgEngagement: '02:30',
        monthlyGrowth: 25,
      },
    }
    return metrics[position as keyof typeof metrics] || null
  }

  const selectPackage = (packageId: string | null) => {
    selectedPackageId.value = packageId
  }

  return {
    selectedPackageId,
    selectedPackage,
    getPackageMetrics,
    selectPackage,
  }
}

================
File: composables/useAdsStore.ts
================
// stores/ads.ts
import { defineStore } from 'pinia'
import type { AdPackage, Ad } from '~/types/referrals'

export const useAdsStore = defineStore('ads', () => {
  const MIN_POST_GAP = 7
  const MAX_POST_GAP = 18

  // State
  const isLoading = ref(true)
  const totalProcessedItems = ref(0)
  const lastAdPosition = ref(0)
  const nextAdPosition = ref(0)
  const adPackages = ref<AdPackage[]>([])
  const activeAds = ref<Ad[]>([])

  // Helper function to shuffle array
  function shuffleArray<T>(array: T[]): T[] {
    const newArray = [...array]
    for (let i = newArray.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      ;[newArray[i], newArray[j]] = [newArray[j], newArray[i]]
    }
    return newArray
  }

  // Get next ad from the queue, reshuffling if necessary
  const currentAdQueue = ref<Ad[]>([])
  function getNextAd(): Ad {
    if (currentAdQueue.value.length === 0) {
      // We've used all ads, create a new shuffled queue
      currentAdQueue.value = shuffleArray(feedAds.value)
      console.log('Reshuffled ad queue:', currentAdQueue.value)
    }

    return currentAdQueue.value.shift()!
  }

  // Getters
  const feedAds = computed(() => {
    return activeAds.value.filter((ad) => {
      console.log('feedAds:', ad)
      const pkg = adPackages.value.find((p) => p.id === ad.package_id)
      return pkg?.position === 'feed'
    })
  })

  const topBannerAd = computed(() => {
    return activeAds.value.find((ad) => {
      const pkg = adPackages.value.find((p) => p.id === ad.package_id)
      return pkg?.position === 'top'
    })
  })

  // Actions
  async function loadAdPackages() {
    const response = await $fetch('/api/ads/packages')
    console.log('Ad packages client:', response.data)
    adPackages.value = response.data || []
  }

  async function loadActiveAds() {
    isLoading.value = true
    try {
      const response = await $fetch('/api/ads/active')
      console.log('Active ads:', response.data)
      if (response.data) {
        activeAds.value = response.data
      }
    } catch (error: any) {
      console.error('Error loading active ads:', error)
    } finally {
      isLoading.value = false
    }
  }

  async function trackInteraction(
    variantId: string,
    type: 'view' | 'click',
    engagementTime?: number,
  ) {
    try {
      await $fetch('/api/ads/track', {
        method: 'POST',
        body: { variantId, type, engagementTime },
      })
    } catch (error: any) {
      console.error('Error tracking ad interaction:', error)
    }
  }

  function getNextAdPosition(currentPosition: number, adPackage: AdPackage) {
    const gap = Math.floor(Math.random() * (MAX_POST_GAP - MIN_POST_GAP + 1) + MIN_POST_GAP)
    return currentPosition + gap
  }

  function integrateAdsIntoFeed(newsItems: any[], isNewContent = false) {
    const result = [...newsItems]
    const availableFeedAds = feedAds.value

    if (availableFeedAds.length === 0) return result

    if (isNewContent) {
      resetAdTracking()
    }

    // Initialize ad queue if empty
    if (currentAdQueue.value.length === 0 && totalProcessedItems.value === 0) {
      currentAdQueue.value = shuffleArray(availableFeedAds)
      console.log('Initial ad queue:', currentAdQueue.value)
    }

    if (totalProcessedItems.value === 0) {
      const firstAd = currentAdQueue.value[0]
      const firstAdPackage = adPackages.value.find((pkg) => pkg.id === firstAd.package_id)!
      nextAdPosition.value = getNextAdPosition(0, firstAdPackage)
    }

    const adPositions: Array<{ position: number; ad: Ad }> = []

    // Calculate positions for new ads
    while (nextAdPosition.value < result.length + totalProcessedItems.value) {
      const nextAd = getNextAd()
      const adPackage = adPackages.value.find((pkg) => pkg.id === nextAd.package_id)!
      const adjustedPosition = nextAdPosition.value - totalProcessedItems.value

      if (adjustedPosition < result.length) {
        adPositions.push({
          position: adjustedPosition,
          ad: nextAd,
        })
      }

      nextAdPosition.value = getNextAdPosition(nextAdPosition.value, adPackage)
    }

    // Insert ads from back to front
    for (let i = adPositions.length - 1; i >= 0; i--) {
      const { position, ad } = adPositions[i]
      const globalPosition = position + totalProcessedItems.value

      result.splice(position, 0, {
        id: `ad-${ad.id}-${globalPosition}`,
        type: 'sponsored',
        content: {
          id: ad.id,
          package_id: ad.package_id,
          company_id: ad.company_id,
          company: ad.company,
          variants: ad.variants,
          start_date: ad.start_date,
          end_date: ad.end_date,
          active: ad.active,
        },
        sortIndex: globalPosition,
      })
    }

    if (!isNewContent) {
      totalProcessedItems.value += result.length
    }

    console.log('Integrated ads into feed:', {
      resultLength: result.length,
      remainingAdsInQueue: currentAdQueue.value.length,
      adPositions,
    })

    return result
  }

  function resetAdTracking() {
    lastAdPosition.value = 0
    nextAdPosition.value = 0
    totalProcessedItems.value = 0
    currentAdQueue.value = [] // This will trigger a reshuffle on next use
  }

  // Initialize
  async function initialize() {
    await loadAdPackages()
    await loadActiveAds()
  }

  return {
    // State
    isLoading,
    adPackages,
    activeAds,

    // Getters
    topBannerAd,
    feedAds,
    currentAdQueue,

    // Actions
    initialize,
    integrateAdsIntoFeed,
    trackInteraction,
    resetAdTracking,
  }
})

================
File: plugins/initialize-ads.client.ts
================
// plugins/ads.ts
export default defineNuxtPlugin(async () => {
  const adsStore = useAdsStore()

  // Initialize the ads store
  await adsStore.initialize()
})

================
File: server/api/ads/analytics/daily-trends.ts
================
// server/api/ads/analytics/daily-trends.ts
import { serverSupabaseServiceRole } from '#supabase/server'

export default defineEventHandler(async (event) => {
  const client = serverSupabaseServiceRole(event)
  const { period = '300', adId } = getQuery(event)

  const startDate = new Date()
  startDate.setDate(startDate.getDate() - Number(period))

  console.log('Fetching daily trends for ad:', adId, 'from:', startDate)
  const { data, error } = await client.rpc('get_ad_daily_trends', {
    ad_uuid: adId,
    start_date: startDate.toISOString(),
  })

  console.log('Daily trends:', data, error)

  if (error) {
    throw createError({
      statusCode: 500,
      message: 'Error fetching daily trends',
    })
  }

  return { data }
})

================
File: server/api/ads/analytics/overview.ts
================
// server/api/ads/analytics/overview.ts
import { serverSupabaseServiceRole } from '#supabase/server'

export default defineEventHandler(async (event) => {
  const client = serverSupabaseServiceRole(event)
  const { period = '30' } = getQuery(event)

  const startDate = new Date()
  startDate.setDate(startDate.getDate() - Number(period))

  const { data, error } = await client.rpc('get_ad_analytics', {
    start_date: startDate.toISOString(),
  })

  if (error) {
    throw createError({
      statusCode: 500,
      message: 'Error fetching analytics overview',
    })
  }

  return { data }
})

================
File: server/api/ads/variants/[id]/metrics.ts
================
// /api/ads/variants/[id]/metrics.ts
import { serverSupabaseServiceRole } from '#supabase/server'

export default defineEventHandler(async (event) => {
  const adId = event.context.params?.id
  const client = serverSupabaseServiceRole(event)

  console.log('Fetching variant metrics for ad:', adId)
  const { data, error } = await client.rpc('get_ad_variant_metrics', {
    ad_uuid: adId,
  })

  console.log('Variant metrics:', data, error)

  if (error) {
    throw createError({
      statusCode: 500,
      message: 'Error fetching variant metrics',
    })
  }

  return { data }
})

================
File: server/api/ads/active.ts
================
// server/api/ads/active.ts

import { serverSupabaseServiceRole } from '#supabase/server'

export default defineEventHandler(async (event) => {
  const client = serverSupabaseServiceRole(event)

  const { data, error } = await client.rpc('get_active_ads')

  if (error) {
    throw createError({
      statusCode: 500,
      message: 'Error fetching active ads',
    })
  }

  return { data }
})

================
File: server/api/ads/contact.ts
================
// server/api/advertising/inquiries.post.ts
import { z } from 'zod'
import { Resend } from 'resend'

const inquirySchema = z.object({
  companyName: z.string().min(1),
  website: z.string().url().optional().nullable(),
  contactName: z.string().min(1),
  email: z.string().email(),
  position: z.string().min(1),
  interestedPackage: z.string().uuid(),
  budget: z.number().optional().nullable(),
  startDate: z.string().optional(),
  objectives: z.array(z.string()),
  targetAudience: z.string().optional(),
  message: z.string().optional(),
})

export default defineEventHandler(async (event) => {
  const env = useRuntimeConfig(event)

  if (!env.resendApiKey) {
    throw new Error('NUXT_RESEND_API_KEY is not set')
  }

  try {
    const resend = new Resend(String(env.resendApiKey))

    const body = await readBody(event)
    const data = inquirySchema.parse(body)

    // Send email notification
    await resend.emails.send({
      from: 'AstronEra Advertising <notifications@astronera.org>',
      to: 'admin@astronera.org',
      subject: `New Advertising Inquiry: ${data.companyName}`,
      html: `
        <h2>New Advertising Inquiry</h2>
        
        <h3>Company Information</h3>
        <p><strong>Company:</strong> ${data.companyName}</p>
        <p><strong>Website:</strong> ${data.website || 'Not provided'}</p>
        
        <h3>Contact Information</h3>
        <p><strong>Name:</strong> ${data.contactName}</p>
        <p><strong>Position:</strong> ${data.position}</p>
        <p><strong>Email:</strong> ${data.email}</p>
        
        <h3>Campaign Details</h3>
        <p><strong>Package Interest:</strong> ${data.interestedPackage}</p>
        <p><strong>Start Date:</strong> ${data.startDate || 'Not specified'}</p>
        <p><strong>Objectives:</strong> ${data.objectives.join(', ') || 'None specified'}</p>
        
        <h3>Additional Information</h3>
        <p><strong>Target Audience:</strong> ${data.targetAudience || 'Not provided'}</p>
        <p><strong>Message:</strong> ${data.message || 'No additional message'}</p>
      `,
    })

    return { success: true }
  } catch (error: any) {
    console.error('Advertising inquiry error:', error)
    throw createError({
      statusCode: 400,
      message: 'Failed to process advertising inquiry',
    })
  }
})

================
File: server/api/ads/packages.ts
================
// server/api/ads/packages.ts
import { serverSupabaseServiceRole } from '#supabase/server'

export default defineEventHandler(async (event) => {
  const client = serverSupabaseServiceRole(event)

  const { data, error } = await client
    .from('ad_packages')
    .select('*')
    .eq('active', true)
    .order('name')

  if (error) {
    throw createError({
      statusCode: 500,
      message: 'Error fetching ad packages',
    })
  }

  return { data }
})

================
File: server/api/ads/track.post.ts
================
// server/api/ads/track.post.ts
import { serverSupabaseServiceRole } from '#supabase/server'

export default defineEventHandler(async (event) => {
  const body = await readBody(event)
  const { variantId, type, engagementTime = null } = body
  const client = serverSupabaseServiceRole(event)

  const today = new Date().toISOString().split('T')[0]

  // Get current metrics for calculating CTR
  const { data: currentMetrics } = await client
    .from('ad_daily_metrics')
    .select('views, clicks')
    .eq('variant_id', variantId)
    .eq('date', today)
    .single()

  // Calculate new CTR
  let newCtr = null
  if (currentMetrics) {
    const totalViews = currentMetrics.views + (type === 'view' ? 1 : 0)
    const totalClicks = currentMetrics.clicks + (type === 'click' ? 1 : 0)
    newCtr = totalViews > 0 ? (totalClicks / totalViews) * 100 : 0
  }

  // Update daily metrics
  const { error: metricsError } = await client.from('ad_daily_metrics').upsert(
    {
      variant_id: variantId,
      date: today,
      [type === 'view' ? 'views' : 'clicks']: 1,
    },
    {
      onConflict: 'variant_id,date',
      count: type === 'view' ? 'views' : 'clicks',
    },
  )

  // Update variant performance metrics
  if (type === 'view' && engagementTime) {
    const { error: variantError } = await client
      .from('ad_variants')
      .update({
        performance_metrics: {
          avgEngagementTime: engagementTime,
          ctr: newCtr,
          // bounceRate will be calculated separately in analytics
        },
      })
      .eq('id', variantId)

    if (variantError) {
      console.error('Error updating variant metrics:', variantError)
    }
  }

  if (metricsError) {
    throw createError({
      statusCode: 500,
      message: 'Error tracking ad metric',
    })
  }

  return { success: true }
})

================
File: types/ads.ts
================
// types/ads.ts
export interface AdVariant {
  id: string
  is_control: boolean
  content: {
    title: string
    description: string
    background_image?: string
    featured_image?: string
    cta_text: string
    cta_url: string
    tagline?: string
  }
  performance_metrics: {
    avgEngagementTime: number | null
    bounceRate: number | null
    ctr: number | null
  }
  active: boolean
}

export interface AdPackage {
  id: string
  position: string
  name: string
  description: string
  price: number
  features: string[]
  expected_ctr: number
  avg_roi: number
  view_frequency: number
  active: boolean
}

export interface Ad {
  id: string
  package_id: string
  company_id: string
  company: {
    name: string
    logo_url: string
  }
  variants: AdVariant[]
  start_date: string
  end_date: string
  active: boolean
}

// Additional type for the UI-enhanced package
export interface FormattedPackage extends AdPackage {
  badge?: string
}

================
File: .nuxtrc
================
typescript.includeWorkspace = true

================
File: nuxt.config.ts
================
import { defineNuxtConfig } from 'nuxt/config'

export default defineNuxtConfig({
  modules: ['@nuxtjs/supabase'],

  components: [
    {
      path: './components',
      pathPrefix: false,
      prefix: 'Ads',
      global: true,
    },
  ],
  srcDir: '.',
  workspaceDir: '../../',
})

================
File: package.json
================
{
  "name": "@astronera/advert",
  "version": "0.0.3",
  "private": true,
  "scripts": {
    "lint": "pnpm nx lint @astronera/advert",
    "test": "pnpm nx test @astronera/advert",
    "dev": "pnpx nuxi dev",
    "build": "pnpx nuxi build",
    "prepare": "pnpx nuxi prepare"
  },
  "dependencies": {
    "@faker-js/faker": "^9.2.0",
    "@formbricks/js": "^3.0.1",
    "@influxdata/influxdb-client": "^1.35.0",
    "@jscpd/core": "^4.0.1",
    "@nuxtjs/mdc": "^0.9.0",
    "@nuxtjs/supabase": "^1.4.0",
    "@sentry/vue": "^8.31.0",
    "@supabase/supabase-js": "^2.47.8",
    "@vueuse/core": "^11.1.0",
    "axios": "^1.7.7",
    "chalk": "^5.3.0",
    "compression": "^1.7.5",
    "dotenv": "^16.4.5",
    "express": "^4.18.2",
    "ofetch": "^1.4.0",
    "pdf-lib": "^1.17.1",
    "pinia": "^2.2.2",
    "posthog-js": "^1.164.3",
    "qs": "^6.13.0",
    "resend": "^4.0.1",
    "rxjs": "^7.8.1",
    "shiki": "^1.22.0",
    "uuid": "^10.0.0",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@nestjs/testing": "^10.0.0",
    "@nuxt/schema": "^3.13.2",
    "@nuxt/test-utils": "^3.14.4",
    "depcheck": "^1.4.7",
    "ejs": "^3.1.10",
    "eslint": "^9.16.0",
    "eslint-config-prettier": "^9.0.0",
    "h3": "^1.8.2",
    "inquirer": "^12.1.0",
    "msw": "^2.6.5",
    "nuxt": "^3.13.2",
    "pluralize": "^8.0.0",
    "tailwindcss": "^3.4.13",
    "vite": "^5.4.11",
    "vite-tsconfig-paths": "^5.0.1",
    "vitest": "^2.1.5",
    "vitest-mock-extended": "^2.0.2",
    "vue": "^3.3.4",
    "vue-router": "^4.2.4"
  }
}

================
File: project.json
================
{
  "name": "@astronera/advert",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "projectType": "library",
  "sourceRoot": "layers/advert",
  "targets": {
    "prepare": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cd layers/advert && pnpx nuxi prepare"
      }
    },
    "build": {
      "executor": "@nx/js:tsc",
      "outputs": ["{options.outputPath}"],
      "dependsOn": ["prepare"],
      "options": {
        "outputPath": "layers/advert/dist",
        "tsConfig": "layers/advert/tsconfig.json",
        "main": "layers/advert/index.ts",
        "assets": [
          {
            "glob": "**/*.{css,scss,html,json,vue}",
            "input": "layers/advert",
            "output": "."
          }
        ]
      }
    },
    "lint": {
      "executor": "@nx/eslint:lint",
      "outputs": ["{options.outputFile}"],
      "options": {
        "lintFilePatterns": ["layers/advert/**/*.{ts,tsx,vue}"]
      }
    },
    "test": {
      "executor": "@nx/vite:test",
      "outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
      "options": {
        "passWithNoTests": true,
        "reportsDirectory": "../../coverage/layers/{projectRoot}"
      }
    }
  },
  "tags": ["type:layer", "scope:shared"]
}

================
File: tsconfig.json
================
{
  "extends": ["../../shared/tsconfig.web.json", "./.nuxt/tsconfig.json"],
  "compilerOptions": {
    "baseUrl": ".",
    "incremental": true,
    "tsBuildInfoFile": "./.nuxt/.tsbuildinfo",
    "noEmit": true,
    "skipLibCheck": true,
    "paths": {
      "#layers/*": ["../../layers/*"]
    },
    // Add module resolution optimization
    "moduleResolution": "bundler",
    "verbatimModuleSyntax": true,
    // Add import optimization
    "importsNotUsedAsValues": "remove",
    "preserveValueImports": false
  },
  // Be explicit about what to include
  "include": [
    "./composables/**/*.ts",
    "./components/**/*.{ts,vue}",
    "./plugins/**/*.ts",
    "./server/**/*.ts",
    "./utils/**/*.ts",
    "./*.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    ".nuxt",
    ".output",
    ".playground",
    "**/*.spec.ts",
    "**/*.test.ts",
    "**/__tests__",
    "**/*.d.ts"
  ]
}
