{{!-- templates/utils/base-types.hbs --}}

/**
 * Base types used across DTOs
 */
export interface BaseDTO {
  toEntity(): Record<string, any>
}

export interface ValidationError {
  property: string
  constraints: Record<string, string>
}

export type ValidationResult<T> = {
  isValid: boolean
  data?: T
  errors?: ValidationError[]
}


/**
 * Common type helpers
 */
export type DeepPartial<T> = {
  [P in keyof T]?: DeepPartial<T[P]>
}

export type DeepRequired<T> = {
  [P in keyof T]-?: DeepRequired<T[P]>
}

export type DateString = string
export type UUIDString = string