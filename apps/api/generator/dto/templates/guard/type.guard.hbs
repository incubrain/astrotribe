import { {{name}}DTO } from './dto/{{lowercase name}}.dto';
import { {{name}}Schema } from './schemas/{{lowercase name}}.schema';

/**
 * Type guard for {{name}}
 */
export function is{{name}}(value: unknown): value is {{name}}DTO {
  return {{name}}Schema.safeParse(value).success;
}

/**
 * Type guard for partial {{name}}
 */
export function isPartial{{name}}(value: unknown): value is Partial<{{name}}DTO> {
  if (typeof value !== 'object' || value === null) return false;
  
  const knownKeys = [{{#each properties}}'{{name}}',{{/each}}];
  return Object.keys(value).every(key => 
    knownKeys.includes(key) && isValidField(key, value[key as keyof typeof value])
  );
}

/**
 * Validates individual fields based on their expected types
 */
function isValidField(key: string, value: unknown): boolean {
  switch (key) {
    {{#each properties}}
    case '{{name}}':
      return {{validationType}};
    {{/each}}
  }
  return false;
}