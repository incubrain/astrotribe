name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  main:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: pnpm ci

      - name: Initialize Nx Cloud
        run: npx nx-cloud start-ci-run
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
          NX_BRANCH: ${{ github.ref_name }}
          NX_CI_EXECUTION_ID: ${{ github.run_id }}

      - name: TypeScript Check
        run: npx nx affected --target=type-check --parallel=3
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

      - name: Lint
        run: npx nx affected --target=lint --parallel=3
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

      - name: Test
        run: npx nx affected --target=test --parallel=3
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Build
        run: npx nx affected --target=build --parallel=3
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

      - name: Stop Nx Cloud agents
        if: always()
        run: npx nx-cloud stop-all-agents
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

  agents:
    runs-on: ubuntu-latest
    name: Nx Cloud - Agents
    timeout-minutes: 60
    strategy:
      matrix:
        agent: [1, 2, 3]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - run: pnpm ci
      - name: Start Nx Agent ${{ matrix.agent }}
        run: npx nx-cloud start-agent
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

  docker:
    needs: main
    if:
      github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref ==
      'refs/heads/develop')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        app: ['api', 'web', 'admin']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          push: false
          tags: ${{ matrix.app }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NX_CLOUD_ACCESS_TOKEN=${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

  pr-feedback:
    needs: docker
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Add Labels
        uses: actions/labeler@v4
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'

      - name: Comment Build Status
        uses: actions/github-script@v6
        with:
          script: |
            const buildStatus = '${{ needs.docker.result }}';
            const testStatus = '${{ needs.main.result }}';

            const summary = `## Build Summary
            - 🧪 Tests: ${testStatus}
            - 🐳 Docker: ${buildStatus}

            [View detailed logs](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: summary
            })

  metrics:
    if: always()
    needs: [main, docker]
    runs-on: ubuntu-latest
    steps:
      - name: Collect Build Metrics
        run: |
          node tools/collect-metrics.js > build-metrics.json

      - name: Upload Metrics
        uses: actions/upload-artifact@v3
        with:
          name: build-metrics
          path: build-metrics.json

      - name: Post to Slack
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "@build-metrics.json" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
