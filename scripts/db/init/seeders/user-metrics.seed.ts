import { faker } from '@faker-js/faker'
import type { Pool } from 'pg'
import { bulkInsert, generateUUID } from '../utils'

export async function seedUserMetrics(pool: Pool, userIds: string[]) {
  const metrics = userIds.map((userId) => ({
    id: generateUUID(),
    user_id: userId,
    total_votes: faker.number.int({ min: 0, max: 1000 }),
    upvote_count: faker.number.int({ min: 0, max: 800 }),
    downvote_count: faker.number.int({ min: 0, max: 200 }),
    vote_accuracy: faker.number.float({ min: 0, max: 100, precision: 2 }),
    current_streak: faker.number.int({ min: 0, max: 30 }),
    best_streak: faker.number.int({ min: 0, max: 100 }),
    today_vote_count: faker.number.int({ min: 0, max: 10 }),
    total_reading_time: faker.number.int({ min: 0, max: 10000 }),
    last_vote_date: faker.date.recent(),
    points: faker.number.int({ min: 0, max: 10000 }),
    points_breakdown: {
      votes: faker.number.int({ min: 0, max: 5000 }),
      streaks: faker.number.int({ min: 0, max: 2000 }),
      bookmarks: faker.number.int({ min: 0, max: 1000 }),
      achievements: faker.number.int({ min: 0, max: 1000 }),
      perfect_days: faker.number.int({ min: 0, max: 500 }),
      source_visits: faker.number.int({ min: 0, max: 500 }),
    },
    interaction_stats: {
      articles_read: faker.number.int({ min: 0, max: 1000 }),
      source_visits: faker.number.int({ min: 0, max: 500 }),
      total_comments: faker.number.int({ min: 0, max: 200 }),
      articles_shared: faker.number.int({ min: 0, max: 100 }),
      comment_upvotes: faker.number.int({ min: 0, max: 50 }),
      total_bookmarks: faker.number.int({ min: 0, max: 200 }),
      favorite_sources: [],
      categories_engaged: [],
      peak_activity_hours: [],
    },
    achievements: {
      time: {
        night_owl: false,
        full_cycle: false,
        dawn_patrol: false,
        lunch_break: false,
        weekend_warrior: false,
      },
      voting: {
        vote_sage: false,
        vote_expert: false,
        vote_legend: false,
        vote_master: false,
        vote_initiate: false,
        vote_enthusiast: false,
      },
      sharing: {
        sharer_i: false,
        sharer_ii: false,
        sharer_iii: false,
        influence_i: false,
        influence_ii: false,
        viral_spreader: false,
      },
      special: {
        beta_tester: false,
        trend_setter: false,
        early_adopter: false,
        daily_complete: false,
        weekly_complete: false,
        prediction_master: false,
      },
      streaks: {
        streak_legend: false,
        streak_runner: false,
        streak_starter: false,
        streak_champion: false,
        streak_sprinter: false,
        streak_marathoner: false,
      },
      accuracy: {
        perfect_day: false,
        perfect_week: false,
        accurate_voter_i: false,
        accurate_voter_ii: false,
        accurate_voter_iii: false,
      },
      beginner: {
        first_vote: false,
        first_share: false,
        first_comment: false,
        first_bookmark: false,
        first_source_visit: false,
      },
      explorer: {
        global_viewer: false,
        source_seeker_i: false,
        source_seeker_ii: false,
        source_seeker_iii: false,
        category_explorer_i: false,
        category_explorer_ii: false,
      },
      bookmarks: {
        curator: false,
        collector_i: false,
        organizer_i: false,
        collector_ii: false,
        organizer_ii: false,
        collector_iii: false,
      },
      engagement: {
        viral_voice: false,
        commentator_i: false,
        commentator_ii: false,
        commentator_iii: false,
        discussion_starter: false,
        conversation_master: false,
      },
    },
    titles: {
      current_title: 'Stargazer',
      title_progress: {},
      unlocked_titles: ['Stargazer'],
    },
    multipliers: {
      streak_bonus: 0,
      accuracy_bonus: 0,
      time_of_day_bonus: 0,
      current_multiplier: 1,
    },
    current_level: faker.number.int({ min: 1, max: 50 }),
    current_xp: faker.number.int({ min: 0, max: 1000 }),
    xp_to_next_level: faker.number.int({ min: 100, max: 1000 }),
    created_at: faker.date.past(),
    updated_at: faker.date.recent(),
  }))

  await bulkInsert(pool, 'user_metrics', metrics)
  return metrics
}
