import { APP_INSTRUCTIONS } from './custom-instructions'
import type { ComponentScanResult, ContextConfig } from './bundler-types'

function generateMainHeaderText(appName: string, componentScan: ComponentScanResult): string {
  const timestamp = new Date().toISOString()
  const sections = [
    `${appName} Application Context`,
    `Generated: ${timestamp}`,
    '',
    '# Project Context',
    '',
    '# Project Overview',
    '',
    'This app is part of a Nuxt 3 monorepo-based project utilizing modern Vue 3 features with TypeScript.',
    'The project uses Supabase as the primary backend solution with PostgreSQL, complemented by Redis for',
    'caching. Analytics and user experience are enhanced through PostHog metrics, Chart.js',
    'visualizations, and GSAP animations.',
    '',
    'Key Technologies:',
    '',
    '- Nuxt 3 (Vue 3 + Composition API)',
    '- TypeScript for type safety',
    '- Supabase for backend (PostgreSQL + Auth)',
    '- Redis for caching',
    '- PrimeVue v4 for UI components',
    '- Tailwind CSS for styling',
    '- Chart.js for data visualization',
    '- GSAP for animations',
    '- VueUse for composables',
    '- PostHog for analytics',
    '- Formbricks for form management',
    '- Pinia for state management',
    '- NX for monorepo management',
    '',
    '',
    '## Nuxt Modules',
    ...componentScan.nuxtConfig.modules.map((module) => `- ${module}`),
    '',
    '## Layers',
    ...componentScan.nuxtConfig.layers.map((layer) => `- ${layer}`),
    '',
    '## Project Structure',
    '```',
    'apps/[app-name]/',
    '├── components/         # Vue components',
    '│   ├── ui/            # Shared UI components',
    '│   └── domain/        # Domain-specific components',
    '├── composables/       # Vue composables',
    '├── layouts/           # Nuxt layouts',
    '├── pages/            # File-based routing',
    '├── server/           # Server routes and middleware',
    '│   ├── api/          # API endpoints',
    '│   └── middleware/   # Server middleware',
    '├── types/            # TypeScript type definitions',
    '├── utils/            # Utility functions',
    '└── plugins/          # Nuxt plugins',
    '```',
    '',
    '## Development Standards',
    '- Use `<script setup lang="ts">` syntax exclusively',
    '- Strongly typed props and emits',
    '- PrimeVue components use Prime prefix',
    '- Tailwind for styling',
    '- Pinia for state management',
    '- Composables for reusable logic',
    '- Error boundaries for error handling',
    '- VueUse for common utilities',
  ]

  return sections.join('\n')
}

export function generateAppContext(
  appName: string,
  componentScan: ComponentScanResult,
): ContextConfig {
  return {
    name: 'app-context',
    description: 'Main application code and configuration',
    include: [
      `apps/${appName}/**/*.{ts,tsx,js,jsx,vue}`,
      `apps/${appName}/**/*.md`,
      'shared-runtime.config.ts',
    ],
    headerText: generateMainHeaderText(appName, componentScan),
    config: {
      removeComments: false,
      removeEmptyLines: false,
      outputStyle: 'xml',
      showTokenCount: true,
      instructions: APP_INSTRUCTIONS,
      showRepoStructure: true,
    },
  }
}
