This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-14T04:19:04.679Z

# File Summary

## Purpose
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

## File Format
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A header with the file path (## File: path/to/file)
  b. The full contents of the file in a code block

## Usage Guidelines
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
- Pay special attention to the Repository Description. These contain important context and guidelines specific to this project.

## Notes
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

- Line numbers have been added to the beginning of each line.

## Additional Info
### User Provided Header
Admin Dashboard application context including shared libraries and layers

For more information about Repomix, visit: https://github.com/yamadashy/repomix

# Repository Structure
```
apps/
  admin-dashboard/
    components/
      chart/
        Chart.vue
      chat/
        MessageBar.vue
        SearchResponse.vue
      financial/
        Analytics.vue
        Charts.vue
        Data.vue
        DevOps.vue
        Employees.vue
        Logging.vue
        OpenAI.vue
        Operations.vue
        Payments.vue
        Storage.vue
        Totals.vue
      social/
        Instagram.vue
        Linkedin.vue
        Overview.vue
        Twitter.vue
        Youtube.vue
      tasks/
        TasksCalendar.vue
        TasksForm.vue
        TasksMilestones.vue
        TasksTimeTracker.vue
        TasksUpcoming.vue
      AdminTools.vue
      BusinessPlan.client.vue
      BusinessSystems.vue
      DatabaseMetrics.vue
      ErrorLogViewer.vue
      FileViewer.vue
      GrowthMetrics.vue
      MetricCard.vue
      RedisManagement.vue
      ScriptExecution.vue
      ServerErrors.vue
      ServerJobs.vue
      SpiderAnalytics.vue
      TableGrowth.vue
      Upload.vue
      UserProfiles.vue
    composables/
      createAdminDashboard.ts
      crud-factory.ts
      useFinancials.ts
      useServerAnalytics.client.ts
      useTasks.ts
    content/
      bp/
        1.summary.md
        10.appendix.md
        12.todo.md
        2.company-description.md
        3.market-analysis.md
        4.products.md
        5.marketing.md
        6.management-operations.md
        7.financials.md
        8.risk-analysis.md
        9.roadmap.md
        appendix-data-sources.md
        appendix-financials.md
        appendix-funding.md
        appendix-hires.md
        appendix-legal.md
        appendix-market.md
        appendix-supporting-docs.md
        company-details.md
        company-model.md
        company-objectives.md
        costs.md
        executive-summary.md
        financials-break-even.md
        financials-cashflow.md
        financials-expenses.md
        financials-funding-request.md
        financials-profit-loss.md
        financials-projections.md
        management-customer-support.md
        management-executives.md
        market-competitors.md
        market-opportunities.md
        market-research.md
        market-size.md
        market-swot.md
        market-trends.md
        marketing-collaborations.md
        marketing-customer-aquisition.md
        marketing-funnel.md
        marketing-objectives.md
        marketing-plan.md
        operations-automation.md
        operations-growth-1.md
        operations-growth-2.md
        operations-growth-3.md
        operations-growth-extra.md
        operations-tech.md
        operations-workflow.md
        products-companies.md
        products-courses.md
        products-jobs.md
        products-misc.md
        products-news.md
        products-personalization.md
        products-research.md
        products-search.md
        products-social.md
        products-subscription.md
        products-summaries.md
        products-why-us.md
        risk-customer.md
        risk-financial.md
        risk-market.md
        risk-operational.md
        risk-regulatory.md
        risk-technical.md
        summary-financials.md
        summary-market.md
        summary-milestones.md
        summary-problem-solution.md
        summary-products.md
        summary-usp.md
        summary-vision.md
    financials/
      analytics.ts
      capital.ts
      customers.ts
      dev-ops.ts
      digital-ocean.ts
      employee.ts
      gen-info.ts
      gpt.ts
      helpers.ts
      logging.ts
      marketing.ts
      metrics-users.ts
      metrics.ts
      office.ts
      payments.ts
      software.ts
      storage.ts
      totals.ts
    layouts/
      default.vue
    middleware/
      auth.global.ts
      is-admin.ts
    pages/
      business-systems/
        index.vue
      analytics.vue
      business-plan.vue
      classifier.vue
      errors.vue
      financials.vue
      growth.vue
      index.vue
      redis.vue
      socials.vue
      spider.vue
      timeline.vue
      upload.vue
      users.vue
    plugins/
      dev-helper.ts
    server/
      api/
        classifier/
          [action].ts
        create/
          many-public-users.post.ts
          roles.post.ts
        error/
          [type].ts
        social/
          instagram/
            analytics.ts
          linkedin/
            analytics.ts
          twitter/
            analytics.ts
          youtube/
            analytics.ts
            channel-videos.ts
        update/
          user-profile.post.ts
        users/
          bulk-upload.ts
          update.ts
        _ws.ts
        cron-jobs.post.ts
        execute-script.ts
        goals.ts
        healthy.ts
        milestones.ts
        server-jobs.ts
        store-image.ts
      utils/
        socials/
          getYoutubeContent.ts
          useInstagramAnalytics.ts
          useLinkedinAnalytics.ts
          useTwitterAnalytics.ts
    app.vue
    nuxt.config.ts
    tailwind.config.ts
layers/
  advert/
    .playground/
      app.config.ts
      nuxt.config.ts
    components/
      Advertisement.vue
    plugins/
      error-handler.ts
      sentry.server.ts
    server/
      api/
        advertisement/
          metrics.get.ts
          metrics.post.ts
    nuxt.config.ts
  auth/
    .playground/
      app.config.ts
      nuxt.config.ts
    composables/
      user.current.store.ts
    server/
      middleware/
        cors.ts
    nuxt.config.ts
  base/
    .playground/
      app.config.ts
      nuxt.config.ts
    components/
      image/
        ImageHero.vue
        ImageWithFallback.vue
      Background.vue
      Breadcrumbs.vue
      Glass.vue
      GlobalTimer.vue
      Grid.vue
      HelloWorld.vue
      HoverCard.vue
      Image.vue
      InfiniteScroll.vue
      Loader.vue
      Modal.vue
      NavHamburger.vue
      NewLabel.vue
      Pagination.vue
      Popover.vue
      Resizable.vue
      Sidebar.vue
      SideNav.vue
      SocialBlock.vue
      TabView.vue
      YT.client.vue
    composables/
      utils/
        arrays.ts
        hasValueChanged.ts
        objects.ts
        strings.ts
        time.ts
      ab-test.ts
      analytics.ts
      glass-card.ts
      metrics.ts
      modal.ts
      notification.ts
      settings.store.ts
      social.store.ts
      useMediaQuery.ts
      useNavigation.ts
      utils.ts
    plugins/
      error-handler.ts
      posthog.client.ts
      sentry.client.ts
    types/
      content.ts
      database.ts
      index.ts
      users.ts
    nuxt.config.ts
    supabase-provider.ts
  crud/
    .playground/
      app.config.ts
      nuxt.config.ts
    components/
      Feedback.vue
      Upload.vue
    composables/
      audit.ts
      delete.ts
      fetch.ts
      http-handler.ts
      insert.ts
      loading.store.ts
      local-storage.ts
      main.store.ts
      notification.ts
      pagination.store.ts
      rate-limit.ts
      select.ts
      settings.store.ts
      update.ts
      upload.ts
      useApiDataStore.ts
      useBaseError.ts
      user.current.store.ts
    server/
      utils/
        base.interface.ts
    nuxt.config.ts
libs/
  logger/
    src/
      environment.d.ts
      environment.ts
      error-interface.ts
      handler.ts
      logger.ts
    index.d.ts
    index.ts
shared-runtime.config.ts
```

# Repository Files

## File: apps/admin-dashboard/components/chart/Chart.vue
```vue
  1: <script setup lang="ts">
  2: import type { ChartOptions, TooltipItem, LegendOptions, Plugin } from 'chart.js'
  3: 
  4: const componentId = useId()
  5: 
  6: const { formatCurrency, formatStorage, formatNumber } = useFinancials()
  7: 
  8: const isFullScreen = ref(false)
  9: 
 10: type DataType = 'currency' | 'storage' | 'number' | 'months' | 'percentage' | 'users' | 'employees'
 11: type AxisType = 'y-2'
 12: type AxisPosiion = 'top' | 'right' | 'bottom' | 'left'
 13: type ScaleType = 'logarithmic' | 'linear'
 14: 
 15: type ChartType = 'line' | 'bar' | 'doughnut' | 'pie' | 'polarArea' | 'bubble' | 'scatter' | 'radar'
 16: 
 17: interface Dataset {
 18:   label: string
 19:   data: number[]
 20:   backgroundColor: string
 21:   borderColor?: string
 22:   valueType: DataType
 23:   type?: ChartType
 24: }
 25: 
 26: interface ChartProps {
 27:   id: number
 28:   scaleType: 'logarithmic' | 'linear'
 29:   title: string
 30:   subtitle: string
 31:   type: ChartType
 32:   data: {
 33:     labels: string[]
 34:     datasets: Array<{
 35:       label: string
 36:       data: number[]
 37:       backgroundColor: string
 38:       valueType: string
 39:       type?: ChartType
 40:       yAxisID?: string
 41:     }>
 42:   }
 43:   info?: Array<{ name: string, value: string }>
 44: }
 45: 
 46: const props = defineProps<{
 47:   chart: ChartProps
 48: }>()
 49: 
 50: const preformattedCharts = computed(() => {
 51:   if (!isChartDataReady.value) return null
 52: 
 53:   return {
 54:     ...props.chart,
 55:     data: {
 56:       ...props.chart.data,
 57:       datasets: props.chart.data.datasets?.map((dataset: Dataset) => {
 58:         const yAxisID = dataset.type ? 'y-2' : 'y'
 59:         return {
 60:           yAxisID,
 61:           ...dataset,
 62:         }
 63:       }),
 64:     },
 65:   }
 66: })
 67: 
 68: const customPaddingPlugin: Plugin = {
 69:   id: 'customPaddingPlugin',
 70:   beforeInit: (chart: any) => {
 71:     const originalFit = chart.legend.fit
 72:     chart.legend.fit = function fit() {
 73:       // Call the original function and bind scope in order to use `this` correctly inside it
 74:       originalFit.bind(chart.legend)()
 75:       // Change the height as suggested in other answers
 76:       this.height += 20
 77:     }
 78:   },
 79: }
 80: 
 81: function getFirstNumber(...values: any[]): number {
 82:   for (const value of values) {
 83:     if (typeof value === 'number' && !isNaN(value)) {
 84:       return value
 85:     }
 86:   }
 87:   return 0
 88: }
 89: 
 90: const chartOptions = computed((): ChartOptions<ChartType> => {
 91:   if (!isChartDataReady.value) return {}
 92: 
 93:   const isPieChart = props.chart.type === 'pie' || props.chart.type === 'doughnut'
 94: 
 95:   return {
 96:     indexAxis: props.chart.horizontal ? 'y' : 'x', // Apply horizontal layout if specified
 97:     maintainAspectRatio: false,
 98:     responsive: true,
 99:     plugins: {
100:       tooltip: {
101:         mode: 'index',
102:         intersect: false,
103:         padding: 10,
104:         callbacks: {
105:           label: formatTooltipLabel,
106:           labelColor: (context: any) => {
107:             return {
108:               borderColor: 'black',
109:               backgroundColor: context.dataset.backgroundColor,
110:               borderWidth: 2,
111:               borderRadius: 2,
112:             }
113:           },
114:         },
115:       },
116:       legend: generateLegend,
117:       datalabels: false,
118:     },
119:     scales: generateScales(
120:       preformattedCharts.value.data.datasets,
121:       props.chart.scaleType,
122:       isPieChart || props.chart.hideAxes,
123:     ),
124:     animations: {
125:       y: {
126:         easing: 'easeInOutElastic',
127:         from: (ctx: any) => {
128:           if (ctx.type === 'data') {
129:             if (ctx.mode === 'default' && !ctx.dropped) {
130:               ctx.dropped = true
131:               return 0
132:             }
133:           }
134:         },
135:       },
136:     },
137:   }
138: })
139: 
140: const generateLegend = (): Partial<LegendOptions<ChartType>> => {
141:   return {
142:     labels: {
143:       color: '#fff',
144:       usePointStyle: false,
145:       pointStyle: 'rectRounded',
146:       pointStyleWidth: 10,
147:       boxWidth: 10,
148:       boxHeight: 10,
149:       boxPadding: 20,
150:       borderRadius: 100,
151:       font: {
152:         size: 14,
153:         weight: 'bold',
154:       },
155:     },
156:     position: 'top',
157:     align: 'center',
158:   }
159: }
160: 
161: const gridColor = 'rgba(255, 255, 255, 0.1)'
162: function generateScales(
163:   datasets: Dataset[],
164:   scaleType: ScaleType = 'linear',
165:   hideAxes: boolean,
166: ): Record<string, any> {
167:   if (hideAxes) {
168:     return {
169:       x: { display: false },
170:       y: { display: false },
171:     }
172:   }
173: 
174:   const scales: Record<string, any> = {
175:     x: {
176:       ticks: { color: '#fff' },
177:       grid: {
178:         color: gridColor,
179:       },
180:     },
181:   }
182: 
183:   if (!datasets) return scales
184: 
185:   datasets?.forEach((dataset: Dataset) => {
186:     const axisId = dataset.yAxisID
187: 
188:     switch (axisId) {
189:       case 'y-2':
190:         scales[axisId] = {
191:           display: true,
192:           type: 'linear',
193:           position: 'right',
194:           title: {
195:             display: true,
196:             text: formatTitle(dataset.valueType),
197:           },
198:           ticks: {
199:             callback: dataFormatters[dataset.valueType],
200:             color: '#fff',
201:           },
202:           grid: {
203:             drawOnChartArea: false, // only want the grid lines for one axis to show up
204:             color: gridColor,
205:           },
206:         }
207:         break
208:       default:
209:         scales.y = {
210:           display: true,
211:           type: scaleType,
212:           title: {
213:             display: true,
214:             text: formatTitle(dataset.valueType),
215:           },
216:           ticks: {
217:             callback: dataFormatters[dataset.valueType],
218:             color: '#fff',
219:           },
220:           grid: {
221:             color: gridColor,
222:           },
223:         }
224:     }
225:   })
226: 
227:   return scales
228: }
229: 
230: function formatTitle(dataType: DataType) {
231:   switch (dataType) {
232:     case 'currency':
233:       return 'INR'
234:     case 'storage':
235:       return 'GB'
236:     case 'number':
237:       return 'Number'
238:     case 'months':
239:       return 'Months'
240:     case 'percentage':
241:       return 'Percent'
242:     case 'users':
243:       return 'Users'
244:     case 'employees':
245:       return 'Employees'
246:     default:
247:       return ''
248:   }
249: }
250: 
251: function formatTooltipLabel(tooltipItem: TooltipItem<'line'>) {
252:   const dataset = props.chart.data.datasets[tooltipItem.datasetIndex] as Dataset
253:   const value = tooltipItem.raw as number
254:   const formattedValue = dataFormatters[dataset.valueType](value)
255:   return `${dataset.label}: ${formattedValue}`
256: }
257: 
258: const isChartDataReady = computed(() => {
259:   return (
260:     props.chart
261:     && props.chart.data
262:     && props.chart.data.datasets
263:     && props.chart.data.datasets.length > 0
264:     && props.chart.data.labels
265:     && props.chart.data.labels.length > 0
266:   )
267: })
268: 
269: const dataFormatters = {
270:   currency: (value: number) => formatCurrency(value, 'INR'), // Example default, can be dynamic
271:   storage: (value: number) => formatStorage(value),
272:   number: (value: number) => formatNumber(value, 'INR'),
273:   users: (value: number) => formatNumber(value, 'USD'),
274:   employees: (value: number) => formatNumber(value, 'USD'),
275:   months: (value: number) => {
276:     return `M${Math.round(value)}`
277:   },
278:   percentage: (value: number) => {
279:     if (Math.abs(value) < 1 && value !== 0) {
280:       return `${value.toFixed(2)}%` // For small non-zero decimals, show two decimal places
281:     }
282:     return `${value.toFixed(2)}%` // Round to whole numbers for clarity
283:   },
284: } as const
285: </script>
286: 
287: <template>
288:   <div
289:     v-if="isChartDataReady"
290:     class="relative flex w-full flex-col gap-4"
291:   >
292:     <PrimeDrawer
293:       v-model:visible="isFullScreen"
294:       position="full"
295:       :pt="{ content: 'bg-black w-full flex justify-center items-center' }"
296:     >
297:       <template #header>
298:         <div class="flex flex-col gap-3">
299:           <h2 class="text-xl font-bold">
300:             {{ chart.title }}
301:           </h2>
302:           <p class="text-sm">
303:             {{ chart.subtitle }}
304:           </p>
305:         </div>
306:       </template>
307:       <div
308:         v-if="chart.info"
309:         class="border-color w-full max-w-xs rounded-lg border p-4"
310:       >
311:         <ul class="pt-4">
312:           <li
313:             v-for="info in chart.info"
314:             :key="info.name"
315:             class="w-full py-1 text-sm"
316:           >
317:             <strong class="text-primary-950">{{ info.name }}: </strong> {{ info.value }}
318:           </li>
319:         </ul>
320:       </div>
321:       <PrimeChart
322:         :id="`chart-${componentId}-fullscreen`"
323:         class="mx-auto h-full max-h-[80vh] w-full max-w-[78vw] flex-grow pt-4"
324:         :type="chart.type"
325:         :data="preformattedCharts.data"
326:         :options="chartOptions"
327:       />
328:     </PrimeDrawer>
329:     <PrimeChart
330:       :id="`chart-${componentId}`"
331:       class="flex max-h-[600px] min-h-96 min-w-full items-center justify-center"
332:       :type="chart.type"
333:       :data="preformattedCharts.data"
334:       :plugins="[customPaddingPlugin]"
335:       :options="chartOptions"
336:     />
337:     <div class="border-color flex w-full gap-2 rounded-lg border px-3 py-2">
338:       <button
339:         class="border-color flex gap-2 border-r pr-2"
340:         @click="isFullScreen = true"
341:       >
342:         fullscreen
343:         <Icon
344:           class="h-6 w-6"
345:           name="mdi:fullscreen"
346:         />
347:       </button>
348:     </div>
349:   </div>
350: </template>
351: 
352: <style></style>
```

## File: apps/admin-dashboard/components/chat/MessageBar.vue
```vue
 1: <script setup lang="ts">
 2: const message = ref('')
 3: const messageInput = ref<Ref | null>(null)
 4: 
 5: const chunksStore = useChunksStore()
 6: 
 7: const handleKeyUp = (event: KeyboardEvent) => {
 8:   if (event.key === 'Enter' && !event.shiftKey) {
 9:     sendMessage()
10:   }
11: }
12: 
13: type SearchType = 'fts' | 'vector'
14: const textSearchType = ref('fts' as SearchType)
15: 
16: const toggleTextSearchType = () => {
17:   if (textSearchType.value === 'fts') {
18:     textSearchType.value = 'vector'
19:   } else {
20:     textSearchType.value = 'fts'
21:   }
22: }
23: 
24: const sendMessage = () => {
25:   if (message.value.trim()) {
26:     console.log('Sending message:', message.value)
27:     chunksStore.fetchSimilarDocuments({ search: message.value, searchType: textSearchType.value })
28:     message.value = ''
29:   }
30: }
31: </script>
32: 
33: <template>
34:   <div class="mx-auto flex w-full max-w-3xl items-center">
35:     <div
36:       class="foreground border-color flex w-full items-center rounded-full border px-2 py-1 pr-2"
37:     >
38:       <PrimeButton
39:         rounded
40:         :pt="{ root: 'p-5 flex justify-center items-center relative' }"
41:         severity="secondary"
42:         @click="toggleTextSearchType"
43:       >
44:         <Icon
45:           :name="textSearchType === 'fts' ? 'mdi:card-text-outline' : 'mdi:format-list-numbered'"
46:           class="absolute"
47:           size="24px"
48:         />
49:       </PrimeButton>
50:       <PrimeTextarea
51:         ref="messageInput"
52:         v-model="message"
53:         auto-resize
54:         placeholder="Ask Your Question..."
55:         class="flex max-h-[120px] w-full items-center justify-center bg-transparent px-4 py-2 outline-none"
56:         :pt="{ root: 'border-none' }"
57:         @keyup.enter="handleKeyUp"
58:       />
59:       <PrimeButton
60:         rounded
61:         :pt="{ root: 'p-5 flex justify-center items-center relative' }"
62:         severity="secondary"
63:       >
64:         <Icon
65:           name="mdi:send"
66:           class="absolute text-white"
67:           size="24px"
68:         />
69:       </PrimeButton>
70:     </div>
71:   </div>
72: </template>
73: 
74: <style scoped>
75: .p-inputtextarea {
76:   overflow: scroll !important;
77: }
78: </style>
```

## File: apps/admin-dashboard/components/chat/SearchResponse.vue
```vue
 1: <script setup lang="ts">
 2: import { useChangeCase } from '@vueuse/integrations/useChangeCase'
 3: import katex from 'katex'
 4: 
 5: const renderLatex = (text: string) => {
 6:   return text.replace(/(\$.*?\$)/g, (match) => {
 7:     try {
 8:       return katex.renderToString(match.replace(/\$/g, ''), {
 9:         throwOnError: true,
10:       })
11:     } catch (error) {
12:       console.error('Error rendering LaTeX:', error)
13:       return `failed(${match})`
14:     }
15:   })
16: }
17: 
18: const chunksStore = useChunksStore()
19: const { similarChunks } = storeToRefs(chunksStore)
20: </script>
21: 
22: <template>
23:   <div
24:     class="padded-x border-color mx-auto grid h-full max-h-[65vh] w-full flex-grow grid-cols-1 gap-4 overflow-y-scroll rounded-md border p-4 md:grid-cols-2 lg:gap-8 lg:p-8 xl:grid-cols-3"
25:   >
26:     <div
27:       v-for="doc in similarChunks"
28:       :key="doc.id"
29:       class="border-color background h-full max-h-[600px] min-h-[600px] space-y-4 overflow-scroll text-wrap rounded-lg border p-4"
30:     >
31:       <h4 class="text-xl font-semibold">
32:         {{ useChangeCase(doc.title, 'capitalCase').value }}
33:       </h4>
34:       <div v-html="renderLatex(doc.abstract)"></div>
35:     </div>
36:   </div>
37: </template>
38: 
39: <style>
40: .katex .katex-html {
41:   display: none;
42: }
43: </style>
```

## File: apps/admin-dashboard/components/financial/Analytics.vue
```vue
  1: <script setup lang="ts">
  2: const { months, analytics, rgba } = useFinancials()
  3: 
  4: console.log('dataAnalytics', analytics.value, months.value)
  5: 
  6: const charts = computed(() => {
  7:   if (!months.value || !analytics.value) {
  8:     return []
  9:   }
 10: 
 11:   return [
 12:     {
 13:       title: 'Analytics Costs Breakdown',
 14:       subtitle: 'Shows the breakdown of analytics costs for the selected timeperiod.',
 15:       type: 'bar',
 16:       data: {
 17:         labels: [
 18:           'Events Cost',
 19:           'Recordings Cost',
 20:           'Feature Requests Cost',
 21:           'Survey Responses Cost',
 22:         ],
 23:         datasets: [
 24:           {
 25:             label: 'Total Analytics Costs',
 26:             valueType: 'currency',
 27:             data: [
 28:               analytics.value.flatMap((month) => month.events.cost).reduce((a, b) => a + b, 0),
 29:               analytics.value.flatMap((month) => month.recordings.cost).reduce((a, b) => a + b, 0),
 30:               analytics.value
 31:                 .flatMap((month) => month.featureRequests.cost)
 32:                 .reduce((a, b) => a + b, 0),
 33:               analytics.value
 34:                 .flatMap((month) => month.surveyResponses.cost)
 35:                 .reduce((a, b) => a + b, 0),
 36:             ],
 37:             backgroundColor: [
 38:               rgba('lightGreen', 0.5),
 39:               rgba('darkBlue', 0.5),
 40:               rgba('darkBlue', 0.5),
 41:               rgba('darkBlue', 0.5),
 42:             ],
 43:           },
 44:         ],
 45:       },
 46:     },
 47:     {
 48:       title: 'Total Analytics Cost and Breakdown',
 49:       subtitle: 'Shows the total analytics cost and its breakdown over time.',
 50:       type: 'line',
 51:       data: {
 52:         labels: months.value,
 53:         datasets: [
 54:           {
 55:             label: 'Events Cost',
 56:             valueType: 'currency',
 57:             data: analytics.value.flatMap((month) => month.events.cost),
 58:             backgroundColor: rgba('black', 1),
 59:             borderColor: rgba('lightBlue', 0.5),
 60:           },
 61:           {
 62:             label: 'Recordings Cost',
 63:             valueType: 'currency',
 64:             data: analytics.value.flatMap((month) => month.recordings.cost),
 65:             backgroundColor: rgba('black', 1),
 66:             borderColor: rgba('darkRed', 0.5),
 67:           },
 68:           {
 69:             label: 'Feature Requests Cost',
 70:             valueType: 'currency',
 71:             data: analytics.value.flatMap((month) => month.featureRequests.cost),
 72:             backgroundColor: rgba('black', 1),
 73:             borderColor: rgba('lightGreen', 0.5),
 74:           },
 75:           {
 76:             label: 'Survey Responses Cost',
 77:             valueType: 'currency',
 78:             data: analytics.value.flatMap((month) => month.surveyResponses.cost),
 79:             backgroundColor: rgba('black', 1),
 80:             borderColor: rgba('lightRed', 0.5),
 81:           },
 82:           {
 83:             label: 'Total Cost',
 84:             valueType: 'currency',
 85:             type: 'bar',
 86:             data: analytics.value.flatMap((month) => month.total),
 87:             backgroundColor: rgba('darkBlue', 0.5),
 88:           },
 89:         ],
 90:       },
 91:     },
 92:     {
 93:       title: 'Usage Metrics Over Time',
 94:       subtitle:
 95:         'Tracks the usage metrics for events, recordings, feature requests, and survey responses over time.',
 96:       type: 'line',
 97:       data: {
 98:         labels: months.value,
 99:         datasets: [
100:           {
101:             label: 'Events Usage',
102:             valueType: 'number',
103:             data: analytics.value.flatMap((month) => month.events.usage),
104:             borderColor: rgba('lightBlue', 0.5),
105:             backgroundColor: rgba('lightBlue', 0.2),
106:           },
107:           {
108:             label: 'Recordings Usage',
109:             valueType: 'number',
110:             data: analytics.value.flatMap((month) => month.recordings.usage),
111:             borderColor: rgba('darkRed', 0.5),
112:             backgroundColor: rgba('darkRed', 0.2),
113:           },
114:           {
115:             label: 'Feature Requests Usage',
116:             valueType: 'number',
117:             data: analytics.value.flatMap((month) => month.featureRequests.usage),
118:             borderColor: rgba('lightGreen', 0.5),
119:             backgroundColor: rgba('lightGreen', 0.2),
120:           },
121:           {
122:             label: 'Survey Responses Usage',
123:             valueType: 'number',
124:             data: analytics.value.flatMap((month) => month.surveyResponses.usage),
125:             borderColor: rgba('lightRed', 0.5),
126:             backgroundColor: rgba('lightRed', 0.2),
127:           },
128:         ],
129:       },
130:     },
131:     {
132:       title: 'Cost Efficiency Over Time',
133:       subtitle: 'Shows the cost efficiency by comparing costs to usage over time.',
134:       type: 'line',
135:       data: {
136:         labels: months.value,
137:         datasets: [
138:           {
139:             label: 'Events Cost Efficiency',
140:             valueType: 'currency',
141:             data: analytics.value.flatMap((month) => month.events.cost / month.events.usage),
142:             borderColor: rgba('lightBlue', 0.5),
143:             backgroundColor: rgba('lightBlue', 0.2),
144:           },
145:           {
146:             label: 'Recordings Cost Efficiency',
147:             valueType: 'currency',
148:             data: analytics.value.flatMap(
149:               (month) => month.recordings.cost / month.recordings.usage,
150:             ),
151:             borderColor: rgba('darkRed', 0.5),
152:             backgroundColor: rgba('darkRed', 0.2),
153:           },
154:           {
155:             label: 'Feature Requests Cost Efficiency',
156:             valueType: 'currency',
157:             data: analytics.value.flatMap(
158:               (month) => month.featureRequests.cost / month.featureRequests.usage,
159:             ),
160:             borderColor: rgba('lightGreen', 0.5),
161:             backgroundColor: rgba('lightGreen', 0.2),
162:           },
163:           {
164:             label: 'Survey Responses Cost Efficiency',
165:             valueType: 'currency',
166:             data: analytics.value.flatMap(
167:               (month) => month.surveyResponses.cost / month.surveyResponses.usage,
168:             ),
169:             borderColor: rgba('lightRed', 0.5),
170:             backgroundColor: rgba('lightRed', 0.2),
171:           },
172:         ],
173:       },
174:     },
175:   ]
176: })
177: </script>
178: 
179: <template>
180:   <FinancialCharts :charts="charts" />
181: </template>
182: 
183: <style scoped></style>
```

## File: apps/admin-dashboard/components/financial/Charts.vue
```vue
 1: <script setup lang="ts">
 2: defineProps<{
 3:   charts: Chart
 4: }>()
 5: </script>
 6: 
 7: <template>
 8:   <div class="grid h-full w-full grid-cols-1 gap-4 xl:gap-12">
 9:     <div
10:       v-for="(chart, index) in charts"
11:       :key="`financial-chart-${index}`"
12:       class="flex flex-col gap-4 lg:flex-row xl:gap-12"
13:     >
14:       <div
15:         class="border-color w-full min-w-[260px] space-y-4 rounded-lg border p-4 lg:max-w-[360px]"
16:       >
17:         <h3 class="text-2xl font-semibold text-primary-600">
18:           {{ chart.title }}
19:         </h3>
20:         <p class="text-lg">
21:           {{ chart.subtitle }}
22:         </p>
23:       </div>
24:       <LazyChart
25:         class="flex h-full w-full items-center justify-center py-8"
26:         :chart="chart"
27:       />
28:     </div>
29:   </div>
30: </template>
31: 
32: <style scoped></style>
```

## File: apps/admin-dashboard/components/financial/Data.vue
```vue
  1: <script setup lang="ts">
  2: const {
  3:   advertising,
  4:   analytics,
  5:   capital,
  6:   employees,
  7:   logging,
  8:   metrics,
  9:   openAI,
 10:   payments,
 11:   storage,
 12:   customers,
 13:   totals,
 14:   rgba,
 15:   formatNumber,
 16: } = useFinancials()
 17: 
 18: const allDatasets = [
 19:   { name: 'Customers', data: customers.value },
 20:   { name: 'Metrics', data: metrics.value },
 21:   { name: 'Storage', data: storage.value },
 22:   { name: 'OpenAI', data: openAI.value },
 23:   { name: 'Analytics', data: analytics.value },
 24:   { name: 'Employees', data: employees.value },
 25:   { name: 'Capital', data: capital.value },
 26:   { name: 'Advertising', data: advertising.value },
 27:   { name: 'Logging', data: logging.value },
 28:   { name: 'Payments', data: payments.value },
 29:   { name: 'Totals', data: totals.value },
 30: ]
 31: 
 32: function getType(value: any): string {
 33:   return Object.prototype.toString.call(value).slice(8, -1)
 34: }
 35: 
 36: function traverseObject(
 37:   obj: any,
 38: ): Record<string, Array<{ path: string, value: any, type: string }>> {
 39:   const result: Record<string, Array<{ path: string, value: any, type: string }>> = {}
 40:   for (const key in obj) {
 41:     if (Object.prototype.hasOwnProperty.call(obj, key)) {
 42:       const value = obj[key]
 43:       if (
 44:         Array.isArray(value)
 45:         && value.length > 0
 46:         && typeof value[0] === 'object'
 47:         && value[0] !== null
 48:       ) {
 49:         const childResults = traverseNestedObject(value[0], key)
 50:         result[key] = childResults
 51:       } else if (typeof value === 'object' && value !== null) {
 52:         const childResults = traverseNestedObject(value, key)
 53:         result[key] = childResults
 54:       } else {
 55:         if (!result['Root']) {
 56:           result['Root'] = []
 57:         }
 58:         result['Root'].push({
 59:           path: key,
 60:           value: value,
 61:           type: getType(value),
 62:         })
 63:       }
 64:     }
 65:   }
 66:   return result
 67: }
 68: 
 69: function traverseNestedObject(
 70:   obj: any,
 71:   parentKey: string,
 72: ): Array<{ path: string, value: any, type: string }> {
 73:   let result: Array<{ path: string, value: any, type: string }> = []
 74:   for (const key in obj) {
 75:     if (Object.prototype.hasOwnProperty.call(obj, key)) {
 76:       const newPath = `${parentKey}.${key}`
 77:       const value = obj[key]
 78:       if (
 79:         Array.isArray(value)
 80:         && value.length > 0
 81:         && typeof value[0] === 'object'
 82:         && value[0] !== null
 83:       ) {
 84:         result = result.concat(traverseNestedObject(value[0], newPath))
 85:       } else if (typeof value === 'object' && value !== null) {
 86:         result = result.concat(traverseNestedObject(value, newPath))
 87:       } else {
 88:         result.push({
 89:           path: newPath,
 90:           value: value,
 91:           type: getType(value),
 92:         })
 93:       }
 94:     }
 95:   }
 96:   return result
 97: }
 98: 
 99: const columnsCount = 3
100: const columns = computed(() => {
101:   const result = Array.from({ length: columnsCount }, () => [])
102:   allDatasets.forEach((dataset, index) => {
103:     result[index % columnsCount].push(dataset)
104:   })
105:   return result
106: })
107: 
108: function copyToClipboard(text: string) {
109:   navigator.clipboard.writeText(text).then(
110:     () => {
111:       console.log(`Copied to clipboard: ${text}`)
112:     },
113:     (err) => {
114:       console.error('Could not copy text: ', err)
115:     },
116:   )
117: }
118: </script>
119: 
120: <template>
121:   <div class="grid grid-cols-1 gap-2 p-4 md:grid-cols-2 md:gap-4 xl:grid-cols-3 xl:p-8">
122:     <PrimeAccordion
123:       v-for="(column, columnIndex) in columns"
124:       :key="`masonry-column-${columnIndex}`"
125:       class="space-y-4"
126:       :value="['0']"
127:       multiple
128:     >
129:       <PrimeAccordionPanel
130:         v-for="(dataset, index) in column"
131:         :key="`metrics-dataset-${columnIndex}-${index}`"
132:         class="border-color rounded-lg border p-4"
133:         :value="`${index}`"
134:       >
135:         <PrimeAccordionHeader>
136:           <h2 class="text-2xl font-bold text-primary-600">
137:             {{ dataset.name }}
138:           </h2>
139:         </PrimeAccordionHeader>
140:         <PrimeAccordionContent v-if="!!dataset.data">
141:           <div
142:             v-for="(group, parent) in traverseObject(dataset.data[0])"
143:             :key="`group-${dataset.name}-${parent}`"
144:             class="border-color border-b pb-4 pt-2 last:border-b-0 last:pb-0"
145:           >
146:             <p class="text-xl font-semibold text-primary-600">
147:               {{ parent || 'Total' }}
148:             </p>
149:             <div
150:               v-for="(entry, idx) in group"
151:               :key="`entry-${dataset.name}-${idx}`"
152:               class="flex items-center justify-between"
153:             >
154:               <span class="text-sm">
155:                 <strong class="font-semibold">
156:                   {{ entry.path.replace(`${entry.path.split('.')[0]}.`, '') }} -
157:                 </strong>
158:                 {{ entry.type }} | {{ formatNumber(entry.value) }}
159:               </span>
160:               <button
161:                 class=""
162:                 @click="copyToClipboard(entry.path)"
163:               >
164:                 <Icon
165:                   name="mdi:content-copy"
166:                   size="24px"
167:                 />
168:               </button>
169:             </div>
170:           </div>
171:         </PrimeAccordionContent>
172:       </PrimeAccordionPanel>
173:     </PrimeAccordion>
174:   </div>
175: </template>
176: 
177: <style scoped></style>
```

## File: apps/admin-dashboard/components/financial/DevOps.vue
```vue
  1: <script setup lang="ts">
  2: const { months, devOps, rgba } = useFinancials()
  3: 
  4: const breakdown = computed(() => devOps?.value.flatMap((m) => m.vercel.cost.breakdown))
  5: 
  6: const charts = computed(() => {
  7:   if (!months.value || !devOps.value) {
  8:     return []
  9:   }
 10: 
 11:   return [
 12:     {
 13:       title: 'Vercel Costs Breakdown',
 14:       subtitle: 'Shows the breakdown of Vercel costs for the selected time period.',
 15:       type: 'bar',
 16:       data: {
 17:         labels: [
 18:           'Base Cost',
 19:           'Data Transfer Cost',
 20:           'Origin Transfer Cost',
 21:           'Edge Requests Cost',
 22:           'Middleware Invocations Cost',
 23:           'Function Invocations Cost',
 24:           'Function Duration Cost',
 25:           'Edge Function Executions Cost',
 26:           'Data Cache Reads Cost',
 27:           'Data Cache Writes Cost',
 28:           'Edge Config Reads Cost',
 29:           'Edge Config Writes Cost',
 30:         ],
 31:         datasets: [
 32:           {
 33:             label: 'Total Vercel Costs',
 34:             valueType: 'currency',
 35:             data: [
 36:               breakdown.value.flatMap((m) => m.base).reduce((a, b) => a + b, 0),
 37:               breakdown.value.flatMap((m) => m.dataTransfer).reduce((a, b) => a + b, 0),
 38:               breakdown.value.flatMap((m) => m.originTransfer).reduce((a, b) => a + b, 0),
 39:               breakdown.value.flatMap((m) => m.edgeRequests).reduce((a, b) => a + b, 0),
 40:               breakdown.value.flatMap((m) => m.middlewareInvocations).reduce((a, b) => a + b, 0),
 41:               breakdown.value.flatMap((m) => m.functionInvocations).reduce((a, b) => a + b, 0),
 42:               breakdown.value.flatMap((m) => m.functionDuration).reduce((a, b) => a + b, 0),
 43:               breakdown.value.flatMap((m) => m.edgeFunctionExecutions).reduce((a, b) => a + b, 0),
 44:               breakdown.value.flatMap((m) => m.dataCacheReads).reduce((a, b) => a + b, 0),
 45:               breakdown.value.flatMap((m) => m.dataCacheWrites).reduce((a, b) => a + b, 0),
 46:               breakdown.value.flatMap((m) => m.edgeConfigReads).reduce((a, b) => a + b, 0),
 47:               breakdown.value.flatMap((m) => m.edgeConfigWrites).reduce((a, b) => a + b, 0),
 48:             ],
 49:             backgroundColor: [
 50:               rgba('lightGreen', 0.5),
 51:               rgba('darkBlue', 0.5),
 52:               rgba('darkBlue', 0.5),
 53:               rgba('darkBlue', 0.5),
 54:               rgba('darkBlue', 0.5),
 55:               rgba('darkBlue', 0.5),
 56:               rgba('darkBlue', 0.5),
 57:               rgba('darkBlue', 0.5),
 58:               rgba('darkBlue', 0.5),
 59:               rgba('darkBlue', 0.5),
 60:               rgba('darkBlue', 0.5),
 61:               rgba('darkBlue', 0.5),
 62:             ],
 63:           },
 64:         ],
 65:       },
 66:     },
 67:     {
 68:       title: 'Total DevOps Cost and Breakdown',
 69:       subtitle: 'Shows the total DevOps cost and its breakdown over time.',
 70:       type: 'line',
 71:       data: {
 72:         labels: months.value,
 73:         datasets: [
 74:           {
 75:             label: 'Base Cost',
 76:             valueType: 'currency',
 77:             data: devOps.value.flatMap((month) => month.vercel.cost.base),
 78:             borderColor: rgba('lightCyan', 0.5),
 79:           },
 80:           {
 81:             label: 'Data Transfer Cost',
 82:             valueType: 'currency',
 83:             data: devOps.value.flatMap((month) => month.vercel.cost.dataTransfer),
 84:             borderColor: rgba('darkRed', 0.5),
 85:           },
 86:           {
 87:             label: 'Origin Transfer Cost',
 88:             valueType: 'currency',
 89:             data: devOps.value.flatMap((month) => month.vercel.cost.originTransfer),
 90:             borderColor: rgba('lightGreen', 0.5),
 91:           },
 92:           {
 93:             label: 'Edge Requests Cost',
 94:             valueType: 'currency',
 95:             data: devOps.value.flatMap((month) => month.vercel.cost.edgeRequests),
 96:             borderColor: rgba('lightRed', 0.5),
 97:           },
 98:           {
 99:             label: 'Middleware Invocations Cost',
100:             valueType: 'currency',
101:             data: devOps.value.flatMap((month) => month.vercel.cost.middlewareInvocations),
102:             borderColor: rgba('darkGreen', 0.5),
103:           },
104:           {
105:             label: 'Function Invocations Cost',
106:             valueType: 'currency',
107:             data: devOps.value.flatMap((month) => month.vercel.cost.functionInvocations),
108:             borderColor: rgba('darkOrange', 0.5),
109:           },
110:           {
111:             label: 'Function Duration Cost',
112:             valueType: 'currency',
113:             data: devOps.value.flatMap((month) => month.vercel.cost.functionDuration),
114:             borderColor: rgba('darkPurple', 0.5),
115:           },
116:           {
117:             label: 'Edge Function Executions Cost',
118:             valueType: 'currency',
119:             data: devOps.value.flatMap((month) => month.vercel.cost.edgeFunctionExecutions),
120:             borderColor: rgba('darkPink', 0.5),
121:           },
122:           {
123:             label: 'Data Cache Reads Cost',
124:             valueType: 'currency',
125:             data: devOps.value.flatMap((month) => month.vercel.cost.dataCacheReads),
126:             borderColor: rgba('darkCyan', 0.5),
127:           },
128:           {
129:             label: 'Data Cache Writes Cost',
130:             valueType: 'currency',
131:             data: devOps.value.flatMap((month) => month.vercel.cost.dataCacheWrites),
132:             borderColor: rgba('darkBlue', 0.5),
133:           },
134:           {
135:             label: 'Edge Config Reads Cost',
136:             valueType: 'currency',
137:             data: devOps.value.flatMap((month) => month.vercel.cost.edgeConfigReads),
138:             borderColor: rgba('darkBrown', 0.5),
139:           },
140:           {
141:             label: 'Edge Config Writes Cost',
142:             valueType: 'currency',
143:             data: devOps.value.flatMap((month) => month.vercel.cost.edgeConfigWrites),
144:             borderColor: rgba('darkBlue', 0.5),
145:           },
146:           {
147:             label: 'Total Cost',
148:             type: 'bar',
149:             valueType: 'currency',
150:             data: devOps.value.flatMap((month) => month.vercel.cost.total),
151:             backgroundColor: rgba('darkBlue', 0.3),
152:           },
153:         ],
154:       },
155:     },
156:     {
157:       title: 'Vercel Usage Metrics Over Time',
158:       subtitle: 'Tracks the usage metrics for various Vercel components over time.',
159:       type: 'line',
160:       data: {
161:         labels: months.value,
162:         datasets: [
163:           {
164:             label: 'Data Transfer GB',
165:             valueType: 'storage',
166:             data: devOps.value.flatMap((m) => m.vercel.usage.dataTransferGB),
167:             borderColor: rgba('lightBlue', 0.5),
168:             backgroundColor: rgba('lightBlue', 0.2),
169:           },
170:           {
171:             label: 'Origin Transfer GB',
172:             valueType: 'storage',
173:             data: devOps.value.flatMap((m) => m.vercel.usage.originTransferGB),
174:             borderColor: rgba('darkRed', 0.5),
175:             backgroundColor: rgba('darkRed', 0.2),
176:           },
177:           {
178:             label: 'Edge Requests',
179:             valueType: 'number',
180:             data: devOps.value.flatMap((m) => m.vercel.usage.edgeRequests),
181:             borderColor: rgba('lightGreen', 0.5),
182:             backgroundColor: rgba('lightGreen', 0.2),
183:           },
184:           {
185:             label: 'Middleware Invocations',
186:             valueType: 'number',
187:             data: devOps.value.flatMap((m) => m.vercel.usage.middlewareInvocations),
188:             borderColor: rgba('lightRed', 0.5),
189:             backgroundColor: rgba('lightRed', 0.2),
190:           },
191:           {
192:             label: 'Function Invocations',
193:             valueType: 'number',
194:             data: devOps.value.flatMap((m) => m.vercel.usage.functionInvocations),
195:             borderColor: rgba('darkOrange', 0.5),
196:             backgroundColor: rgba('darkOrange', 0.2),
197:           },
198:           {
199:             label: 'Function Duration GB Hours',
200:             valueType: 'number',
201:             data: devOps.value.flatMap((m) => m.vercel.usage.functionDurationGBHours),
202:             borderColor: rgba('darkPurple', 0.5),
203:             backgroundColor: rgba('darkPurple', 0.2),
204:           },
205:           {
206:             label: 'Edge Function Executions',
207:             valueType: 'number',
208:             data: devOps.value.flatMap((m) => m.vercel.usage.edgeFunctionExecutions),
209:             borderColor: rgba('darkPink', 0.5),
210:             backgroundColor: rgba('darkPink', 0.2),
211:           },
212:           {
213:             label: 'Data Cache Reads',
214:             valueType: 'number',
215:             data: devOps.value.flatMap((m) => m.vercel.usage.dataCacheReads),
216:             borderColor: rgba('darkCyan', 0.5),
217:             backgroundColor: rgba('darkCyan', 0.2),
218:           },
219:           {
220:             label: 'Data Cache Writes',
221:             valueType: 'number',
222:             data: devOps.value.flatMap((m) => m.vercel.usage.dataCacheWrites),
223:             borderColor: rgba('darkBlue', 0.5),
224:             backgroundColor: rgba('darkBlue', 0.2),
225:           },
226:           {
227:             label: 'Edge Config Reads',
228:             valueType: 'number',
229:             data: devOps.value.flatMap((m) => m.vercel.usage.edgeConfigReads),
230:             borderColor: rgba('darkBrown', 0.5),
231:             backgroundColor: rgba('darkBrown', 0.2),
232:           },
233:           {
234:             label: 'Edge Config Writes',
235:             valueType: 'number',
236:             data: devOps.value.flatMap((m) => m.vercel.usage.edgeConfigWrites),
237:             borderColor: rgba('darkBlue', 0.5),
238:             backgroundColor: rgba('darkBlue', 0.2),
239:           },
240:         ],
241:       },
242:     },
243:     {
244:       title: 'Function Invocations and Duration',
245:       subtitle: 'Tracks the number of function invocations, their duration, and costs over time.',
246:       type: 'line',
247:       data: {
248:         labels: months.value,
249:         datasets: [
250:           {
251:             label: 'Function Invocations',
252:             valueType: 'number',
253:             data: devOps.value.flatMap((m) => m.vercel.usage.functionInvocations),
254:             borderColor: rgba('darkBlue', 0.5),
255:           },
256:           {
257:             label: 'Function Duration (GB Hours)',
258:             valueType: 'number',
259:             data: devOps.value.flatMap((m) => m.vercel.usage.functionDurationGBHours),
260:             borderColor: rgba('lightGreen', 0.5),
261:           },
262:           {
263:             label: 'Function Invocations Cost',
264:             type: 'bar',
265:             valueType: 'currency',
266:             data: devOps.value.flatMap((m) => m.vercel.cost.functionInvocations),
267:             backgroundColor: rgba('lightRed', 0.5),
268:           },
269:           {
270:             label: 'Function Duration Cost',
271:             type: 'bar',
272:             valueType: 'currency',
273:             data: devOps.value.flatMap((m) => m.vercel.cost.functionDuration),
274:             backgroundColor: rgba('darkOrange', 0.5),
275:           },
276:         ],
277:       },
278:     },
279:     {
280:       title: 'Edge Function Executions and Data Cache Operations',
281:       subtitle:
282:         'Tracks the number of edge function executions, data cache reads/writes, and costs over time.',
283:       type: 'line',
284:       data: {
285:         labels: months.value,
286:         datasets: [
287:           {
288:             label: 'Edge Function Executions',
289:             valueType: 'number',
290:             data: devOps.value.flatMap((m) => m.vercel.usage.edgeFunctionExecutions),
291:             borderColor: rgba('lightBlue', 0.5),
292:             backgroundColor: rgba('lightBlue', 0.2),
293:           },
294:           {
295:             label: 'Data Cache Reads',
296:             valueType: 'number',
297:             data: devOps.value.flatMap((m) => m.vercel.usage.dataCacheReads),
298:             borderColor: rgba('lightGreen', 0.5),
299:             backgroundColor: rgba('lightGreen', 0.2),
300:           },
301:           {
302:             label: 'Data Cache Writes',
303:             valueType: 'number',
304:             data: devOps.value.flatMap((m) => m.vercel.usage.dataCacheWrites),
305:             borderColor: rgba('lightRed', 0.5),
306:             backgroundColor: rgba('lightRed', 0.2),
307:           },
308:           {
309:             label: 'Edge Function Executions Cost',
310:             valueType: 'currency',
311:             data: devOps.value.flatMap((m) => m.vercel.cost.edgeFunctionExecutions),
312:             borderColor: rgba('darkOrange', 0.5),
313:             backgroundColor: rgba('darkOrange', 0.2),
314:           },
315:           {
316:             label: 'Data Cache Reads Cost',
317:             valueType: 'currency',
318:             data: devOps.value.flatMap((m) => m.vercel.cost.dataCacheReads),
319:             borderColor: rgba('darkPurple', 0.5),
320:             backgroundColor: rgba('darkPurple', 0.2),
321:           },
322:           {
323:             label: 'Data Cache Writes Cost',
324:             valueType: 'currency',
325:             data: devOps.value.flatMap((m) => m.vercel.cost.dataCacheWrites),
326:             borderColor: rgba('darkPink', 0.5),
327:             backgroundColor: rgba('darkPink', 0.2),
328:           },
329:         ],
330:       },
331:     },
332:     {
333:       title: 'Total Usage Metrics',
334:       subtitle: 'Provides an overview of all significant usage metrics over time.',
335:       type: 'line',
336:       data: {
337:         labels: months.value,
338:         datasets: [
339:           {
340:             label: 'Data Transfer GB',
341:             type: 'bar',
342:             valueType: 'storage',
343:             data: devOps.value.flatMap((m) => m.vercel.usage.dataTransferGB),
344:             borderColor: rgba('lightBlue', 0.5),
345:             backgroundColor: rgba('lightBlue', 0.2),
346:           },
347:           {
348:             label: 'Origin Transfer GB',
349:             type: 'bar',
350:             valueType: 'storage',
351:             data: devOps.value.flatMap((m) => m.vercel.usage.originTransferGB),
352:             borderColor: rgba('lightGreen', 0.5),
353:             backgroundColor: rgba('lightGreen', 0.2),
354:           },
355:           {
356:             label: 'Edge Requests',
357:             valueType: 'number',
358:             data: devOps.value.flatMap((m) => m.vercel.usage.edgeRequests),
359:             borderColor: rgba('lightRed', 0.5),
360:             backgroundColor: rgba('lightRed', 0.2),
361:           },
362:           {
363:             label: 'Middleware Invocations',
364:             valueType: 'number',
365:             data: devOps.value.flatMap((m) => m.vercel.usage.middlewareInvocations),
366:             borderColor: rgba('darkOrange', 0.5),
367:             backgroundColor: rgba('darkOrange', 0.2),
368:           },
369:           {
370:             label: 'Function Invocations',
371:             valueType: 'number',
372:             data: devOps.value.flatMap((m) => m.vercel.usage.functionInvocations),
373:             borderColor: rgba('darkPurple', 0.5),
374:             backgroundColor: rgba('darkPurple', 0.2),
375:           },
376:         ],
377:       },
378:     },
379: 
380:     {
381:       title: 'Cost Breakdown by Function Type',
382:       subtitle: 'Shows the cost breakdown for different Vercel functions over time.',
383:       type: 'bar',
384:       data: {
385:         labels: months.value,
386:         datasets: [
387:           {
388:             label: 'Edge Requests Cost',
389:             valueType: 'currency',
390:             data: devOps.value.flatMap((month) => month.vercel.cost.edgeRequests),
391:             backgroundColor: rgba('lightBlue', 0.5),
392:           },
393:           {
394:             label: 'Middleware Invocations Cost',
395:             valueType: 'currency',
396:             data: devOps.value.flatMap((month) => month.vercel.cost.middlewareInvocations),
397:             backgroundColor: rgba('lightGreen', 0.5),
398:           },
399:           {
400:             label: 'Function Invocations Cost',
401:             valueType: 'currency',
402:             data: devOps.value.flatMap((month) => month.vercel.cost.functionInvocations),
403:             backgroundColor: rgba('lightRed', 0.5),
404:           },
405:           {
406:             label: 'Function Duration Cost',
407:             valueType: 'currency',
408:             data: devOps.value.flatMap((month) => month.vercel.cost.functionDuration),
409:             backgroundColor: rgba('darkOrange', 0.5),
410:           },
411:           {
412:             label: 'Data Cache Reads Cost',
413:             valueType: 'currency',
414:             data: devOps.value.flatMap((month) => month.vercel.cost.dataCacheReads),
415:             backgroundColor: rgba('darkPurple', 0.5),
416:           },
417:         ],
418:       },
419:     },
420:     {
421:       title: 'Data Transfer and Processing Costs',
422:       subtitle: 'Shows the costs associated with data transfer and processing over time.',
423:       type: 'line',
424:       data: {
425:         labels: months.value,
426:         datasets: [
427:           {
428:             label: 'Data Transfer Cost',
429:             valueType: 'currency',
430:             data: devOps.value.flatMap((month) => month.vercel.cost.dataTransfer),
431:             borderColor: rgba('lightBlue', 0.5),
432:             backgroundColor: rgba('lightBlue', 0.2),
433:           },
434:           {
435:             label: 'Origin Transfer Cost',
436:             valueType: 'currency',
437:             data: devOps.value.flatMap((month) => month.vercel.cost.originTransfer),
438:             borderColor: rgba('lightGreen', 0.5),
439:             backgroundColor: rgba('lightGreen', 0.2),
440:           },
441:           {
442:             label: 'Function Duration Cost',
443:             valueType: 'currency',
444:             data: devOps.value.flatMap((month) => month.vercel.cost.functionDuration),
445:             borderColor: rgba('lightRed', 0.5),
446:             backgroundColor: rgba('lightRed', 0.2),
447:           },
448:           {
449:             label: 'Data Cache Writes Cost',
450:             valueType: 'currency',
451:             data: devOps.value.flatMap((month) => month.vercel.cost.dataCacheWrites),
452:             borderColor: rgba('darkOrange', 0.5),
453:             backgroundColor: rgba('darkOrange', 0.2),
454:           },
455:         ],
456:       },
457:     },
458:   ]
459: })
460: </script>
461: 
462: <template>
463:   <FinancialCharts :charts="charts" />
464: </template>
465: 
466: <style scoped></style>
```

## File: apps/admin-dashboard/components/financial/Employees.vue
```vue
  1: <script setup lang="ts">
  2: const {
  3:   totals,
  4:   months,
  5:   employees,
  6:   software,
  7:   office,
  8:   storage,
  9:   digitalOcean,
 10:   devOps,
 11:   logging,
 12:   findLargestValue,
 13:   rgba,
 14: } = useFinancials()
 15: 
 16: const charts = computed(() => {
 17:   if (!months.value || !employees.value) {
 18:     return []
 19:   }
 20: 
 21:   return [
 22:     {
 23:       title: 'Monthly Expenses Breakdown',
 24:       subtitle:
 25:         'Provides transparency on how funds are being allocated, reassuring investors about cost management and spending efficiency.',
 26:       type: 'bar',
 27:       data: {
 28:         labels: months.value,
 29:         datasets: [
 30:           {
 31:             label: 'Marketing',
 32:             valueType: 'currency',
 33:             stack: 'stack1',
 34:             data: totals.value.flatMap((m) => m.marketing),
 35:             backgroundColor: rgba('darkBrown', 0.5),
 36:           },
 37:           {
 38:             label: 'Employee Total Cost',
 39:             valueType: 'currency',
 40:             stack: 'stack1',
 41:             data: totals.value.flatMap((m) => m.employees),
 42:             backgroundColor: rgba('lightGreen', 0.5),
 43:           },
 44:           {
 45:             label: 'OpenAI Total Cost',
 46:             valueType: 'currency',
 47:             stack: 'stack1',
 48:             data: totals.value.flatMap((m) => m.openAI),
 49:             backgroundColor: rgba('darkOrange', 0.5),
 50:           },
 51:           {
 52:             label: 'Office Total Cost',
 53:             valueType: 'currency',
 54:             stack: 'stack1',
 55:             data: totals.value.flatMap((m) => m.office),
 56:             backgroundColor: rgba('darkPurple', 0.5),
 57:           },
 58:           {
 59:             label: 'Storage Total Cost',
 60:             valueType: 'currency',
 61:             stack: 'stack1',
 62:             data: totals.value.flatMap((m) => m.storage),
 63:             backgroundColor: rgba('darkBlue', 0.5),
 64:           },
 65:           {
 66:             label: 'Digital Ocean Total Cost',
 67:             valueType: 'currency',
 68:             stack: 'stack1',
 69:             data: totals.value.flatMap((m) => m.digitalOcean),
 70:             backgroundColor: rgba('lightOrange', 0.5),
 71:           },
 72:           {
 73:             label: 'Logging Total Cost',
 74:             valueType: 'currency',
 75:             stack: 'stack1',
 76:             data: totals.value.flatMap((m) => m.logging),
 77:             backgroundColor: rgba('darkGray', 0.5),
 78:           },
 79:           {
 80:             label: 'DevOps Total Cost',
 81:             valueType: 'currency',
 82:             stack: 'stack1',
 83:             data: totals.value.flatMap((m) => m.devOps),
 84:             backgroundColor: rgba('darkRed', 0.5),
 85:           },
 86:           {
 87:             label: 'Loan Total Cost',
 88:             valueType: 'currency',
 89:             stack: 'stack1',
 90:             data: totals.value.flatMap((m) => m.loan),
 91:             backgroundColor: rgba('darkGreen', 0.5),
 92:           },
 93:         ],
 94:       },
 95:     },
 96:     {
 97:       title: 'Employee Costs',
 98:       subtitle: 'Shows the employee cost by type for the selected timeperiod',
 99:       type: 'bar',
100:       data: {
101:         labels: [
102:           'Core Total Salary',
103:           'Core Total Extras',
104:           'Support Total Salary',
105:           'Support Total Extras',
106:           'Experts Total Salary',
107:           'Experts Total Extras',
108:           'Founders Total Salary',
109:           'Founders Total Extras',
110:           'Software Total Cost',
111:         ],
112:         datasets: [
113:           {
114:             label: 'Employee Expenses Breakdown',
115:             valueType: 'currency',
116:             data: [
117:               employees.value.flatMap((m) => m.core.totalSalary).reduce((a, b) => a + b, 0),
118:               employees.value.flatMap((m) => m.core.totalExtras).reduce((a, b) => a + b, 0),
119:               employees.value.flatMap((m) => m.support.totalSalary).reduce((a, b) => a + b, 0),
120:               employees.value.flatMap((m) => m.support.totalExtras).reduce((a, b) => a + b, 0),
121:               employees.value.flatMap((m) => m.experts.totalSalary).reduce((a, b) => a + b, 0),
122:               employees.value.flatMap((m) => m.experts.totalExtras).reduce((a, b) => a + b, 0),
123:               employees.value.flatMap((m) => m.founders.totalSalary).reduce((a, b) => a + b, 0),
124:               employees.value.flatMap((m) => m.founders.totalExtras).reduce((a, b) => a + b, 0),
125:               software.value.flatMap((m) => m.totalCost).reduce((a, b) => a + b, 0),
126:             ],
127:             backgroundColor: [
128:               rgba('lightGreen', 0.5),
129:               rgba('lightGreen', 0.5),
130:               rgba('lightBlue', 0.5),
131:               rgba('lightBlue', 0.5),
132:               rgba('darkRed', 0.5),
133:               rgba('darkRed', 0.5),
134:               rgba('lightOrange', 0.5),
135:               rgba('lightOrange', 0.5),
136:               rgba('darkGray', 0.5),
137:             ],
138:           },
139:         ],
140:       },
141:     },
142:     {
143:       title: 'Employee Count',
144:       subtitle: 'Shows the MAX employee count for each type for the selected timeperiod',
145:       type: 'bar',
146:       data: {
147:         labels: [
148:           'Founders Total Count',
149:           'Support Total Count',
150:           'Core Total Count',
151:           'Experts Total Count',
152:         ],
153:         datasets: [
154:           {
155:             label: 'Employee Counts',
156:             valueType: 'employees',
157:             data: [
158:               findLargestValue(employees.value.flatMap((month) => month.founders.employeeCount)),
159:               findLargestValue(employees.value.flatMap((month) => month.support.employeeCount)),
160:               findLargestValue(employees.value.flatMap((month) => month.core.employeeCount)),
161:               findLargestValue(employees.value.flatMap((month) => month.experts.employeeCount)),
162:             ],
163:             backgroundColor: [
164:               rgba('darkRed', 0.5),
165:               rgba('lightPurple', 0.5),
166:               rgba('lightOrange', 0.5),
167:               rgba('darkGray', 0.5),
168:             ],
169:           },
170:         ],
171:       },
172:     },
173:   ]
174: })
175: </script>
176: 
177: <template>
178:   <FinancialCharts :charts="charts" />
179: </template>
180: 
181: <style scoped></style>
```

## File: apps/admin-dashboard/components/financial/Logging.vue
```vue
  1: <script setup lang="ts">
  2: const { months, logging, rgba } = useFinancials()
  3: 
  4: const charts = computed(() => {
  5:   if (!months.value || !logging.value) {
  6:     return []
  7:   }
  8: 
  9:   return [
 10:     {
 11:       title: 'Logging Costs Breakdown',
 12:       subtitle: 'Shows the breakdown of logging costs for the selected time period.',
 13:       type: 'bar',
 14:       data: {
 15:         labels: ['Ingested Cost', 'Retention Cost', 'Metrics Cost', 'Analytics Cost'],
 16:         datasets: [
 17:           {
 18:             label: 'Total Logging Costs',
 19:             valueType: 'currency',
 20:             data: [
 21:               logging.value.flatMap((month) => month.ingested).reduce((a, b) => a + b, 0),
 22:               logging.value.flatMap((month) => month.retention).reduce((a, b) => a + b, 0),
 23:               logging.value.flatMap((month) => month.metrics).reduce((a, b) => a + b, 0),
 24:               logging.value.flatMap((month) => month.analytics).reduce((a, b) => a + b, 0),
 25:             ],
 26:             backgroundColor: [
 27:               rgba('lightGreen', 0.5),
 28:               rgba('darkBlue', 0.5),
 29:               rgba('darkBlue', 0.5),
 30:               rgba('darkBlue', 0.5),
 31:             ],
 32:           },
 33:         ],
 34:       },
 35:     },
 36:     {
 37:       title: 'Ingested vs. Retention Costs',
 38:       subtitle: 'Comparison of ingested and retention costs over time.',
 39:       type: 'bar',
 40:       data: {
 41:         labels: months.value,
 42:         datasets: [
 43:           {
 44:             label: 'Total Cost',
 45:             type: 'line',
 46:             valueType: 'currency',
 47:             data: logging.value.flatMap((cost) => cost.total),
 48:             backgroundColor: rgba('black', 1),
 49:             borderColor: rgba('lightYellow', 0.5),
 50:           },
 51:           {
 52:             label: 'Ingested Cost',
 53:             valueType: 'currency',
 54:             stack: 'stack1',
 55:             data: logging.value.flatMap((cost) => cost.ingested),
 56:             backgroundColor: rgba('lightBlue', 0.5),
 57:           },
 58:           {
 59:             label: 'Retention Cost',
 60:             valueType: 'currency',
 61:             stack: 'stack1',
 62:             data: logging.value.flatMap((cost) => cost.retention),
 63:             backgroundColor: rgba('darkBlue', 0.5),
 64:           },
 65:           {
 66:             label: 'Metrics Cost',
 67:             valueType: 'currency',
 68:             stack: 'stack2',
 69:             data: logging.value.flatMap((cost) => cost.metrics),
 70:             backgroundColor: rgba('lightOrange', 0.5),
 71:           },
 72:           {
 73:             label: 'Analytics Cost',
 74:             stack: 'stack2',
 75:             valueType: 'currency',
 76:             data: logging.value.flatMap((cost) => cost.analytics),
 77:             backgroundColor: rgba('darkOrange', 0.5),
 78:           },
 79:         ],
 80:       },
 81:     },
 82: 
 83:     {
 84:       title: 'Detailed Breakdown of Logging Costs',
 85:       subtitle: 'Shows detailed breakdown of logging costs over time.',
 86:       type: 'line',
 87:       data: {
 88:         labels: months.value,
 89:         datasets: [
 90:           {
 91:             label: 'Ingested Cost',
 92:             valueType: 'currency',
 93:             data: logging.value.flatMap((cost) => cost.ingested),
 94:             borderColor: rgba('lightBlue', 0.5),
 95:             backgroundColor: rgba('black', 1),
 96:           },
 97:           {
 98:             label: 'Retention Cost',
 99:             valueType: 'currency',
100:             data: logging.value.flatMap((cost) => cost.retention),
101:             borderColor: rgba('lightGreen', 0.5),
102:             backgroundColor: rgba('black', 1),
103:           },
104:           {
105:             label: 'Metrics Cost',
106:             valueType: 'currency',
107:             data: logging.value.flatMap((cost) => cost.metrics),
108:             borderColor: rgba('lightOrange', 0.5),
109:             backgroundColor: rgba('black', 1),
110:           },
111:           {
112:             label: 'Analytics Cost',
113:             valueType: 'currency',
114:             data: logging.value.flatMap((cost) => cost.analytics),
115:             borderColor: rgba('lightRed', 0.5),
116:             backgroundColor: rgba('black', 1),
117:           },
118:         ],
119:       },
120:     },
121:   ]
122: })
123: </script>
124: 
125: <template>
126:   <FinancialCharts :charts="charts" />
127: </template>
128: 
129: <style scoped></style>
```

## File: apps/admin-dashboard/components/financial/OpenAI.vue
```vue
  1: <script setup lang="ts">
  2: const { months, openAI, rgba } = useFinancials()
  3: 
  4: const embeddingDetails = computed(() => {
  5:   if (!months.value || !openAI.value) {
  6:     return []
  7:   }
  8:   return openAI.value.map((month) =>
  9:     month.breakdown.reduce(
 10:       (acc, detail) => {
 11:         acc.totalCost += detail.embedding.totalCost
 12:         acc.totalTokens += detail.embedding.tokens.total
 13:         return acc
 14:       },
 15:       {
 16:         totalCost: 0,
 17:         totalTokens: 0,
 18:         model: '',
 19:         batch: '',
 20:       },
 21:     ),
 22:   )
 23: })
 24: 
 25: const summaryDetails = computed(() => {
 26:   if (!months.value || !openAI.value) {
 27:     return []
 28:   }
 29: 
 30:   return openAI.value.map((month) =>
 31:     month.breakdown.reduce(
 32:       (acc, detail) => {
 33:         acc.totalCost += detail.summary.cost.total
 34:         acc.inputCost += detail.summary.cost.input
 35:         acc.outputCost += detail.summary.cost.output
 36:         acc.totalTokens += detail.summary.tokens.total
 37:         acc.inputTokens += detail.summary.tokens.input
 38:         acc.outputTokens += detail.summary.tokens.output
 39:         return acc
 40:       },
 41:       {
 42:         totalCost: 0,
 43:         inputCost: 0,
 44:         outputCost: 0,
 45:         totalTokens: 0,
 46:         inputTokens: 0,
 47:         outputTokens: 0,
 48:         model: '',
 49:         batch: '',
 50:       },
 51:     ),
 52:   )
 53: })
 54: 
 55: console.log('details', summaryDetails.value)
 56: // embeddingDetails.value.flatMap((detail) =>
 57: //   detail.map((d) => d.totalCost).reduce((a, b) => a + b, 0)
 58: // )
 59: 
 60: const charts = computed(() => {
 61:   if (!months.value || !openAI.value) {
 62:     return []
 63:   }
 64: 
 65:   return [
 66:     {
 67:       title: 'OpenAI Costs Breakdown',
 68:       subtitle: 'Shows the breakdown of OpenAI costs for the selected time period.',
 69:       type: 'bar',
 70:       data: {
 71:         labels: ['Total Cost', 'Embedding Cost', 'Summary Cost', 'Chat Cost'],
 72:         datasets: [
 73:           {
 74:             label: 'Total OpenAI Costs',
 75:             valueType: 'currency',
 76:             data: [
 77:               openAI.value.map((month) => month.cost.total).reduce((a, b) => a + b, 0),
 78:               openAI.value.map((month) => month.cost.embedding).reduce((a, b) => a + b, 0),
 79:               openAI.value.map((month) => month.cost.summary).reduce((a, b) => a + b, 0),
 80:               openAI.value.map((month) => month.cost.chat).reduce((a, b) => a + b, 0),
 81:             ],
 82:             backgroundColor: [
 83:               rgba('lightGreen', 0.5),
 84:               rgba('darkBlue', 0.5),
 85:               rgba('darkBlue', 0.5),
 86:               rgba('darkBlue', 0.5),
 87:               rgba('darkBlue', 0.5),
 88:             ],
 89:           },
 90:         ],
 91:       },
 92:     },
 93:     {
 94:       title: 'OpenAI Token Breakdown',
 95:       subtitle: 'Shows the breakdown of OpenAI token usage for the selected time period.',
 96:       type: 'bar',
 97:       data: {
 98:         labels: [
 99:           'Free Chat Input',
100:           'Free Chat Output',
101:           'Pro Chat Input',
102:           'Pro Chat Output',
103:           'Expert Chat Input',
104:           'Expert Chat Output',
105:           'Embeddings',
106:           'Summary Input',
107:           'Summary Output',
108:         ],
109:         datasets: [
110:           {
111:             label: 'Token Usage',
112:             valueType: 'number',
113:             data: [
114:               openAI.value
115:                 .flatMap((month) => month.chat.free.tokens.input)
116:                 .reduce((a, b) => a + b, 0),
117:               openAI.value
118:                 .flatMap((month) => month.chat.free.tokens.output)
119:                 .reduce((a, b) => a + b, 0),
120:               openAI.value
121:                 .flatMap((month) => month.chat.pro.tokens.input)
122:                 .reduce((a, b) => a + b, 0),
123:               openAI.value
124:                 .flatMap((month) => month.chat.pro.tokens.output)
125:                 .reduce((a, b) => a + b, 0),
126:               openAI.value
127:                 .flatMap((month) => month.chat.expert.tokens.input)
128:                 .reduce((a, b) => a + b, 0),
129:               openAI.value
130:                 .flatMap((month) => month.chat.expert.tokens.output)
131:                 .reduce((a, b) => a + b, 0),
132:               embeddingDetails.value.map((d) => d.totalTokens).reduce((a, b) => a + b, 0),
133:               summaryDetails.value.map((d) => d.inputTokens).reduce((a, b) => a + b, 0),
134:               summaryDetails.value.map((d) => d.outputTokens).reduce((a, b) => a + b, 0),
135:             ],
136:             backgroundColor: [
137:               rgba('lightGreen', 0.5),
138:               rgba('darkBlue', 0.5),
139:               rgba('darkBlue', 0.5),
140:               rgba('darkBlue', 0.5),
141:               rgba('darkBlue', 0.5),
142:               rgba('darkBlue', 0.5),
143:               rgba('darkBlue', 0.5),
144:               rgba('darkBlue', 0.5),
145:               rgba('darkBlue', 0.5),
146:             ],
147:           },
148:         ],
149:       },
150:     },
151:     {
152:       title: 'OpenAI Cost Breakdown',
153:       subtitle: 'Shows the total cost breakdown for OpenAI services over time.',
154:       type: 'bar',
155:       data: {
156:         labels: months.value,
157:         datasets: [
158:           {
159:             label: 'Total Cost',
160:             valueType: 'currency',
161:             type: 'line',
162:             data: openAI.value.flatMap((month) => month.cost.total),
163:             borderColor: rgba('lightBlue', 0.5),
164:           },
165:           {
166:             label: 'Embedding Cost',
167:             stack: 'stack1',
168:             valueType: 'currency',
169:             data: openAI.value.flatMap((month) => month.cost.embedding),
170:             backgroundColor: rgba('lightGreen', 0.5),
171:           },
172:           {
173:             label: 'Summary Cost',
174:             valueType: 'currency',
175:             stack: 'stack1',
176:             data: openAI.value.flatMap((month) => month.cost.summary),
177:             backgroundColor: rgba('lightRed', 0.5),
178:           },
179:           {
180:             label: 'Free Chat Cost',
181:             valueType: 'currency',
182:             stack: 'stack2',
183:             data: openAI.value.flatMap((month) => month.chat.free.cost.total),
184:             backgroundColor: rgba('darkBlue', 0.5),
185:           },
186:           {
187:             label: 'Pro Chat Cost',
188:             valueType: 'currency',
189:             stack: 'stack2',
190:             data: openAI.value.flatMap((month) => month.chat.pro.cost.total),
191:             backgroundColor: rgba('darkPink', 0.5),
192:           },
193:           {
194:             label: 'Expert Chat Cost',
195:             valueType: 'currency',
196:             stack: 'stack2',
197:             data: openAI.value.flatMap((month) => month.chat.expert.cost.total),
198:             backgroundColor: rgba('darkPurple', 0.5),
199:           },
200:         ],
201:       },
202:     },
203:     {
204:       title: 'Embedding Details',
205:       subtitle: 'Shows detailed embedding costs and usage over time.',
206:       type: 'line',
207:       data: {
208:         labels: months.value,
209:         datasets: [
210:           {
211:             label: 'Embedding Total Cost',
212:             valueType: 'currency',
213:             data: embeddingDetails.value.map((detail) => detail.totalCost),
214:             borderColor: rgba('lightBlue', 0.5),
215:             backgroundColor: rgba('black', 1),
216:           },
217:           {
218:             label: 'Token Usage',
219:             valueType: 'number',
220:             type: 'bar',
221:             data: embeddingDetails.value.map((detail) => detail.totalTokens),
222:             backgroundColor: rgba('darkOrange', 0.3),
223:           },
224:         ],
225:       },
226:     },
227:     {
228:       title: 'Summary Details',
229:       subtitle: 'Shows detailed summary costs and usage over time.',
230:       type: 'line',
231:       data: {
232:         labels: months.value,
233:         datasets: [
234:           {
235:             label: 'Summary Total Cost',
236:             valueType: 'currency',
237:             data: summaryDetails.value.map((d) => d.totalCost),
238:             borderColor: rgba('lightRed', 0.5),
239:             backgroundColor: rgba('lightRed', 0.2),
240:           },
241:           {
242:             label: 'Input Cost',
243:             valueType: 'currency',
244:             data: summaryDetails.value.map((d) => d.inputCost),
245:             borderColor: rgba('darkOrange', 0.5),
246:             backgroundColor: rgba('darkOrange', 0.2),
247:           },
248:           {
249:             label: 'Output Cost',
250:             valueType: 'currency',
251:             data: summaryDetails.value.map((d) => d.outputCost),
252:             borderColor: rgba('darkPurple', 0.5),
253:             backgroundColor: rgba('darkPurple', 0.2),
254:           },
255:           {
256:             label: 'Tokens Used',
257:             valueType: 'number',
258:             type: 'bar',
259:             data: summaryDetails.value.map((d) => d.totalTokens),
260:             borderColor: rgba('darkBlue', 0.5),
261:             backgroundColor: rgba('darkBlue', 0.2),
262:           },
263:         ],
264:       },
265:     },
266:     {
267:       title: 'Chat Cost Breakdown',
268:       subtitle: 'Shows the breakdown of chat costs for free, pro, and expert users over time.',
269:       type: 'bar',
270:       data: {
271:         labels: months.value,
272:         datasets: [
273:           {
274:             label: 'Free Chat Total Cost',
275:             type: 'line',
276:             valueType: 'currency',
277:             data: openAI.value.flatMap((month) => month.chat.free.cost.total),
278:             borderColor: rgba('lightBlue', 0.5),
279:           },
280:           {
281:             label: 'Pro Chat Total Cost',
282:             type: 'line',
283:             valueType: 'currency',
284:             data: openAI.value.flatMap((month) => month.chat.pro.cost.total),
285:             borderColor: rgba('darkOrange', 0.5),
286:           },
287:           {
288:             label: 'Expert Chat Total Cost',
289:             type: 'line',
290:             valueType: 'currency',
291:             data: openAI.value.flatMap((month) => month.chat.expert.cost.total),
292:             borderColor: rgba('darkOrange', 0.5),
293:           },
294:           {
295:             label: 'Pro Chat Input Cost',
296:             valueType: 'currency',
297:             data: openAI.value.flatMap((month) => month.chat.pro.cost.input),
298:             backgroundColor: rgba('darkPurple', 0.5),
299:           },
300:           {
301:             label: 'Pro Chat Output Cost',
302:             valueType: 'currency',
303:             data: openAI.value.flatMap((month) => month.chat.pro.cost.output),
304:             backgroundColor: rgba('darkBlue', 0.5),
305:           },
306:           {
307:             label: 'Expert Chat Input Cost',
308:             valueType: 'currency',
309:             data: openAI.value.flatMap((month) => month.chat.expert.cost.input),
310:             backgroundColor: rgba('darkPurple', 0.5),
311:           },
312:           {
313:             label: 'Expert Chat Output Cost',
314:             valueType: 'currency',
315:             data: openAI.value.flatMap((month) => month.chat.expert.cost.output),
316:             backgroundColor: rgba('darkBlue', 0.5),
317:           },
318:         ],
319:       },
320:     },
321:     {
322:       title: 'Chat Usage',
323:       subtitle:
324:         'Shows the token usage and request counts for free, pro, and expert chat users over time.',
325:       type: 'line',
326:       data: {
327:         labels: months.value,
328:         datasets: [
329:           {
330:             label: 'Free Chat Tokens',
331:             valueType: 'number',
332:             data: openAI.value.flatMap((month) => month.chat.free.tokens.total),
333:             borderColor: rgba('lightBlue', 0.5),
334:             backgroundColor: rgba('lightBlue', 0.2),
335:           },
336:           {
337:             label: 'Free Chat Requests',
338:             valueType: 'number',
339:             data: openAI.value.flatMap((month) => month.chat.free.requests.total),
340:             borderColor: rgba('lightGreen', 0.5),
341:             backgroundColor: rgba('lightGreen', 0.2),
342:           },
343:           {
344:             label: 'Pro Chat Tokens',
345:             valueType: 'number',
346:             data: openAI.value.flatMap((month) => month.chat.pro.tokens.total),
347:             borderColor: rgba('lightRed', 0.5),
348:             backgroundColor: rgba('lightRed', 0.2),
349:           },
350:           {
351:             label: 'Pro Chat Requests',
352:             valueType: 'number',
353:             data: openAI.value.flatMap((month) => month.chat.pro.requests.total),
354:             borderColor: rgba('darkOrange', 0.5),
355:             backgroundColor: rgba('darkOrange', 0.2),
356:           },
357:           {
358:             label: 'Expert Chat Tokens',
359:             valueType: 'number',
360:             data: openAI.value.flatMap((month) => month.chat.expert.tokens.total),
361:             borderColor: rgba('lightRed', 0.5),
362:             backgroundColor: rgba('lightRed', 0.2),
363:           },
364:           {
365:             label: 'Expert Chat Requests',
366:             valueType: 'number',
367:             data: openAI.value.flatMap((month) => month.chat.expert.requests.total),
368:             borderColor: rgba('darkOrange', 0.5),
369:             backgroundColor: rgba('darkOrange', 0.2),
370:           },
371:         ],
372:       },
373:     },
374:     {
375:       title: 'Monthly Token Usage Comparison',
376:       subtitle:
377:         'Compares the token usage across embeddings, summaries, and chat services over time.',
378:       type: 'line',
379:       data: {
380:         labels: months.value,
381:         datasets: [
382:           {
383:             label: 'Embedding Tokens',
384:             valueType: 'number',
385:             data: openAI.value.flatMap((detail) => detail.tokens.embedding),
386:             borderColor: rgba('lightBlue', 0.5),
387:             backgroundColor: rgba('black', 1),
388:           },
389:           {
390:             label: 'Summary Tokens',
391:             valueType: 'number',
392:             data: openAI.value.flatMap((detail) => detail.tokens.summary),
393:             borderColor: rgba('lightGreen', 0.5),
394:             backgroundColor: rgba('black', 1),
395:           },
396:           {
397:             label: 'Chat Tokens',
398:             valueType: 'number',
399:             data: openAI.value.flatMap((month) => month.tokens.chat),
400:             borderColor: rgba('lightRed', 0.5),
401:             backgroundColor: rgba('black', 1),
402:           },
403:           {
404:             label: 'Total Tokens',
405:             valueType: 'number',
406:             type: 'bar',
407:             data: openAI.value.flatMap((month) => month.tokens.total),
408:             backgroundColor: rgba('darkOrange', 0.3),
409:           },
410:         ],
411:       },
412:     },
413:     {
414:       title: 'Embedding Cost vs. Summary Cost',
415:       subtitle: 'Compares the costs of embeddings and summaries over time.',
416:       type: 'bar',
417:       data: {
418:         labels: months.value,
419:         datasets: [
420:           {
421:             label: 'Embedding Cost',
422:             valueType: 'currency',
423:             data: openAI.value.flatMap((month) => month.cost.embedding),
424:             backgroundColor: rgba('lightBlue', 0.5),
425:           },
426:           {
427:             label: 'Summary Cost',
428:             valueType: 'currency',
429:             data: openAI.value.flatMap((month) => month.cost.summary),
430:             backgroundColor: rgba('lightGreen', 0.5),
431:           },
432:         ],
433:       },
434:     },
435:     {
436:       title: 'Monthly OpenAI Service Costs',
437:       subtitle: 'Shows the monthly costs for each OpenAI service.',
438:       type: 'line',
439:       data: {
440:         labels: months.value,
441:         datasets: [
442:           {
443:             label: 'Embedding Cost',
444:             valueType: 'currency',
445:             data: openAI.value.flatMap((month) => month.cost.embedding),
446:             borderColor: rgba('lightBlue', 0.5),
447:             backgroundColor: rgba('lightBlue', 0.2),
448:           },
449:           {
450:             label: 'Summary Cost',
451:             valueType: 'currency',
452:             data: openAI.value.flatMap((month) => month.cost.summary),
453:             borderColor: rgba('lightGreen', 0.5),
454:             backgroundColor: rgba('lightGreen', 0.2),
455:           },
456:           {
457:             label: 'Chat Cost',
458:             valueType: 'currency',
459:             data: openAI.value.flatMap((month) => month.cost.chat),
460:             borderColor: rgba('lightRed', 0.5),
461:             backgroundColor: rgba('lightRed', 0.2),
462:           },
463:         ],
464:       },
465:     },
466:   ]
467: })
468: </script>
469: 
470: <template>
471:   <FinancialCharts :charts="charts" />
472: </template>
473: 
474: <style scoped></style>
```

## File: apps/admin-dashboard/components/financial/Operations.vue
```vue
 1: <script setup lang="ts">
 2: const { months, metrics, capital, customers, rgba } = useFinancials()
 3: 
 4: console.log('dataMetrics', metrics.value)
 5: 
 6: const charts = computed(() => {
 7:   if (!months.value || !metrics.value) {
 8:     return []
 9:   }
10: 
11:   console.log('should not fire', metrics.value)
12: 
13:   return [
14:     {
15:       title: 'Balance Over Time',
16:       subtitle:
17:         'Shows the company\'s financial health and sustainability, indicating the ability to cover expenses.',
18:       type: 'bar',
19:       data: {
20:         labels: months.value,
21:         datasets: [
22:           {
23:             label: 'PL Margin',
24:             type: 'line',
25:             valueType: 'percentage',
26:             data: metrics.value.map((m) => m.profitLossMargin),
27:             borderColor: rgba('lightOrange', 0.5),
28:             backgroundColor: rgba('lightOrange', 0.5),
29:           },
30:           {
31:             label: 'Burn Rate',
32:             valueType: 'currency',
33:             data: capital.value.map((m) => m.burnRate),
34:             borderColor: rgba('darkRed', 0.5),
35:             backgroundColor: rgba('darkRed', 0.5),
36:           },
37:           {
38:             label: 'Balance End',
39:             valueType: 'currency',
40:             data: capital.value.map((m) => m.balance.end),
41:             borderColor: rgba('darkGreen', 0.5),
42:             backgroundColor: rgba('darkGreen', 0.5),
43:           },
44:         ],
45:       },
46:     },
47:     {
48:       title: 'Subscription Revenue by Plan',
49:       subtitle:
50:         'Breaks down subscription revenue by different plans, highlighting the most profitable segments.',
51:       type: 'bar',
52:       data: {
53:         labels: months.value,
54:         datasets: [
55:           {
56:             label: 'Total Conversion Rate',
57:             type: 'line',
58:             valueType: 'percentage',
59:             data: metrics.value.flatMap((m) => m.conversionRate.total),
60:             borderColor: rgba('lightPurple', 0.5),
61:           },
62:           {
63:             label: 'Free Users Revenue',
64:             valueType: 'currency',
65:             data: customers.value.flatMap((m) => m.free.revenue),
66:             backgroundColor: rgba('lightGreen', 0.5),
67:           },
68:           {
69:             label: 'Pro Users Revenue',
70:             valueType: 'currency',
71:             data: customers.value.flatMap((m) => m.pro.revenue),
72:             backgroundColor: rgba('lightGreen', 0.5),
73:           },
74:           {
75:             label: 'Expert Users Revenue',
76:             valueType: 'currency',
77:             data: customers.value.flatMap((m) => m.expert.revenue),
78:             backgroundColor: rgba('lightBlue', 0.5),
79:           },
80:         ],
81:       },
82:     },
83:   ]
84: })
85: </script>
86: 
87: <template>
88:   <FinancialCharts :charts="charts" />
89: </template>
90: 
91: <style scoped></style>
```

## File: apps/admin-dashboard/components/financial/Payments.vue
```vue
  1: <script setup lang="ts">
  2: const { months, payments, totals, metrics, rgba } = useFinancials()
  3: 
  4: const stripePaymentTypes = ['InternationalCard', 'AmericanExpress', 'MasterCardVisa']
  5: 
  6: const stripeTransactions = computed(() => {
  7:   if (!months.value || !payments.value) {
  8:     return []
  9:   }
 10: 
 11:   return stripePaymentTypes.reduce((acc, type) => {
 12:     const transactions = payments.value.flatMap((month) =>
 13:       month.stripe.transactions.flatMap((transaction) =>
 14:         transaction.paymentMethod === type
 15:           ? [
 16:               {
 17:                 totalCost: transaction.pro.totalCost + transaction.expert.totalCost || 0,
 18:                 totalTransactions: transaction.methodCustomers || 0,
 19:                 additionalFees:
 20:                   transaction.pro.fees.additionalFees + transaction.expert.fees.additionalFees || 0,
 21:                 gst: transaction.pro.fees.gst + transaction.expert.fees.gst || 0,
 22:                 subscription:
 23:                   transaction.pro.fees.subscription + transaction.expert.fees.subscription || 0,
 24:                 platform: transaction.pro.fees.platform + transaction.expert.fees.platform || 0,
 25:               },
 26:             ]
 27:           : [],
 28:       ),
 29:     )
 30: 
 31:     acc[type] = {
 32:       transactions,
 33:       totals: transactions.reduce(
 34:         (totals, transaction) => {
 35:           totals.totalCost += transaction.totalCost
 36:           totals.totalTransactions += transaction.totalTransactions
 37:           totals.additionalFees += transaction.additionalFees
 38:           totals.gst += transaction.gst
 39:           totals.subscription += transaction.subscription
 40:           totals.platform += transaction.platform
 41:           return totals
 42:         },
 43:         {
 44:           totalCost: 0,
 45:           totalTransactions: 0,
 46:           additionalFees: 0,
 47:           gst: 0,
 48:           subscription: 0,
 49:           platform: 0,
 50:         },
 51:       ),
 52:     }
 53: 
 54:     return acc
 55:   }, {})
 56: })
 57: 
 58: const totalStripeTransactions = computed(() => {
 59:   const initialTotals = {
 60:     totalCost: 0,
 61:     totalTransactions: 0,
 62:     additionalFees: 0,
 63:     gst: 0,
 64:     subscription: 0,
 65:     platform: 0,
 66:   }
 67: 
 68:   if (!months.value || !payments.value) {
 69:     return []
 70:   }
 71: 
 72:   return payments.value.reduce((totals, month) => {
 73:     month.stripe.transactions.forEach((transaction) => {
 74:       totals.totalCost += transaction.pro.totalCost + transaction.expert.totalCost || 0
 75:       totals.totalTransactions += transaction.methodCustomers || 0
 76:       totals.additionalFees
 77:         += transaction.pro.fees.additionalFees + transaction.expert.fees.additionalFees || 0
 78:       totals.gst += transaction.pro.fees.gst + transaction.expert.fees.gst || 0
 79:       totals.subscription
 80:         += transaction.pro.fees.subscription + transaction.expert.fees.subscription || 0
 81:       totals.platform += transaction.pro.fees.platform + transaction.expert.fees.platform || 0
 82:     })
 83:     return totals
 84:   }, initialTotals)
 85: })
 86: 
 87: console.log('totalStripeTransactions', payments.value)
 88: 
 89: const razorpayPaymentTypes = ['Visa', 'MasterCard', 'UPI']
 90: 
 91: const razorpayTransactions = computed(() => {
 92:   if (!months.value || !payments.value) {
 93:     return []
 94:   }
 95: 
 96:   return razorpayPaymentTypes.reduce((acc, type) => {
 97:     const transactions = payments.value.flatMap((month) =>
 98:       month.razorpay.transactions.flatMap((transaction) =>
 99:         transaction.paymentMethod === type
100:           ? [
101:               {
102:                 totalCost: transaction.pro?.totalCost + transaction.expert?.totalCost || 0,
103:                 totalTransactions: transaction.methodCustomers || 0,
104:                 additionalFees:
105:                   transaction.pro?.fees?.additionalFees
106:                   + transaction.expert?.fees?.additionalFees || 0,
107:                 gst: transaction.pro?.fees?.gst + transaction.expert?.fees?.gst || 0,
108:                 subscription:
109:                   transaction.pro?.fees?.subscription + transaction.expert?.fees?.subscription || 0,
110:                 platform: transaction.pro?.fees?.platform + transaction.expert?.fees?.platform || 0,
111:               },
112:             ]
113:           : [],
114:       ),
115:     )
116: 
117:     // Calculate totals for each type and store them in the accumulator
118:     acc[type] = {
119:       transactions,
120:       totals: transactions.reduce(
121:         (totals, transaction) => {
122:           totals.totalCost += transaction.totalCost
123:           totals.totalTransactions += transaction.totalTransactions
124:           totals.additionalFees += transaction.additionalFees
125:           totals.gst += transaction.gst
126:           totals.subscription += transaction.subscription
127:           totals.platform += transaction.platform
128:           return totals
129:         },
130:         {
131:           totalCost: 0,
132:           totalTransactions: 0,
133:           additionalFees: 0,
134:           gst: 0,
135:           subscription: 0,
136:           platform: 0,
137:         },
138:       ),
139:     }
140: 
141:     return acc
142:   }, {})
143: })
144: 
145: console.log('razorpayTransactions', razorpayTransactions)
146: 
147: const totalRazorpayTransactions = computed(() => {
148:   const initialTotals = {
149:     totalCost: 0,
150:     totalTransactions: 0,
151:     additionalFees: 0,
152:     gst: 0,
153:     subscription: 0,
154:     platform: 0,
155:   }
156: 
157:   if (!months.value || !payments.value) {
158:     return []
159:   }
160: 
161:   return payments.value.reduce((totals, month) => {
162:     month.razorpay.transactions.forEach((transaction) => {
163:       totals.totalCost += transaction.pro.totalCost + transaction.expert.totalCost || 0
164:       totals.totalTransactions += transaction.methodCustomers || 0
165:       totals.additionalFees
166:         += transaction.pro.fees.additionalFees + transaction.expert.fees.additionalFees || 0
167:       totals.gst += transaction.pro.fees.gst + transaction.expert.fees.gst || 0
168:       totals.subscription
169:         += transaction.pro.fees.subscription + transaction.expert.fees.subscription || 0
170:       totals.platform += transaction.pro.fees.platform + transaction.expert.fees.platform || 0
171:     })
172:     return totals
173:   }, initialTotals)
174: })
175: 
176: const stripe = computed(() => {
177:   if (!months.value || !payments.value) {
178:     return []
179:   }
180: 
181:   return payments.value.flatMap((month) => month.stripe)
182: })
183: 
184: const razorpay = computed(() => {
185:   if (!months.value || !payments.value) {
186:     return []
187:   }
188: 
189:   return payments.value.flatMap((month) => month.razorpay)
190: })
191: 
192: const charts = computed(() => {
193:   if (!months.value || !payments.value) {
194:     return []
195:   }
196: 
197:   if (!months.value.length) {
198:     return []
199:   }
200: 
201:   return [
202:     {
203:       title: 'Payment Fee Breakdown',
204:       subtitle:
205:         'Shows the breakdown of payment fee costs by provider for the selected time period.',
206:       type: 'bar',
207:       data: {
208:         labels: [
209:           'Stripe Platform Fees',
210:           'Stripe Subscription Fees',
211:           'Stripe Extra Fees',
212:           'Razorpay Platform Fees',
213:           'Razorpay Subscription Fees',
214:           'Razorpay Extra Fees',
215:         ],
216:         datasets: [
217:           {
218:             label: 'Total Fees',
219:             valueType: 'currency',
220:             data: [
221:               totalStripeTransactions.value.platform,
222:               totalStripeTransactions.value.subscription,
223:               totalStripeTransactions.value.additionalFees,
224:               totalRazorpayTransactions.value.platform,
225:               totalRazorpayTransactions.value.subscription,
226:               totalRazorpayTransactions.value.additionalFees,
227:             ],
228:             backgroundColor: [
229:               rgba('lightGreen', 0.5),
230:               rgba('darkBlue', 0.5),
231:               rgba('lightBlue', 0.5),
232:               rgba('darkRed', 0.5),
233:               rgba('lightRed', 0.5),
234:               rgba('darkCyan', 0.5),
235:             ],
236:           },
237:         ],
238:       },
239:     },
240:     {
241:       title: 'Total Payment Costs by Provider',
242:       subtitle: 'Shows the total payment costs for Razorpay and Stripe over time.',
243:       type: 'bar',
244:       data: {
245:         labels: months.value,
246:         datasets: [
247:           {
248:             label: 'Razorpay Total Transactions',
249:             type: 'line',
250:             valueType: 'number',
251:             data: razorpay.value.flatMap((month) => month.totalCustomers),
252:             borderColor: rgba('darkOrange', 0.8),
253:             backgroundColor: rgba('black', 1),
254:           },
255:           {
256:             label: 'Stripe Total Transactions',
257:             type: 'line',
258:             valueType: 'number',
259:             data: stripe.value.flatMap((month) => month.totalCustomers),
260:             borderColor: rgba('darkBlue', 0.8),
261:             backgroundColor: rgba('black', 1),
262:           },
263:           {
264:             label: 'Razorpay Total Cost',
265:             valueType: 'currency',
266:             data: razorpay.value.flatMap((month) => month.totalCost),
267:             backgroundColor: rgba('darkOrange', 0.3),
268:           },
269:           {
270:             label: 'Stripe Total Cost',
271:             valueType: 'currency',
272:             data: stripe.value.flatMap((month) => month.totalCost),
273:             backgroundColor: rgba('darkBlue', 0.3),
274:           },
275:         ],
276:       },
277:     },
278:     {
279:       title: 'Domestic Payment Costs - Razorpay Totals',
280:       subtitle: 'Shows the costs for different domestic payment methods over time.',
281:       type: 'line',
282:       data: {
283:         labels: months.value,
284:         datasets: [
285:           {
286:             label: 'Visa Cost',
287:             valueType: 'currency',
288:             data: razorpayTransactions.value.Visa.transactions.map((m) => m.totalCost),
289:             borderColor: rgba('lightBlue', 0.5),
290:             backgroundColor: rgba('black', 1),
291:           },
292:           {
293:             label: 'MasterCard Cost',
294:             valueType: 'currency',
295:             data: razorpayTransactions.value.MasterCard.transactions.map((m) => m.totalCost),
296:             borderColor: rgba('lightGreen', 0.5),
297:             backgroundColor: rgba('black', 1),
298:           },
299:           {
300:             label: 'UPI Cost',
301:             valueType: 'currency',
302:             data: razorpayTransactions.value.UPI.transactions.map((m) => m.totalCost),
303:             borderColor: rgba('lightRed', 0.5),
304:             backgroundColor: rgba('black', 1),
305:           },
306:           {
307:             label: 'Domestic Transactions',
308:             type: 'bar',
309:             valueType: 'number',
310:             data: razorpay.value.map((m) => m.totalCustomers),
311:             borderColor: rgba('darkOrange', 0.5),
312:             backgroundColor: rgba('darkOrange', 0.2),
313:           },
314:         ],
315:       },
316:     },
317:     {
318:       title: 'Razorpay UPI Fees',
319:       subtitle: 'Domestic payment fees for UPI transactions.',
320:       type: 'bar',
321:       data: {
322:         labels: months.value,
323:         datasets: [
324:           {
325:             label: 'Total Transactions',
326:             type: 'line',
327:             valueType: 'number',
328:             data: razorpayTransactions.value.UPI.transactions.map((m) => m.totalTransactions),
329:             borderColor: rgba('darkGray', 0.5),
330:             backgroundColor: rgba('black', 1),
331:           },
332:           {
333:             label: 'Platform Fees',
334:             valueType: 'currency',
335:             data: razorpayTransactions.value.UPI.transactions.map((m) => m.platform),
336:             backgroundColor: rgba('darkRed', 0.5),
337:           },
338:           {
339:             label: 'Subscription Fees',
340:             valueType: 'currency',
341:             data: razorpayTransactions.value.UPI.transactions.map((m) => m.subscription),
342:             backgroundColor: rgba('darkOrange', 0.5),
343:             stack: 'stack1',
344:           },
345:           {
346:             label: 'GST Fees',
347:             valueType: 'currency',
348:             data: razorpayTransactions.value.UPI.transactions.map((m) => m.gst),
349:             backgroundColor: rgba('darkPurple', 0.5),
350:             stack: 'stack1',
351:           },
352:           {
353:             label: 'Extra Fees',
354:             valueType: 'currency',
355:             data: razorpayTransactions.value.UPI.transactions.map((m) => m.additionalFees),
356:             backgroundColor: rgba('darkBlue', 0.3),
357:             stack: 'stack1',
358:           },
359:         ],
360:       },
361:     },
362:     {
363:       title: 'Razorpay Visa Fees',
364:       subtitle: 'Domestic payment fees for Visa transactions.',
365:       type: 'bar',
366:       data: {
367:         labels: months.value,
368:         datasets: [
369:           {
370:             label: 'Total Transactions',
371:             type: 'line',
372:             valueType: 'number',
373:             data: razorpayTransactions.value.Visa.transactions.map((m) => m.totalTransactions),
374:             borderColor: rgba('darkGray', 0.5),
375:             backgroundColor: rgba('black', 1),
376:           },
377:           {
378:             label: 'Platform Fees',
379:             valueType: 'currency',
380:             data: razorpayTransactions.value.Visa.transactions.map((m) => m.platform),
381:             backgroundColor: rgba('darkRed', 0.5),
382:           },
383:           {
384:             label: 'Subscription Fees',
385:             valueType: 'currency',
386:             data: razorpayTransactions.value.Visa.transactions.map((m) => m.subscription),
387:             backgroundColor: rgba('darkOrange', 0.5),
388:             stack: 'stack1',
389:           },
390:           {
391:             label: 'GST Fees',
392:             valueType: 'currency',
393:             data: razorpayTransactions.value.Visa.transactions.map((m) => m.gst),
394:             backgroundColor: rgba('darkPurple', 0.5),
395:             stack: 'stack1',
396:           },
397:           {
398:             label: 'Extra Fees',
399:             valueType: 'currency',
400:             data: razorpayTransactions.value.Visa.transactions.map((m) => m.additionalFees),
401:             backgroundColor: rgba('darkBlue', 0.3),
402:             stack: 'stack1',
403:           },
404:         ],
405:       },
406:     },
407:     {
408:       title: 'Razorpay MasterCard Fees',
409:       subtitle: 'International payment fees for MasterCard transactions.',
410:       type: 'bar',
411:       data: {
412:         labels: months.value,
413:         datasets: [
414:           {
415:             label: 'Total Transactions',
416:             type: 'line',
417:             valueType: 'number',
418:             data: razorpayTransactions.value.MasterCard.transactions.flatMap(
419:               (m) => m.totalTransactions,
420:             ),
421:             borderColor: rgba('darkGray', 0.5),
422:             backgroundColor: rgba('black', 1),
423:           },
424:           {
425:             label: 'Platform Fees',
426:             valueType: 'currency',
427:             data: razorpayTransactions.value.MasterCard.transactions.flatMap((m) => m.platform),
428:             backgroundColor: rgba('darkRed', 0.7),
429:           },
430:           {
431:             label: 'Subscription Fees',
432:             valueType: 'currency',
433:             data: razorpayTransactions.value.MasterCard.transactions.flatMap((m) => m.subscription),
434:             backgroundColor: rgba('darkOrange', 0.5),
435:             stack: 'stack1',
436:           },
437:           {
438:             label: 'GST Fees',
439:             valueType: 'currency',
440:             data: razorpayTransactions.value.MasterCard.transactions.flatMap((m) => m.gst),
441:             backgroundColor: rgba('darkPurple', 0.5),
442:             stack: 'stack1',
443:           },
444:           {
445:             label: 'Extra Fees',
446:             valueType: 'currency',
447:             data: razorpayTransactions.value.Visa.transactions.flatMap((m) => m.additionalFees),
448:             backgroundColor: rgba('darkBlue', 0.3),
449:             stack: 'stack1',
450:           },
451:         ],
452:       },
453:     },
454:     {
455:       title: 'Stripe International Payments - Total Costs',
456:       subtitle: 'Shows the costs for different international payment methods over time.',
457:       type: 'line',
458:       data: {
459:         labels: months.value,
460:         datasets: [
461:           {
462:             label: 'MasterCard/Visa Cost',
463:             valueType: 'currency',
464:             data: stripeTransactions.value.MasterCardVisa.transactions.map((m) => m.totalCost),
465:             backgroundColor: rgba('black', 1),
466:             borderColor: rgba('darkBlue', 0.6),
467:           },
468:           {
469:             label: 'American Express Cost',
470:             valueType: 'currency',
471:             data: stripeTransactions.value.AmericanExpress.transactions.map((m) => m.totalCost),
472:             backgroundColor: rgba('black', 1),
473:             borderColor: rgba('lightGreen', 0.5),
474:           },
475:           {
476:             label: 'International Card Cost',
477:             valueType: 'currency',
478:             data: stripeTransactions.value.InternationalCard.transactions.map((m) => m.totalCost),
479:             backgroundColor: rgba('black', 1),
480:             borderColor: rgba('lightRed', 0.5),
481:           },
482:           {
483:             label: 'International Transactions',
484:             type: 'bar',
485:             valueType: 'number',
486:             data: stripe.value.map((m) => m.totalCustomers),
487:             borderColor: rgba('darkOrange', 0.5),
488:             backgroundColor: rgba('darkOrange', 0.2),
489:           },
490:         ],
491:       },
492:     },
493:     {
494:       title: 'Stripe International Card Fees',
495:       subtitle:
496:         'International payment fees from all non Visa/MasterCard/AmericanExpress transactions.',
497:       type: 'bar',
498:       data: {
499:         labels: months.value,
500:         datasets: [
501:           {
502:             label: 'Total Transactions',
503:             type: 'line',
504:             valueType: 'number',
505:             data: stripeTransactions.value.InternationalCard.transactions.flatMap(
506:               (m) => m.totalTransactions,
507:             ),
508:             borderColor: rgba('darkGray', 0.5),
509:             backgroundColor: rgba('black', 1),
510:           },
511:           {
512:             label: 'Platform Fees',
513:             valueType: 'currency',
514:             data: stripeTransactions.value.InternationalCard.transactions.map(
515:               (cost) => cost.platform,
516:             ),
517:             backgroundColor: rgba('darkRed', 0.5),
518:           },
519:           {
520:             label: 'Subscription Fees',
521:             valueType: 'currency',
522:             data: stripeTransactions.value.InternationalCard.transactions.map(
523:               (cost) => cost.subscription,
524:             ),
525:             backgroundColor: rgba('darkOrange', 0.5),
526:             stack: 'stack1',
527:           },
528:           {
529:             label: 'GST Fees',
530:             valueType: 'currency',
531:             data: stripeTransactions.value.InternationalCard.transactions.map((cost) => cost.gst),
532:             backgroundColor: rgba('darkPurple', 0.5),
533:             stack: 'stack1',
534:           },
535:           {
536:             label: 'Extra Fees',
537:             valueType: 'currency',
538:             data: stripeTransactions.value.InternationalCard.transactions.map(
539:               (cost) => cost.additionalFees,
540:             ),
541:             backgroundColor: rgba('darkBlue', 0.3),
542:             stack: 'stack1',
543:           },
544:         ],
545:       },
546:     },
547:     {
548:       title: 'Stripe MasterCard / Visa Fees',
549:       subtitle: 'International payment fees from all Visa MasterCard transactions.',
550:       type: 'bar',
551:       data: {
552:         labels: months.value,
553:         datasets: [
554:           {
555:             label: 'Total Transactions',
556:             type: 'line',
557:             valueType: 'number',
558:             data: stripeTransactions.value.MasterCardVisa.transactions.flatMap(
559:               (m) => m.totalTransactions,
560:             ),
561:             borderColor: rgba('darkGray', 0.5),
562:             backgroundColor: rgba('black', 1),
563:           },
564:           {
565:             label: 'Platform Fees',
566:             valueType: 'currency',
567:             data: stripeTransactions.value.MasterCardVisa.transactions.map((cost) => cost.platform),
568:             backgroundColor: rgba('darkRed', 0.7),
569:           },
570:           {
571:             label: 'Subscription Fees',
572:             valueType: 'currency',
573:             data: stripeTransactions.value.MasterCardVisa.transactions.map(
574:               (cost) => cost.subscription,
575:             ),
576:             backgroundColor: rgba('darkOrange', 0.5),
577:             stack: 'stack1',
578:           },
579:           {
580:             label: 'GST Fees',
581:             valueType: 'currency',
582:             data: stripeTransactions.value.MasterCardVisa.transactions.map((cost) => cost.gst),
583:             backgroundColor: rgba('darkPurple', 0.5),
584:             stack: 'stack1',
585:           },
586:           {
587:             label: 'Extra Fees',
588:             valueType: 'currency',
589:             data: stripeTransactions.value.MasterCardVisa.transactions.map(
590:               (cost) => cost.additionalFees,
591:             ),
592:             backgroundColor: rgba('darkBlue', 0.3),
593:             stack: 'stack1',
594:           },
595:         ],
596:       },
597:     },
598:     {
599:       title: 'Stripe AmericanExpress Fees',
600:       subtitle: 'International payment fees for AmericanExpress transactions.',
601:       type: 'bar',
602:       data: {
603:         labels: months.value,
604:         datasets: [
605:           {
606:             label: 'Total Transactions',
607:             type: 'line',
608:             valueType: 'number',
609:             data: stripeTransactions.value.AmericanExpress.transactions.flatMap(
610:               (m) => m.totalTransactions,
611:             ),
612:             borderColor: rgba('darkGray', 0.5),
613:             backgroundColor: rgba('black', 1),
614:           },
615:           {
616:             label: 'Platform Fees',
617:             valueType: 'currency',
618:             data: stripeTransactions.value.AmericanExpress.transactions.map(
619:               (cost) => cost.platform,
620:             ),
621:             backgroundColor: rgba('darkRed', 0.5),
622:           },
623:           {
624:             label: 'Subscription Fees',
625:             valueType: 'currency',
626:             data: stripeTransactions.value.AmericanExpress.transactions.map(
627:               (cost) => cost.subscription,
628:             ),
629:             backgroundColor: rgba('darkOrange', 0.5),
630:             stack: 'stack1',
631:           },
632:           {
633:             label: 'GST Fees',
634:             valueType: 'currency',
635:             data: stripeTransactions.value.AmericanExpress.transactions.map((cost) => cost.gst),
636:             backgroundColor: rgba('darkPurple', 0.5),
637:             stack: 'stack1',
638:           },
639:           {
640:             label: 'Extra Fees',
641:             valueType: 'currency',
642:             data: stripeTransactions.value.AmericanExpress.transactions.map(
643:               (cost) => cost.additionalFees,
644:             ),
645:             backgroundColor: rgba('darkBlue', 0.3),
646:             stack: 'stack1',
647:           },
648:         ],
649:       },
650:     },
651:   ]
652: })
653: </script>
654: 
655: <template>
656:   <FinancialCharts :charts="charts" />
657: </template>
658: 
659: <style scoped></style>
```

## File: apps/admin-dashboard/components/financial/Storage.vue
```vue
  1: <script setup lang="ts">
  2: const { months, storage, rgba } = useFinancials()
  3: 
  4: const storageDetails = computed(() => storage.value?.flatMap((m) => m.storage.data.details) || [])
  5: 
  6: const charts = computed(() => {
  7:   if (!months.value || !storage.value) {
  8:     return []
  9:   }
 10: 
 11:   return [
 12:     {
 13:       title: 'Storage Costs Breakdown',
 14:       subtitle: 'Shows the breakdown of storage costs for the selected time period.',
 15:       type: 'bar',
 16:       data: {
 17:         labels: [
 18:           'Storage Base Cost',
 19:           'Storage MAU Cost',
 20:           'Database Cost',
 21:           'Bandwidth Cost',
 22:           'File Storage Cost',
 23:           'Compute Cost',
 24:         ],
 25:         datasets: [
 26:           {
 27:             label: 'Total Storage Costs',
 28:             valueType: 'currency',
 29:             data: [
 30:               storage.value.flatMap((m) => m.storage.cost.base).reduce((a, b) => a + b, 0),
 31:               storage.value.flatMap((m) => m.storage.cost.mau).reduce((a, b) => a + b, 0),
 32:               storage.value.flatMap((m) => m.storage.cost.db).reduce((a, b) => a + b, 0),
 33:               storage.value.flatMap((m) => m.storage.cost.bandwidth).reduce((a, b) => a + b, 0),
 34:               storage.value.flatMap((m) => m.storage.cost.fileStorage).reduce((a, b) => a + b, 0),
 35:               storage.value.flatMap((m) => m.compute.cost.total).reduce((a, b) => a + b, 0),
 36:             ],
 37:             backgroundColor: [
 38:               rgba('lightGreen', 0.5),
 39:               rgba('darkBlue', 0.5),
 40:               rgba('lightBlue', 0.5),
 41:               rgba('darkRed', 0.5),
 42:               rgba('lightRed', 0.5),
 43:               rgba('darkCyan', 0.5),
 44:             ],
 45:           },
 46:         ],
 47:       },
 48:     },
 49:     {
 50:       title: 'Storage Data Breakdown',
 51:       subtitle: 'Shows the breakdown of storage data over time.',
 52:       type: 'line',
 53:       data: {
 54:         labels: months.value,
 55:         datasets: [
 56:           {
 57:             label: 'Database Data',
 58:             valueType: 'storage',
 59:             data: storage.value.flatMap((m) => m.storage.data.db),
 60:             borderColor: rgba('darkBlue', 0.5),
 61:             backgroundColor: rgba('darkBlue', 0.2),
 62:           },
 63:           {
 64:             label: 'Vector Data',
 65:             valueType: 'storage',
 66:             data: storage.value.flatMap((m) => m.storage.data.vector),
 67:             borderColor: rgba('darkRed', 0.5),
 68:             backgroundColor: rgba('darkRed', 0.2),
 69:           },
 70:         ],
 71:       },
 72:     },
 73:     {
 74:       title: 'Compute Costs',
 75:       subtitle: 'Shows the compute costs over time.',
 76:       type: 'line',
 77:       data: {
 78:         labels: months.value,
 79:         datasets: [
 80:           {
 81:             label: 'Hourly Cost',
 82:             valueType: 'currency',
 83:             data: storage.value.flatMap((m) => m.compute.cost.hourly),
 84:             borderColor: rgba('lightGreen', 0.5),
 85:             backgroundColor: rgba('lightGreen', 0.2),
 86:           },
 87:           {
 88:             label: 'Monthly Cost',
 89:             valueType: 'currency',
 90:             data: storage.value.flatMap((m) => m.compute.cost.monthly),
 91:             borderColor: rgba('lightBlue', 0.5),
 92:             backgroundColor: rgba('lightBlue', 0.2),
 93:           },
 94:         ],
 95:       },
 96:     },
 97:     {
 98:       title: 'Storage Requirements by Content Type',
 99:       subtitle: 'Shows the requirements of storage in GB by content type over time.',
100:       type: 'line',
101:       data: {
102:         labels: months.value,
103:         datasets: [
104:           {
105:             label: 'News',
106:             valueType: 'storage',
107:             data: storageDetails.value.flatMap((detail) =>
108:               detail.content.type === 'NEWS' ? detail.storage.total : [],
109:             ),
110:             borderColor: rgba('lightGreen', 0.5),
111:           },
112:           {
113:             label: 'Research Abstracts',
114:             valueType: 'storage',
115:             data: storageDetails.value.flatMap((detail) =>
116:               detail.content.type === 'RESEARCH_ABSTRACTS' ? detail.storage.total : [],
117:             ),
118:             borderColor: rgba('darkBlue', 0.5),
119:           },
120:           {
121:             label: 'Research Papers',
122:             valueType: 'storage',
123:             data: storageDetails.value.flatMap((detail) =>
124:               detail.content.type === 'RESEARCH_PAPERS' ? detail.storage.total : [],
125:             ),
126:             borderColor: rgba('lightBlue', 0.5),
127:           },
128:           {
129:             label: 'Jobs',
130:             valueType: 'storage',
131:             data: storageDetails.value.flatMap((detail) =>
132:               detail.content.type === 'JOBS' ? detail.storage.total : [],
133:             ),
134:             borderColor: rgba('darkRed', 0.5),
135:           },
136:           {
137:             label: 'Companies',
138:             valueType: 'storage',
139:             data: storageDetails.value.flatMap((detail) =>
140:               detail.content.type === 'COMPANIES' ? detail.storage.total : [],
141:             ),
142:             borderColor: rgba('lightRed', 0.5),
143:           },
144:         ],
145:       },
146:     },
147:     {
148:       title: 'Storage Costs vs. Data Usage',
149:       subtitle: 'Shows the correlation between storage costs and data usage over time.',
150:       type: 'line',
151:       data: {
152:         labels: months.value,
153:         datasets: [
154:           {
155:             label: 'Total Cost',
156:             valueType: 'number',
157:             data: storage.value.flatMap((m) => m.totalCost),
158:             borderColor: rgba('lightRed', 0.5),
159:             backgroundColor: rgba('lightRed', 0.2),
160:           },
161:           {
162:             label: 'Compute Cost',
163:             valueType: 'number',
164:             data: storage.value.flatMap((m) => m.compute.cost.total),
165:             borderColor: rgba('lightOrange', 0.5),
166:             backgroundColor: rgba('lightOrange', 0.2),
167:           },
168:           {
169:             label: 'Storage Cost',
170:             valueType: 'number',
171:             data: storage.value.flatMap((m) => m.storage.cost.total),
172:             borderColor: rgba('lightYellow', 0.5),
173:             backgroundColor: rgba('lightYellow', 0.2),
174:           },
175:           {
176:             label: 'Total Data',
177:             valueType: 'storage',
178:             type: 'bar',
179:             data: storage.value.flatMap((m) => m.storage.data.total),
180:             borderColor: rgba('darkGreen', 0.5),
181:             backgroundColor: rgba('darkGreen', 0.5),
182:           },
183:         ],
184:       },
185:     },
186:   ]
187: })
188: </script>
189: 
190: <template>
191:   <FinancialCharts :charts="charts" />
192: </template>
193: 
194: <style scoped></style>
```

## File: apps/admin-dashboard/components/financial/Totals.vue
```vue
  1: <script setup lang="ts">
  2: const {
  3:   months,
  4:   capital,
  5:   revenue,
  6:   totals,
  7:   metrics,
  8:   employees,
  9:   advertising,
 10:   affiliate,
 11:   promotion,
 12:   customers,
 13:   filteredData,
 14:   rgba,
 15: } = useFinancials()
 16: 
 17: const charts = computed(() => {
 18:   console.log('computed data', capital.value)
 19:   if (!capital.value) {
 20:     return []
 21:   }
 22: 
 23:   return [
 24:     {
 25:       id: 0,
 26:       title: 'Complete Costs Breakdown',
 27:       subtitle: 'Shows the breakdown of OpenAI costs for the selected time period.',
 28:       type: 'bar',
 29:       data: {
 30:         labels: [
 31:           'Employees Total',
 32:           'Software Cost',
 33:           'Office Total Cost',
 34:           'Loan Total Cost',
 35:           'Marketing Cost',
 36:           'Payments Cost',
 37:           'Storage Cost',
 38:           'DevOps Cost',
 39:           'Digital Ocean Total Cost',
 40:           'Logging Cost',
 41:           'Analytics Cost',
 42:           'OpenAI Total Cost',
 43:         ],
 44:         datasets: [
 45:           {
 46:             label: 'Expense Totals',
 47:             valueType: 'currency',
 48:             data: [
 49:               totals.value.flatMap((month) => month.employees).reduce((a, b) => a + b, 0),
 50:               totals.value.flatMap((month) => month.software).reduce((a, b) => a + b, 0),
 51:               totals.value.flatMap((month) => month.office).reduce((a, b) => a + b, 0),
 52:               totals.value.flatMap((month) => month.loan).reduce((a, b) => a + b, 0),
 53:               totals.value.flatMap((month) => month.marketing).reduce((a, b) => a + b, 0),
 54:               totals.value.flatMap((month) => month.payments).reduce((a, b) => a + b, 0),
 55:               totals.value.flatMap((month) => month.storage).reduce((a, b) => a + b, 0),
 56:               totals.value.flatMap((month) => month.devOps).reduce((a, b) => a + b, 0),
 57:               totals.value.flatMap((month) => month.digitalOcean).reduce((a, b) => a + b, 0),
 58:               totals.value.flatMap((month) => month.logging).reduce((a, b) => a + b, 0),
 59:               totals.value.flatMap((month) => month.analytics).reduce((a, b) => a + b, 0),
 60:               totals.value.flatMap((month) => month.openAI).reduce((a, b) => a + b, 0),
 61:             ],
 62:             backgroundColor: new Array(12).fill(rgba('darkBlue', 0.5)),
 63:           },
 64:         ],
 65:       },
 66:     },
 67:     {
 68:       id: 1,
 69:       title: 'Revenue Growth Over Time',
 70:       subtitle:
 71:         'Shows the increase in revenue, highlighting the business\'s financial health and growth potential.',
 72:       type: 'bar',
 73:       data: {
 74:         labels: months.value,
 75:         datasets: [
 76:           {
 77:             label: 'Burn Rate',
 78:             type: 'line',
 79:             valueType: 'currency',
 80:             data: capital.value.flatMap((month) => month.burnRate),
 81:             borderColor: rgba('darkOrange', 1),
 82:             backgroundColor: rgba('black', 1),
 83:           },
 84:           {
 85:             label: 'Effective Revenue',
 86:             valueType: 'currency',
 87:             data: totals.value.flatMap((month) => month.income.effective),
 88:             borderColor: rgba('lightGreen', 0.3),
 89:             backgroundColor: rgba('darkGreen', 0.3),
 90:           },
 91:           {
 92:             label: 'Expenses',
 93:             valueType: 'currency',
 94:             data: totals.value.flatMap((month) => month.expenses.total),
 95:             borderColor: rgba('lightRed', 0.3),
 96:             backgroundColor: rgba('darkRed', 0.3),
 97:           },
 98:         ],
 99:       },
100:     },
101:     {
102:       id: 2,
103:       title: 'Monthly Revenue Breakdown by Stream',
104:       subtitle:
105:         'Shows the diversity of revenue sources, highlighting multiple income streams which reduce financial risk.',
106:       type: 'bar',
107:       data: {
108:         labels: months.value,
109:         datasets: [
110:           {
111:             label: 'Advertising Revenue',
112:             valueType: 'currency',
113:             type: 'line',
114:             data: revenue.value.flatMap((month) => month.total.advertising),
115:             borderColor: rgba('darkCyan', 1),
116:             backgroundColor: rgba('black', 1),
117:           },
118:           {
119:             label: 'Affiliate Revenue',
120:             valueType: 'currency',
121:             type: 'line',
122:             data: revenue.value.flatMap((month) => month.total.affiliate),
123:             borderColor: rgba('darkOrange', 0.8),
124:             backgroundColor: rgba('black', 1),
125:           },
126:           {
127:             label: 'Promotion Revenue',
128:             valueType: 'currency',
129:             type: 'line',
130:             data: revenue.value.flatMap((month) => month.total.promotion),
131:             borderColor: rgba('darkYellow', 0.7),
132:             backgroundColor: rgba('black', 1),
133:           },
134:           {
135:             label: 'Pro Subscription Revenue',
136:             valueType: 'currency',
137:             stack: 'stack1',
138:             data: customers.value.flatMap((month) => month.pro.revenue),
139:             backgroundColor: rgba('darkGreen', 0.5),
140:           },
141:           {
142:             label: 'Expert Subscription Revenue',
143:             valueType: 'currency',
144:             stack: 'stack1',
145:             data: customers.value.flatMap((month) => month.expert.revenue),
146:             backgroundColor: rgba('darkBlue', 0.3),
147:           },
148:         ],
149:       },
150:     },
151:     {
152:       id: 3,
153:       title: 'Capital Balance and Burn Rate',
154:       subtitle:
155:         'Offers a comprehensive view of financial health by showing cash reserves against spending rates.',
156:       type: 'line',
157:       data: {
158:         labels: months.value,
159:         datasets: [
160:           {
161:             label: 'Capital Balance',
162:             valueType: 'currency',
163:             data: capital.value.flatMap((month) => month.balance.end),
164:             borderColor: rgba('lightGreen', 1),
165:             backgroundColor: rgba('black', 1),
166:           },
167:           {
168:             label: 'Burn Rate',
169:             valueType: 'currency',
170:             type: 'bar',
171:             data: capital.value.flatMap((month) => month.burnRate),
172:             borderColor: rgba('lightRed', 0.5),
173:             backgroundColor: rgba('darkRed', 0.3),
174:           },
175:         ],
176:       },
177:     },
178: 
179:     //
180:     {
181:       id: 4,
182:       title: 'Revenue and Expenses Forecast',
183:       subtitle:
184:         'Projects future financial performance, helping investors understand potential growth trajectories.',
185:       type: 'line',
186:       data: {
187:         labels: months.value,
188:         datasets: [
189:           {
190:             label: 'Effective Revenue',
191:             valueType: 'currency',
192:             data: totals.value.flatMap((month) => month.income.effective),
193:             borderColor: rgba('lightGreen', 0.5),
194:             backgroundColor: rgba('black', 1),
195:           },
196:           {
197:             label: 'Total Revenue',
198:             valueType: 'currency',
199:             data: revenue.value.flatMap((month) => month.total.revenue),
200:             borderColor: rgba('lightPurple', 0.5),
201:             backgroundColor: rgba('black', 1),
202:           },
203:           {
204:             label: 'Total Expenses',
205:             valueType: 'currency',
206:             data: totals.value.flatMap((month) => month.expenses.total),
207:             borderColor: rgba('lightRed', 0.5),
208:             backgroundColor: rgba('black', 1),
209:           },
210:           {
211:             label: 'Capital Balance',
212:             valueType: 'currency',
213:             data: capital.value.flatMap((month) => month.balance.end),
214:             type: 'bar',
215:             backgroundColor: rgba('darkBlue', 0.3),
216:           },
217:         ],
218:       },
219:     },
220:     // GROWTH
221:     {
222:       title: 'MAU vs Customers',
223:       subtitle: 'Demonstrates monthly active user acquisition and employee count over time.',
224:       type: 'line',
225:       data: {
226:         labels: months.value,
227:         datasets: [
228:           {
229:             label: 'MAU',
230:             valueType: 'users',
231:             data: metrics.value.flatMap((month) => month.mau.total),
232:             borderColor: rgba('lightGreen', 0.5),
233:             backgroundColor: rgba('darkGreen', 0.5),
234:           },
235:           {
236:             label: 'Customers',
237:             type: 'bar',
238:             valueType: 'users',
239:             data: metrics.value.flatMap((month) => month.mau.customers),
240:             borderColor: rgba('lightCyan', 0.5),
241:             backgroundColor: rgba('darkCyan', 0.5),
242:           },
243:         ],
244:       },
245:     },
246:     {
247:       title: 'Monthly vs. Annual Subscription Growth',
248:       subtitle:
249:         'Differentiates between short-term and long-term revenue streams, showcasing subscription stability.',
250:       type: 'line',
251:       data: {
252:         labels: months.value,
253:         datasets: [
254:           {
255:             label: 'Monthly Subscription Revenue',
256:             valueType: 'currency',
257:             data: metrics.value.flatMap((month) => month.monthlyRecurringRevenue.effective),
258:             borderColor: rgba('lightGreen', 0.5),
259:             backgroundColor: rgba('darkGreen', 0.5),
260:           },
261:           {
262:             label: 'Annual Subscription Revenue',
263:             valueType: 'currency',
264:             data: metrics.value.flatMap((month) => month.annualRecurringRevenue.effective),
265:             borderColor: rgba('lightBlue', 0.5),
266:             backgroundColor: rgba('darkBlue', 0.5),
267:           },
268:         ],
269:       },
270:     },
271:     {
272:       title: 'User Acquisition / Churn vs Employees',
273:       subtitle:
274:         'Tracks new, existing, and churned monthly active users, offering insights into user retention and acquisition strategies.',
275:       type: 'line',
276:       data: {
277:         labels: months.value,
278:         datasets: [
279:           {
280:             label: 'New Users',
281:             valueType: 'users',
282:             data: metrics.value.flatMap((month) => month.mau.new),
283:             borderColor: rgba('lightGreen', 0.5),
284:             backgroundColor: rgba('darkGreen', 0.5),
285:           },
286:           {
287:             label: 'Total Users',
288:             valueType: 'users',
289:             data: metrics.value.flatMap((month) => month.mau.total),
290:             borderColor: rgba('lightBlue', 0.5),
291:             backgroundColor: rgba('darkBlue', 0.5),
292:           },
293:           {
294:             label: 'Churned Users',
295:             valueType: 'users',
296:             data: metrics.value.flatMap((month) => month.mau.churned),
297:             borderColor: rgba('darkRed', 0.5),
298:             backgroundColor: rgba('darkRed', 0.5),
299:           },
300:           {
301:             label: 'Employees',
302:             valueType: 'employees',
303:             type: 'bar',
304:             data: employees.value.flatMap((month) => month.totalCount),
305:             borderColor: rgba('darkPurple', 0.3),
306:             backgroundColor: rgba('darkPurple', 0.3),
307:           },
308:         ],
309:       },
310:     },
311:     // METRICS
312:     {
313:       title: 'Monthly Recurring Revenue (MRR) and Annual Recurring Revenue (ARR) Trends',
314:       subtitle:
315:         'Highlights the predictability and stability of revenue, crucial for long-term financial planning.',
316:       type: 'line',
317:       data: {
318:         labels: months.value,
319:         datasets: [
320:           {
321:             label: 'MRR',
322:             valueType: 'currency',
323:             data: metrics.value.flatMap((month) => month.monthlyRecurringRevenue.effective),
324:             borderColor: rgba('darkGreen', 0.7),
325:             backgroundColor: rgba('black', 1),
326:           },
327:           {
328:             label: 'ARR',
329:             valueType: 'currency',
330:             data: metrics.value.flatMap((month) => month.annualRecurringRevenue.effective),
331:             borderColor: rgba('darkBlue', 0.7),
332:             backgroundColor: rgba('black', 1),
333:           },
334:           {
335:             label: 'Customers',
336:             valueType: 'users',
337:             type: 'bar',
338:             data: metrics.value.flatMap((month) => month.mau.customers),
339:             backgroundColor: rgba('darkOrange', 0.3),
340:           },
341:         ],
342:       },
343:     },
344:     {
345:       title: 'Gross Margin and Profit/Loss Margin',
346:       subtitle:
347:         'Demonstrates profitability and operational efficiency, key metrics for evaluating business viability.',
348:       type: 'line',
349:       data: {
350:         labels: months.value,
351:         datasets: [
352:           {
353:             label: 'Gross Margin',
354:             valueType: 'percentage',
355:             data: metrics.value.flatMap((month) => month.grossMargin),
356:             borderColor: rgba('lightGreen', 0.5),
357:             backgroundColor: rgba('darkGreen', 0.2),
358:           },
359:           {
360:             label: 'Profit/Loss Margin',
361:             valueType: 'percentage',
362:             data: metrics.value.flatMap((month) => month.profitLossMargin),
363:             borderColor: rgba('darkRed', 0.5),
364:             backgroundColor: rgba('darkRed', 0.2),
365:           },
366:         ],
367:       },
368:     },
369:     {
370:       title: 'Cost Per User',
371:       subtitle:
372:         'Measures the effectiveness of marketing expenditures in driving revenue, essential for optimizing marketing strategies.',
373:       type: 'line',
374:       data: {
375:         labels: months.value,
376:         datasets: [
377:           {
378:             label: 'Cost Per Free User',
379:             valueType: 'currency',
380:             data: metrics.value.flatMap((month) => month.userCost.free.singleCost),
381:             borderColor: rgba('lightRed', 0.5),
382:             backgroundColor: rgba('darkRed', 0.5),
383:           },
384:           {
385:             label: 'Cost Per Pro User',
386:             valueType: 'currency',
387:             data: metrics.value.flatMap((month) => month.userCost.pro.singleCost),
388:             borderColor: rgba('lightBlue', 0.5),
389:             backgroundColor: rgba('darkBlue', 0.5),
390:           },
391:           {
392:             label: 'Cost Per Expert User',
393:             valueType: 'currency',
394:             data: metrics.value.flatMap((month) => month.userCost.expert.singleCost),
395:             borderColor: rgba('lightGreen', 0.5),
396:             backgroundColor: rgba('darkGreen', 0.5),
397:           },
398:         ],
399:       },
400:     },
401:     {
402:       title: 'Churn Rate and Retention Rate',
403:       subtitle:
404:         'Provides insights into customer loyalty and satisfaction, critical for long-term growth.',
405:       type: 'bar',
406:       data: {
407:         labels: months.value,
408:         datasets: [
409:           {
410:             label: 'Total Churn Rate',
411:             valueType: 'percentage',
412:             data: metrics.value.flatMap((month) => month.churn.total.rate),
413:             backgroundColor: rgba('darkOrange', 0.5),
414:           },
415:           {
416:             label: 'Free Churn Rate',
417:             valueType: 'percentage',
418:             data: metrics.value.flatMap((month) => month.churn.free.rate),
419:             backgroundColor: rgba('darkOrange', 0.5),
420:           },
421:           {
422:             label: 'Pro Churn Rate',
423:             valueType: 'percentage',
424:             data: metrics.value.flatMap((month) => month.churn.pro.rate),
425:             backgroundColor: rgba('darkRed', 0.5),
426:           },
427:           {
428:             label: 'Expert Churn Rate',
429:             valueType: 'percentage',
430:             data: metrics.value.flatMap((month) => month.churn.expert.rate),
431:             backgroundColor: rgba('darkRed', 0.5),
432:           },
433:           {
434:             label: 'Free Retention Rate',
435:             type: 'line',
436:             valueType: 'percentage',
437:             data: metrics.value.flatMap((month) => month.retentionRate.free),
438:             backgroundColor: rgba('black', 1),
439:             borderColor: rgba('darkOrange', 0.5),
440:           },
441:           {
442:             label: 'Pro Retention Rate',
443:             type: 'line',
444:             valueType: 'percentage',
445:             data: metrics.value.flatMap((month) => month.retentionRate.pro),
446:             backgroundColor: rgba('black', 1),
447:             borderColor: rgba('darkRed', 0.5),
448:           },
449:           {
450:             label: 'Expert Retention Rate',
451:             type: 'line',
452:             valueType: 'percentage',
453:             data: metrics.value.flatMap((month) => month.retentionRate.expert),
454:             backgroundColor: rgba('black', 1),
455:             borderColor: rgba('darkRed', 0.5),
456:           },
457:         ],
458:       },
459:     },
460:     {
461:       title: 'Customer Lifetime Value (LTV) vs. Customer Acquisition Cost (CAC)',
462:       subtitle:
463:         'Shows the return on investment in acquiring customers, indicating business sustainability.',
464:       type: 'bar',
465:       scaleType: 'logarithmic',
466:       data: {
467:         labels: months.value,
468:         datasets: [
469:           {
470:             label: 'Customer Lifespan',
471: 
472:             valueType: 'months',
473:             type: 'line',
474:             data: metrics.value.flatMap((month) => month.customerLifespan.average),
475:             borderColor: rgba('lightPink', 0.5),
476:             backgroundColor: rgba('black', 1),
477:           },
478:           {
479:             label: 'LTV',
480:             valueType: 'currency',
481:             data: metrics.value.flatMap((month) => month.customerLifetimeValue.average),
482:             backgroundColor: rgba('lightGreen', 0.5),
483:           },
484:           {
485:             label: 'Free CAC',
486:             valueType: 'currency',
487:             data: metrics.value.flatMap((month) => month.customerAcquisitionCost.free),
488:             backgroundColor: rgba('lightRed', 0.5),
489:           },
490:           {
491:             label: 'Pro CAC',
492:             valueType: 'currency',
493:             data: metrics.value.flatMap((month) => month.customerAcquisitionCost.pro),
494:             backgroundColor: rgba('lightRed', 0.5),
495:           },
496:           {
497:             label: 'Expert CAC',
498:             valueType: 'currency',
499:             data: metrics.value.flatMap((month) => month.customerAcquisitionCost.expert),
500:             backgroundColor: rgba('lightRed', 0.5),
501:           },
502:         ],
503:       },
504:     },
505:   ]
506: })
507: </script>
508: 
509: <template>
510:   <FinancialCharts :charts="charts" />
511: </template>
512: 
513: <style scoped></style>
```

## File: apps/admin-dashboard/components/social/Instagram.vue
```vue
 1: <template>
 2:   <div class="p-4">
 3:     <h1 class="text-2xl font-bold mb-4"> Instagram Profile Metrics </h1>
 4:     <div
 5:       v-if="instagram"
 6:       class="mb-4"
 7:     >
 8:       <PrimeCard>
 9:         <template #header>
10:           <h2 class="text-xl font-semibold"> Profile Statistics </h2>
11:         </template>
12:         <p>Followers Count: {{ instagram.analytics.followers_count }}</p>
13:         <p>Media Count: {{ instagram.analytics.media_count }}</p>
14:         <p>Follows Count: {{ instagram.analytics.follows_count }}</p>
15:       </PrimeCard>
16:     </div>
17:     <div v-if="instagram && instagram.insights.length">
18:       <h2 class="text-xl font-semibold mb-2"> Recent Insights </h2>
19:       <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
20:         <PrimeCard
21:           v-for="insight in instagram.insights"
22:           :key="insight.id"
23:           class="w-full"
24:         >
25:           <template #header>
26:             <h3 class="text-lg font-medium">
27:               {{ insight.title }}
28:             </h3>
29:           </template>
30:           <p>Value: {{ insight.values[0].value }}</p>
31:           <p>Period: {{ insight.period }}</p>
32:           <p>End Time: {{ new Date(insight.values[0].end_time).toLocaleDateString() }}</p>
33:         </PrimeCard>
34:       </div>
35:     </div>
36:   </div>
37: </template>
38: 
39: <script setup lang="ts">
40: const props = defineProps({
41:   userId: {
42:     type: String,
43:     required: true,
44:   },
45: })
46: 
47: const social = useSocialStore()
48: const { instagram } = storeToRefs(social)
49: 
50: onMounted(() => {
51:   social.getInstagramAnalytics(props.userId)
52: })
53: </script>
54: 
55: <style scoped></style>
```

## File: apps/admin-dashboard/components/social/Linkedin.vue
```vue
 1: <template>
 2:   <div class="p-4">
 3:     <h1 class="text-2xl font-bold mb-4"> LinkedIn Page Analytics </h1>
 4:     <div
 5:       v-if="linkedin"
 6:       class="mb-4"
 7:     >
 8:       <PrimeCard>
 9:         <template #header>
10:           <h2 class="text-xl font-semibold"> Page Statistics </h2>
11:         </template>
12:         <p>Impressions: {{ linkedin.impressions }}</p>
13:         <p>Reactions: {{ linkedin.reactions }}</p>
14:         <p>Comments: {{ linkedin.comments }}</p>
15:         <p>Reposts: {{ linkedin.reposts }}</p>
16:       </PrimeCard>
17:     </div>
18:   </div>
19: </template>
20: 
21: <script setup lang="ts">
22: const props = defineProps({
23:   postId: {
24:     type: String,
25:     required: true,
26:   },
27: })
28: 
29: const social = useSocialStore()
30: const { linkedin } = storeToRefs(social)
31: 
32: onMounted(() => {
33:   social.getLinkedInAnalytics(props.postId)
34: })
35: </script>
36: 
37: <style scoped></style>
```

## File: apps/admin-dashboard/components/social/Overview.vue
```vue
 1: <template>
 2:   <div>
 3:     <h3> Overview dashboard </h3>
 4:     <PrimeMessage severity="info"> This is a work in progress </PrimeMessage>
 5:   </div>
 6: </template>
 7: 
 8: <script setup lang="ts"></script>
 9: 
10: <style scoped></style>
```

## File: apps/admin-dashboard/components/social/Twitter.vue
```vue
 1: <template>
 2:   <div class="p-4">
 3:     <h1 class="text-2xl font-bold mb-4"> Twitter Post Metrics </h1>
 4:     <div
 5:       v-if="twitter"
 6:       class="mb-4"
 7:     >
 8:       <PrimeCard>
 9:         <template #header>
10:           <h2 class="text-xl font-semibold"> Post Statistics </h2>
11:         </template>
12:         <p>Impressions: {{ twitter.impression_count }}</p>
13:         <p>Likes: {{ twitter.like_count }}</p>
14:         <p>Replies: {{ twitter.reply_count }}</p>
15:         <p>Retweets: {{ twitter.retweet_count }}</p>
16:         <p>Quote Tweets: {{ twitter.quote_count }}</p>
17:         <p>URL Link Clicks: {{ twitter.url_link_clicks }}</p>
18:         <p>User Profile Clicks: {{ twitter.user_profile_clicks }}</p>
19:       </PrimeCard>
20:     </div>
21:   </div>
22: </template>
23: 
24: <script setup lang="ts">
25: const props = defineProps({
26:   postId: {
27:     type: String,
28:     required: true,
29:   },
30: })
31: 
32: const social = useSocialStore()
33: const { twitter } = storeToRefs(social)
34: 
35: onMounted(() => {
36:   social.getTwitterAnalytics(props.postId)
37: })
38: </script>
39: 
40: <style scoped></style>
```

## File: apps/admin-dashboard/components/social/Youtube.vue
```vue
 1: <template>
 2:   <div class="p-4">
 3:     <h1 class="text-2xl font-bold mb-4"> YouTube Channel Metrics </h1>
 4:     <div
 5:       v-if="youtube"
 6:       class="mb-4"
 7:     >
 8:       <PrimeCard>
 9:         <template #header>
10:           <h2 class="text-xl font-semibold"> Channel Statistics </h2>
11:         </template>
12:         <p>Channel {{ youtube }}</p>
13:         <!-- <p>Subscriber Count: {{ youtube.subscriberCount }}</p>
14:         <p>Total Views: {{ youtube.viewCount }}</p>
15:         <p>Total Videos: {{ youtube.videoCount }}</p> -->
16:       </PrimeCard>
17:     </div>
18:     <div v-if="youtube && youtube?.videos?.length">
19:       <h2 class="text-xl font-semibold mb-2"> Recent Videos </h2>
20:       <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
21:         <PrimeCard
22:           v-for="video in youtube.videos"
23:           :key="video.id.videoId"
24:           class="w-full"
25:         >
26:           <template #header>
27:             <div class="flex items-center">
28:               <img
29:                 :src="video.snippet.thumbnails.default.url"
30:                 alt="Thumbnail"
31:                 class="w-16 h-16 mr-4"
32:               />
33:               <h3 class="text-lg font-medium">
34:                 {{ video.snippet.title }}
35:               </h3>
36:             </div>
37:           </template>
38:           <p>Published At: {{ new Date(video.snippet.publishedAt).toLocaleDateString() }}</p>
39:           <p v-if="video.statistics"> Views: {{ video.statistics.viewCount }} </p>
40:           <p v-if="video.statistics"> Likes: {{ video.statistics.likeCount }} </p>
41:         </PrimeCard>
42:       </div>
43:     </div>
44:   </div>
45: </template>
46: 
47: <script setup lang="ts">
48: const props = defineProps({
49:   id: {
50:     type: String,
51:     default: 'AstronEra',
52:   },
53: })
54: const social = useSocialStore()
55: const { youtube } = storeToRefs(social)
56: 
57: onMounted(() => {
58:   social.getYoutubeAnalytics(props.id)
59: })
60: </script>
61: 
62: <style scoped></style>
```

## File: apps/admin-dashboard/components/tasks/TasksCalendar.vue
```vue
  1: <script setup lang="ts">
  2: import FullCalendar from '@fullcalendar/vue3'
  3: import dayGridPlugin from '@fullcalendar/daygrid'
  4: import interactionPlugin from '@fullcalendar/interaction'
  5: 
  6: interface Employee {
  7:   id: number
  8:   name: string
  9: }
 10: 
 11: interface Subtask {
 12:   id: number
 13:   title: string
 14:   completed: boolean
 15: }
 16: 
 17: interface Task {
 18:   id: number
 19:   title: string
 20:   category: 'financial' | 'metrics' | 'hiring' | 'events' | 'development' | 'milestone'
 21:   assigneeId: number
 22:   gitHubIssueId?: number
 23:   recurrence?: {
 24:     frequency: 'daily' | 'weekly' | 'monthly' | 'yearly'
 25:     interval: number
 26:     endDate?: string
 27:   }
 28: }
 29: 
 30: interface Goal extends Task {
 31:   date: string
 32:   completed: boolean
 33:   milestoneId?: number
 34:   progress: number
 35:   priority: 'low' | 'medium' | 'high'
 36:   timeSpent: number // in minutes
 37:   description: string
 38:   subtasks: Subtask[]
 39: }
 40: 
 41: const showTimeTrackerModal = ref(false)
 42: const selectedGoal = ref<Goal | null>(null)
 43: const milestones = ref<Milestone[]>([])
 44: const toast = useNotification()
 45: const tasks = useTasks()
 46: 
 47: const goals = ref(tasks.goals.value)
 48: watch(
 49:   () => tasks.goals.value,
 50:   (newGoals) => {
 51:     goals.value = newGoals
 52:   },
 53: )
 54: 
 55: onMounted(async () => {
 56:   await tasks.fetchGoals()
 57:   await tasks.fetchMilestones()
 58:   // await tasks.updateGoalsWithDefaultValues()
 59: })
 60: 
 61: const employees = ref<Employee[]>([
 62:   { id: 0, name: 'Team' },
 63:   { id: 1, name: 'Shweta' },
 64:   { id: 2, name: 'Mac' },
 65:   { id: 3, name: 'Ruchera' },
 66:   { id: 4, name: 'Omkar' },
 67:   { id: 5, name: 'Ruturaj' },
 68: ])
 69: 
 70: const categories = [
 71:   { name: 'Financial', value: 'financial' },
 72:   { name: 'Metrics', value: 'metrics' },
 73:   { name: 'Hiring', value: 'hiring' },
 74:   { name: 'Events', value: 'events' },
 75:   { name: 'Development', value: 'development' },
 76:   { name: 'Milestone', value: 'milestone' },
 77: ]
 78: 
 79: const selectedEmployee = ref<Employee>({ id: 0, name: 'Team' })
 80: const dragDropEnabled = ref(false)
 81: 
 82: const showModal = ref(false)
 83: const editingGoal = ref<Goal | null>(null)
 84: const currentGoal = computed(
 85:   () =>
 86:     editingGoal.value ?? {
 87:       id: goals.value.length + 1,
 88:       title: '',
 89:       date: '',
 90:       category: 'events',
 91:       completed: false,
 92:       assigneeId: 0,
 93:     },
 94: )
 95: 
 96: const priorityFilter = ref('all')
 97: 
 98: const upcomingGoals = computed(() => {
 99:   const today = new Date()
100:   return goals.value
101:     .filter((goal) => !goal.completed && new Date(goal.date) >= today)
102:     .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
103:     .slice(0, 5)
104: })
105: 
106: function handleDateClick(arg: { dateStr: string }) {
107:   editingGoal.value = {
108:     id: goals.value.length + 1,
109:     title: '',
110:     date: arg.dateStr,
111:     category: 'events',
112:     assigneeId: employees.value[0].id,
113:     completed: false,
114:   }
115:   showModal.value = true
116: }
117: 
118: function handleEventClick(info: { event: { id: string } }) {
119:   console.log('eventzzz', info)
120:   const goal = goals.value.find((g) => g.id === parseInt(info.event.id))
121:   if (goal) {
122:     console.log('eventzzz', goal)
123:     selectedGoal.value = goal
124:     showTimeTrackerModal.value = true
125:     editingGoal.value = { ...goal }
126:     showModal.value = true
127:   }
128: }
129: 
130: const isNew = (goal: Goal) => !goals.value.some((g) => g.id === goal.id)
131: 
132: async function saveGoal(goal: Goal) {
133:   try {
134:     if (isNew(goal)) {
135:       await tasks.createGoal(goal)
136:       toast.success({ message: 'Goal created successfully', summary: 'Success' })
137:     } else {
138:       await tasks.updateGoal(goal)
139:       toast.success({ message: 'Goal updated successfully', summary: 'Success' })
140:     }
141:     await tasks.fetchGoals()
142:     showModal.value = false
143:   } catch (error) {
144:     toast.error({ message: `Failed to save goal: ${error.message}`, summary: 'Error' })
145:   }
146: }
147: 
148: async function deleteGoal(goal: Goal) {
149:   try {
150:     await tasks.deleteGoal(goal)
151:     toast.success({ message: 'Goal deleted successfully', summary: 'Success' })
152:     await tasks.fetchGoals()
153:     showModal.value = false
154:   } catch (error) {
155:     toast.error({ message: `Failed to delete goal: ${error.message}`, summary: 'Error' })
156:   }
157: }
158: 
159: function getEmployeeName(id: number): string {
160:   const employee = employees.value.find((emp) => emp.id === id)
161:   return employee ? employee.name : 'Unassigned'
162: }
163: 
164: const selectedEmployeeId = ref<number>(0)
165: 
166: watch(selectedEmployeeId, (newId) => {
167:   const selected = employees.value.find((e) => e.id === newId)
168:   if (selected) {
169:     filterByAssignee(selected)
170:   }
171: })
172: 
173: function filterByAssignee(employee: Employee) {
174:   console.log('Selected employee', employee)
175:   selectedEmployee.value = employee
176: }
177: 
178: const filteredGoals = computed(() => {
179:   let filtered = goals.value
180:   if (selectedEmployee.value?.id !== 0) {
181:     filtered = filtered.filter((goal) => goal.assigneeId === selectedEmployee.value?.id)
182:   }
183:   if (priorityFilter.value !== 'all') {
184:     filtered = filtered.filter((goal) => goal.priority === priorityFilter.value)
185:   }
186:   return filtered
187: })
188: 
189: function formatTime(minutes: number): string {
190:   const hours = Math.floor(minutes / 60)
191:   const mins = minutes % 60
192:   return `${hours}h ${mins}m`
193: }
194: 
195: const calendarOptions = computed(() => {
196:   const today = new Date()
197:   const start = new Date(today.getFullYear(), today.getMonth() - 1, 1) // Start of previous month
198:   const end = new Date(today.getFullYear() + 1, today.getMonth(), 0)
199: 
200:   return {
201:     plugins: [dayGridPlugin, interactionPlugin],
202:     initialView: 'dayGridYear',
203:     views: {
204:       dayGridYear: {
205:         displayEventTime: true,
206:         duration: { months: 13 },
207:         buttonText: '13 months',
208:       },
209:     },
210:     initialDate: today,
211:     timeZone: 'local',
212:     headerToolbar: {
213:       start: 'title',
214:       center: '',
215:       end: 'prev,next today',
216:       right: 'dayGridYear,dayGridMonth,dayGridWeek,dayGridDay', // user can switch between the two
217:     },
218:     events: filteredGoals.value.map((goal) => ({
219:       id: goal.id.toString(),
220:       title: goal.title,
221:       start: goal.date,
222:       end: goal.date,
223:       classNames: [goal.category, goal.completed ? 'completed' : '', `priority-${goal.priority}`],
224:       extendedProps: {
225:         assignee: getEmployeeName(goal.assigneeId),
226:         description: goal.description,
227:         subtasks: goal.subtasks,
228:         progress: goal.progress,
229:       },
230:     })),
231:     eventContent: (arg) => {
232:       const titleEl = document.createElement('div')
233:       titleEl.innerHTML = arg.event.title
234:       titleEl.style.fontWeight = 'bold'
235:       titleEl.style.marginBottom = '2px'
236: 
237:       const progressBar = document.createElement('div')
238:       progressBar.style.width = `${arg.event.extendedProps.progress}%`
239:       progressBar.style.height = '4px'
240:       progressBar.style.backgroundColor = 'rgba(255, 255, 255, 0.7)'
241:       progressBar.style.position = 'absolute'
242:       progressBar.style.bottom = '0'
243:       progressBar.style.left = '0'
244: 
245:       const timeSpent = document.createElement('div')
246:       timeSpent.innerHTML = `⏱️ ${formatTime(arg.event.extendedProps.timeSpent)}`
247:       timeSpent.style.fontSize = '0.8em'
248:       timeSpent.style.marginTop = '2px'
249: 
250:       const subtasksInfo = document.createElement('div')
251:       const completedSubtasks = arg.event.extendedProps.subtasks?.filter(
252:         (st) => st.completed,
253:       ).length
254:       const totalSubtasks = arg.event.extendedProps.subtasks.length
255:       subtasksInfo.innerHTML = `Subtasks: ${completedSubtasks}/${totalSubtasks}`
256:       subtasksInfo.style.fontSize = '0.8em'
257:       subtasksInfo.style.marginTop = '2px'
258: 
259:       return { domNodes: [titleEl, progressBar, timeSpent, subtasksInfo] }
260:     },
261:     dateClick: handleDateClick,
262:     eventClick: handleEventClick,
263:     height: 'auto',
264:     visibleRange: {
265:       start: start,
266:       end: end,
267:     },
268:     editable: dragDropEnabled,
269:     eventDrop: handleEventDrop,
270:     showNonCurrentDates: true,
271:     fixedWeekCount: false,
272:     dayMaxEvents: 2,
273:     firstDay: 1,
274:   }
275: })
276: 
277: function toggleGoalCompletion(goal: Goal) {
278:   goal.completed = !goal.completed
279:   if (goal.completed) {
280:     goal.subtasks = goal.subtasks.map((st) => ({ ...st, completed: true }))
281:   }
282:   tasks.updateGoal(goal)
283: }
284: 
285: async function handleEventDrop(dropInfo: any) {
286:   const { event } = dropInfo
287:   console.log('dropInfo', dropInfo)
288:   const goal = goals.value.find((g) => g.id.toString() === event.id)
289:   if (goal) {
290:     const droppedDate = new Date(event.start)
291:     console.log('drag 1', droppedDate)
292:     droppedDate.setDate(droppedDate.getDate() + 1)
293: 
294:     console.log('drag 2', droppedDate)
295: 
296:     const updatedGoal = {
297:       ...goal,
298:       date: droppedDate.toISOString().split('T')[0],
299:     }
300: 
301:     try {
302:       await tasks.updateGoal(updatedGoal)
303:       toast.success({ message: 'Goal date updated successfully', summary: 'Success' })
304:     } catch (error) {
305:       toast.error({ message: 'Failed to update goal date', summary: 'Error' })
306:       dropInfo.revert()
307:     }
308:   }
309: }
310: 
311: function toggleDragDrop() {
312:   dragDropEnabled.value = !dragDropEnabled.value
313:   toast.info({
314:     message: `Drag and drop is now ${dragDropEnabled.value ? 'enabled' : 'disabled'}`,
315:     summary: 'Info',
316:   })
317: }
318: 
319: async function fetchGitHubIssue(issueId: number) {
320:   // Replace with your actual GitHub API call
321:   const response = await fetch(`https://api.github.com/repos/your-repo/issues/${issueId}`)
322:   return await response.json()
323: }
324: 
325: // Function to open GitHub issue in a new tab
326: function openGitHubIssue(issueId: number) {
327:   window.open(`https://github.com/your-repo/issues/${issueId}`, '_blank')
328: }
329: 
330: function handleSubtaskUpdate(goalId: number, subtaskId: number, completed: boolean) {
331:   const goal = goals.value.find((g) => g.id === goalId)
332:   if (goal) {
333:     updateSubtaskCompletion(goal, subtaskId, completed)
334:   }
335: }
336: 
337: function updateSubtaskCompletion(goal: Goal, subtaskId: number, completed: boolean) {
338:   const updatedGoal = { ...goal }
339:   const subtaskIndex = updatedGoal.subtasks.findIndex((st) => st.id === subtaskId)
340:   if (subtaskIndex !== -1) {
341:     updatedGoal.subtasks[subtaskIndex].completed = completed
342:     updatedGoal.completed = updatedGoal.subtasks.every((st) => st.completed)
343:     tasks.updateGoal(updatedGoal)
344:   }
345: }
346: </script>
347: 
348: <template>
349:   <div class="company-goals-calendar h-full">
350:     <TasksUpcoming
351:       :goals="upcomingGoals"
352:       @toggle-completion="toggleGoalCompletion"
353:     />
354: 
355:     <TasksMilestones
356:       :goals="filteredGoals"
357:       :milestones="tasks.milestones"
358:     />
359: 
360:     <div class="assignee-filter mb-4">
361:       <PrimeSelect
362:         v-model="selectedEmployeeId"
363:         :options="[...employees]"
364:         option-label="name"
365:         option-value="id"
366:         placeholder="Select an assignee"
367:         @change="filterByAssignee"
368:       />
369:     </div>
370: 
371:     <PrimeSelect
372:       v-model="priorityFilter"
373:       :options="[
374:         { label: 'All', value: 'all' },
375:         { label: 'Low', value: 'low' },
376:         { label: 'Medium', value: 'medium' },
377:         { label: 'High', value: 'high' },
378:       ]"
379:       option-label="label"
380:       option-value="value"
381:       placeholder="Filter by priority"
382:       class="mb-4"
383:     />
384: 
385:     <PrimeButton
386:       :label="dragDropEnabled ? 'Disable Drag & Drop' : 'Enable Drag & Drop'"
387:       :class="{ 'p-button-success': dragDropEnabled, 'p-button-secondary': !dragDropEnabled }"
388:       class="mb-4"
389:       @click="toggleDragDrop"
390:     />
391: 
392:     <FullCalendar
393:       :options="calendarOptions"
394:       class="custom-calendar w-full"
395:     />
396: 
397:     <PrimeDialog
398:       v-model:visible="showModal"
399:       :modal="true"
400:       :header="editingGoal ? 'Edit Goal' : 'Create Goal'"
401:     >
402:       <TasksForm
403:         :goal="currentGoal"
404:         :employees="employees"
405:         :categories="categories"
406:         :milestones="tasks.milestones"
407:         :is-new="isNew(currentGoal)"
408:         @save="saveGoal"
409:         @delete="deleteGoal"
410:         @update-subtask="handleSubtaskUpdate"
411:       />
412:     </PrimeDialog>
413:   </div>
414: </template>
415: 
416: <style scoped>
417: .upcoming-goals {
418:   list-style-type: none;
419:   padding: 0;
420: }
421: 
422: .upcoming-goals li {
423:   margin-bottom: 10px;
424:   display: flex;
425:   justify-content: space-between;
426:   align-items: center;
427: }
428: 
429: .upcoming-goals li.completed span {
430:   text-decoration: line-through;
431:   color: #888;
432: }
433: 
434: .goal-form {
435:   display: flex;
436:   flex-direction: column;
437:   gap: 10px;
438: }
439: 
440: .goal-form input,
441: .goal-form select {
442:   padding: 5px;
443: }
444: 
445: :deep(.fc-daygrid-day-events) {
446:   padding: 2px;
447: }
448: 
449: :deep(.fc-event) {
450:   margin-bottom: 2px;
451:   line-height: 115%;
452:   white-space: nowrap;
453:   overflow: hidden;
454:   text-overflow: ellipsis;
455:   max-height: 60px; /* Approx. two lines of text */
456: }
457: 
458: :deep(.financial) {
459:   background-color: #4caf50;
460: }
461: 
462: :deep(.metrics) {
463:   background-color: #2196f3;
464: }
465: 
466: :deep(.hiring) {
467:   background-color: #ffc107;
468: }
469: 
470: :deep(.fc-day-disabled) {
471:   opacity: 0.08;
472:   background-color: #0084ff;
473:   pointer-events: none;
474: }
475: 
476: :deep(.fc-col-header-cell) {
477:   background-color: #245883 !important;
478:   border-color: #2196f3;
479: }
480: 
481: :deep(.fc-scrollgrid-section-header) {
482:   border-color: #245883 !important;
483: }
484: 
485: :deep(.events) {
486:   background-color: #9c27b0;
487: }
488: 
489: :deep(.completed) {
490:   opacity: 0.6;
491: }
492: 
493: .custom-calendar {
494:   min-height: 1500px;
495:   /* Header background color */
496:   --fc-theme-standard-header-bg-color: #3490dc;
497:   --fc-theme-standard-header-text-color: #ffffff;
498: 
499:   /* Border color */
500:   --fc-border-color: rgba(255, 255, 255, 0.1);
501: 
502:   /* Navigation button color */
503:   --fc-button-bg-color: #ffffff;
504:   --fc-button-border-color: #ffffff;
505:   --fc-button-text-color: #3490dc;
506:   --fc-button-hover-bg-color: #f8fafc;
507:   --fc-button-hover-border-color: #f8fafc;
508:   --fc-button-hover-text-color: #2779bd;
509: 
510:   /* Today button color */
511:   --fc-today-button-bg-color: #ffffff;
512:   --fc-today-button-border-color: #ffffff;
513:   --fc-today-button-text-color: #3490dc;
514:   --fc-today-button-hover-bg-color: #f8fafc;
515:   --fc-today-button-hover-border-color: #f8fafc;
516:   --fc-today-button-hover-text-color: #2779bd;
517: }
518: 
519: .custom-calendar .fc .fc-button {
520:   text-transform: capitalize;
521: }
522: 
523: :deep(.financial) {
524:   background-color: #4caf50;
525: }
526: :deep(.metrics) {
527:   background-color: #2196f3;
528: }
529: :deep(.hiring) {
530:   background-color: #ffc107;
531: }
532: :deep(.events) {
533:   background-color: #9c27b0;
534: }
535: :deep(.development) {
536:   background-color: #ff5722;
537: }
538: :deep(.milestone) {
539:   background-color: #795548;
540: }
541: :deep(.fc-event-title) {
542:   color: white;
543: }
544: 
545: :deep(.priority-low) {
546:   border-left: 4px solid #4caf50;
547: }
548: :deep(.priority-medium) {
549:   border-left: 4px solid #ffc107;
550: }
551: :deep(.priority-high) {
552:   border-left: 4px solid #f44336;
553: }
554: </style>
```

## File: apps/admin-dashboard/components/tasks/TasksForm.vue
```vue
  1: <script setup lang="ts">
  2: interface Subtask {
  3:   title: string
  4:   completed: boolean
  5: }
  6: 
  7: interface ExtendedGoal extends Goal {
  8:   subtasks: Subtask[]
  9: }
 10: 
 11: const props = defineProps<{
 12:   goal: ExtendedGoal
 13:   employees: Employee[]
 14:   categories: { name: string, value: string }[]
 15:   milestones: Milestone[]
 16:   isNew: boolean
 17: }>()
 18: 
 19: const emit = defineEmits<{
 20:   (e: 'save', goal: Goal): void
 21:   (e: 'delete', goal: Goal): void
 22:   (e: 'updateSubtask', goalId: number, subtaskId: number, completed: boolean): void
 23: }>()
 24: 
 25: const formData = ref<ExtendedGoal>({ ...props.goal, subtasks: props.goal.subtasks || [] })
 26: 
 27: watch(
 28:   () => props.goal,
 29:   (newGoal) => {
 30:     formData.value = { ...newGoal, subtasks: newGoal.subtasks || [] }
 31:   },
 32:   { deep: true },
 33: )
 34: 
 35: const progress = computed(() => {
 36:   if (formData.value.subtasks.length === 0) return 0
 37:   const completedSubtasks = formData.value.subtasks.filter((subtask) => subtask.completed).length
 38:   return Math.round((completedSubtasks / formData.value.subtasks.length) * 100)
 39: })
 40: 
 41: function handleSubmit() {
 42:   emit('save', formData.value)
 43: }
 44: 
 45: function updateSubtask(subtaskId: number, completed: boolean) {
 46:   const subtask = formData.value.subtasks.find((st) => st.id === subtaskId)
 47:   if (subtask) {
 48:     subtask.completed = completed
 49:     emit('updateSubtask', formData.value.id, subtaskId, completed)
 50:   }
 51: }
 52: 
 53: function addSubtask() {
 54:   formData.value.subtasks.push({
 55:     id: Date.now(), // Use a temporary ID
 56:     title: '',
 57:     completed: false,
 58:   })
 59: }
 60: 
 61: function removeSubtask(subtaskId: number) {
 62:   formData.value.subtasks = formData.value.subtasks.filter((st) => st.id !== subtaskId)
 63: }
 64: 
 65: function updateTimeSpent(time: number) {
 66:   formData.value.timeSpent = time
 67: }
 68: </script>
 69: 
 70: <template>
 71:   <form
 72:     class="flex gap-6 text-sm"
 73:     @submit.prevent="handleSubmit"
 74:   >
 75:     <!-- Left column: Title, Milestone, Description, and Subtasks -->
 76:     <div class="flex-grow">
 77:       <div class="mb-4">
 78:         <PrimeInputText
 79:           id="title"
 80:           v-model="formData.title"
 81:           placeholder="Goal title"
 82:           class="w-full text-2xl font-bold"
 83:           required
 84:         />
 85:       </div>
 86: 
 87:       <div class="mb-4">
 88:         <label
 89:           for="milestone"
 90:           class="mb-2 flex items-center font-medium"
 91:         >
 92:           <Icon
 93:             name="mdi:flag"
 94:             class="mr-2"
 95:           />
 96:           Milestone
 97:         </label>
 98:         <PrimeSelect
 99:           id="milestone"
100:           v-model="formData.milestoneId"
101:           :options="milestones"
102:           option-label="title"
103:           option-value="id"
104:           placeholder="Select a milestone"
105:           class="w-full"
106:         />
107:       </div>
108: 
109:       <div class="mb-4">
110:         <label
111:           for="description"
112:           class="mb-2 flex items-center font-medium"
113:         >
114:           <Icon
115:             name="mdi:text"
116:             class="mr-2"
117:           />
118:           Description
119:         </label>
120:         <PrimeTextarea
121:           id="description"
122:           v-model="formData.description"
123:           rows="6"
124:           auto-resize
125:           placeholder="Add a more detailed description..."
126:           class="w-full"
127:         />
128:       </div>
129: 
130:       <div class="mb-4">
131:         <h3 class="mb-2 flex items-center font-medium">
132:           <Icon
133:             name="mdi:checkbox-marked"
134:             class="mr-2"
135:           />
136:           Subtasks
137:         </h3>
138:         <ul class="space-y-2 pb-2">
139:           <li
140:             v-for="(subtask, index) in formData.subtasks"
141:             :key="index"
142:             class="flex items-center"
143:           >
144:             <PrimeCheckbox
145:               v-model="subtask.completed"
146:               :binary="true"
147:               class="mr-2"
148:               @change="updateSubtask(subtask.id, $event)"
149:             />
150:             <PrimeInputText
151:               v-model="subtask.title"
152:               class="flex-grow"
153:               placeholder="Subtask title"
154:             />
155:             <PrimeButton
156:               link
157:               @click="removeSubtask(index)"
158:             >
159:               <Icon
160:                 name="mdi:trash"
161:                 size="24px"
162:               />
163:             </PrimeButton>
164:           </li>
165:         </ul>
166:         <PrimeButton
167:           size="small"
168:           class="flex gap-2"
169:           @click="addSubtask"
170:         >
171:           <Icon
172:             name="mdi:plus"
173:             size="24px"
174:           />
175:           Add
176:         </PrimeButton>
177:       </div>
178:     </div>
179: 
180:     <!-- Right column: Other details -->
181:     <div class="w-64">
182:       <div class="mb-4">
183:         <label class="mb-2 flex items-center font-medium">
184:           <Icon
185:             name="mdi:progress-check"
186:             class="mr-2"
187:           />
188:           Progress
189:         </label>
190:         <PrimeProgressBar
191:           :value="progress"
192:           class="h-2"
193:         />
194:         <span class="text-sm text-gray-600">{{ progress }}% Complete</span>
195:       </div>
196: 
197:       <div class="mb-4">
198:         <label
199:           for="date"
200:           class="mb-2 flex items-center font-medium"
201:         >
202:           <Icon
203:             name="mdi:calendar"
204:             class="mr-2"
205:           />
206:           Due Date
207:         </label>
208:         <PrimeDatePicker
209:           id="date"
210:           v-model="formData.date"
211:           date-format="yy-mm-dd"
212:           :show-icon="true"
213:           class="w-full"
214:           required
215:         />
216:       </div>
217: 
218:       <div class="mb-4">
219:         <label
220:           for="category"
221:           class="mb-2 flex items-center font-medium"
222:         >
223:           <Icon
224:             name="mdi:tag"
225:             class="mr-2"
226:           />
227:           Category
228:         </label>
229:         <PrimeSelect
230:           id="category"
231:           v-model="formData.category"
232:           :options="categories"
233:           option-label="name"
234:           option-value="value"
235:           placeholder="Select a category"
236:           class="w-full"
237:         />
238:       </div>
239: 
240:       <div class="mb-4">
241:         <label
242:           for="priority"
243:           class="mb-2 flex items-center font-medium"
244:         >
245:           <Icon
246:             name="mdi:flag"
247:             class="mr-2"
248:           />
249:           Priority
250:         </label>
251:         <PrimeSelect
252:           id="priority"
253:           v-model="formData.priority"
254:           :options="[
255:             { label: 'Low', value: 'low' },
256:             { label: 'Medium', value: 'medium' },
257:             { label: 'High', value: 'high' },
258:           ]"
259:           option-label="label"
260:           option-value="value"
261:           placeholder="Select priority"
262:           class="w-full"
263:         />
264:       </div>
265: 
266:       <div class="mb-4">
267:         <label
268:           for="assignee"
269:           class="mb-2 flex items-center font-medium"
270:         >
271:           <Icon
272:             name="mdi:account"
273:             class="mr-2"
274:           />
275:           Assignee
276:         </label>
277:         <PrimeSelect
278:           id="assignee"
279:           v-model="formData.assigneeId"
280:           :options="employees"
281:           option-label="name"
282:           option-value="id"
283:           placeholder="Select an assignee"
284:           class="w-full"
285:         />
286:       </div>
287: 
288:       <div class="mb-4">
289:         <label class="mb-2 flex items-center font-medium">
290:           <Icon
291:             name="mdi:clock"
292:             class="mr-2"
293:           />
294:           Time Tracking
295:         </label>
296:         <TasksTimeTracker
297:           :goal="formData"
298:           @update:time-spent="updateTimeSpent"
299:         />
300:       </div>
301: 
302:       <div class="mt-6 flex justify-between">
303:         <PrimeButton
304:           type="submit"
305:           class="mr-2 w-full"
306:         >
307:           {{ isNew ? 'Create Goal' : 'Update Goal' }}
308:         </PrimeButton>
309:         <PrimeButton
310:           v-if="!isNew"
311:           type="button"
312:           severity="danger"
313:           class="ml-2 w-full"
314:           @click="$emit('delete', formData)"
315:         >
316:           Delete Goal
317:         </PrimeButton>
318:       </div>
319:     </div>
320:   </form>
321: </template>
```

## File: apps/admin-dashboard/components/tasks/TasksMilestones.vue
```vue
  1: <script setup lang="ts">
  2: import { ref, computed } from 'vue'
  3: 
  4: const props = defineProps<{
  5:   goals: Goal[]
  6:   milestones: Milestone[]
  7: }>()
  8: 
  9: const showMilestoneDetails = ref(false)
 10: const selectedMilestone = ref<Milestone | null>(null)
 11: 
 12: const getTasksForMilestone = computed(
 13:   () => (milestoneId: number) => props.goals.filter((goal) => goal.milestoneId === milestoneId),
 14: )
 15: 
 16: function calculateMilestoneProgress(milestoneId: number) {
 17:   const tasks = getTasksForMilestone.value(milestoneId)
 18:   if (tasks.length === 0) return 0
 19:   const totalProgress = tasks.reduce((sum, task) => sum + task.progress, 0)
 20:   return Math.round(totalProgress / tasks.length)
 21: }
 22: 
 23: function openMilestoneDetails(milestone: Milestone) {
 24:   selectedMilestone.value = milestone
 25:   showMilestoneDetails.value = true
 26: }
 27: </script>
 28: 
 29: <template>
 30:   <div class="milestone-overview">
 31:     <h2>Milestones</h2>
 32:     <ul class="milestone-list">
 33:       <li
 34:         v-for="milestone in milestones"
 35:         :key="milestone.id"
 36:         class="milestone-item"
 37:       >
 38:         <div
 39:           class="milestone-header"
 40:           @click="openMilestoneDetails(milestone)"
 41:         >
 42:           <h3>{{ milestone.title }}</h3>
 43:           <span>{{ getTasksForMilestone(milestone.id).length }} tasks</span>
 44:         </div>
 45:         <div class="progress-bar">
 46:           <div
 47:             class="progress"
 48:             :style="{ width: `${calculateMilestoneProgress(milestone.id)}%` }"
 49:           ></div>
 50:         </div>
 51:       </li>
 52:     </ul>
 53: 
 54:     <PrimeDialog
 55:       v-model:visible="showMilestoneDetails"
 56:       :header="selectedMilestone?.title"
 57:     >
 58:       <div v-if="selectedMilestone">
 59:         <p>{{ selectedMilestone.description }}</p>
 60:         <h4>Tasks:</h4>
 61:         <ul>
 62:           <li
 63:             v-for="task in getTasksForMilestone(selectedMilestone.id)"
 64:             :key="task.id"
 65:           >
 66:             {{ task.title }} ({{ task.progress }}% complete)
 67:           </li>
 68:         </ul>
 69:       </div>
 70:     </PrimeDialog>
 71:   </div>
 72: </template>
 73: 
 74: <style scoped>
 75: .milestone-list {
 76:   list-style-type: none;
 77:   padding: 0;
 78: }
 79: 
 80: .milestone-item {
 81:   margin-bottom: 10px;
 82: }
 83: 
 84: .milestone-header {
 85:   display: flex;
 86:   justify-content: space-between;
 87:   align-items: center;
 88:   cursor: pointer;
 89: }
 90: 
 91: .progress-bar {
 92:   background-color: #056993;
 93:   height: 20px;
 94:   border-radius: 5px;
 95:   overflow: hidden;
 96: }
 97: 
 98: .progress {
 99:   background-color: #4caf50;
100:   height: 100%;
101: }
102: </style>
```

## File: apps/admin-dashboard/components/tasks/TasksTimeTracker.vue
```vue
 1: <script setup lang="ts">
 2: const props = defineProps<{
 3:   goal: Goal
 4: }>()
 5: 
 6: const emit = defineEmits<{
 7:   (e: 'update:timeSpent', time: number): void
 8: }>()
 9: 
10: const isTracking = ref(false)
11: let timer: NodeJS.Timeout | null = null
12: let startTime: number
13: 
14: const startGlobalTimer = inject('startGlobalTimer') as (taskTitle: string) => void
15: const stopGlobalTimer = inject('stopGlobalTimer') as () => void
16: 
17: function startTimer() {
18:   if (import.meta.client) {
19:     isTracking.value = true
20:     startTime = Date.now()
21:     timer = setInterval(() => {
22:       const elapsed = Math.floor((Date.now() - startTime) / 60000)
23:       emit('update:timeSpent', props.goal.timeSpent + elapsed)
24:     }, 60000)
25:     startGlobalTimer(props.goal.title)
26:   }
27: }
28: 
29: function stopTimer() {
30:   if (timer) {
31:     clearInterval(timer)
32:     const elapsed = Math.floor((Date.now() - startTime) / 60000)
33:     emit('update:timeSpent', props.goal.timeSpent + elapsed)
34:   }
35:   isTracking.value = false
36:   stopGlobalTimer()
37: }
38: 
39: function formatTime(minutes: number) {
40:   const hours = Math.floor(minutes / 60)
41:   const remainingMinutes = minutes % 60
42:   return `${hours}h ${remainingMinutes}m`
43: }
44: </script>
45: 
46: <template>
47:   <div class="flex flex-col space-y-2">
48:     <h3 class="text-lg font-semibold"> Time Spent: {{ formatTime(goal.timeSpent) }} </h3>
49:     <div class="flex space-x-2">
50:       <PrimeButton
51:         class="rounded-full bg-green-500 p-2 hover:bg-green-600"
52:         @click="startTimer"
53:       >
54:         <Icon
55:           name="mdi:play"
56:           size="24px"
57:         />
58:       </PrimeButton>
59:       <PrimeButton
60:         class="rounded-full bg-red-500 p-2 hover:bg-red-600"
61:         @click="stopTimer"
62:       >
63:         <Icon
64:           name="mdi:stop"
65:           size="24px"
66:         />
67:       </PrimeButton>
68:     </div>
69:   </div>
70: </template>
```

## File: apps/admin-dashboard/components/tasks/TasksUpcoming.vue
```vue
 1: <script setup lang="ts">
 2: defineProps<{
 3:   goals: Goal[]
 4: }>()
 5: 
 6: const emits = defineEmits<{
 7:   (e: 'toggle-completion', goal: Goal): void
 8: }>()
 9: </script>
10: 
11: <template>
12:   <PrimeFieldset
13:     legend="Upcoming Goals"
14:     :toggleable="true"
15:     collapsed
16:   >
17:     <ul class="upcoming-goals">
18:       <li
19:         v-for="goal in goals"
20:         :key="goal.id"
21:         :class="{ completed: goal.completed }"
22:       >
23:         <span>{{ goal.title }} ({{ goal.date }})</span>
24:         <PrimeButton @click="$emit('toggle-completion', goal)">
25:           {{ goal.completed ? 'Undo' : 'Complete' }}
26:         </PrimeButton>
27:       </li>
28:     </ul>
29:   </PrimeFieldset>
30: </template>
31: 
32: <style scoped>
33: .upcoming-goals {
34:   list-style-type: none;
35:   padding: 0;
36: }
37: 
38: .upcoming-goals li {
39:   margin-bottom: 10px;
40:   display: flex;
41:   justify-content: space-between;
42:   align-items: center;
43: }
44: 
45: .upcoming-goals li.completed span {
46:   text-decoration: line-through;
47:   color: #888;
48: }
49: </style>
```

## File: apps/admin-dashboard/components/AdminTools.vue
```vue
 1: <template>
 2:   <div
 3:     class="fixed bottom-5 right-5 z-50 flex cursor-pointer gap-2 rounded-full bg-blue-500 p-3 text-white"
 4:   >
 5:     <IBGlobalTimer ref="globalTimer" />
 6:   </div>
 7: </template>
 8: 
 9: <script setup lang="ts">
10: const showPlayground = ref(true)
11: 
12: // You might want to add a method to toggle the playground
13: const togglePlayground = () => {
14:   showPlayground.value = !showPlayground.value
15: }
16: 
17: const globalTimer = ref<InstanceType<typeof IBGlobalTimer> | null>(null)
18: 
19: function startGlobalTimer(taskTitle: string) {
20:   globalTimer.value?.showTimer(taskTitle)
21: }
22: 
23: function stopGlobalTimer() {
24:   globalTimer.value?.stopTimer()
25: }
26: 
27: provide('startGlobalTimer', startGlobalTimer)
28: provide('stopGlobalTimer', stopGlobalTimer)
29: </script>
30: 
31: <style scoped></style>
```

## File: apps/admin-dashboard/components/BusinessPlan.client.vue
```vue
  1: <script setup lang="ts">
  2: const props = defineProps({
  3:   bpSection: {
  4:     type: String,
  5:     required: true,
  6:   },
  7: })
  8: 
  9: const { error, data: bpMarkdown } = await useLazyAsyncData(`business-plan-${props.bpSection}`, () =>
 10:   queryContent('/bp')
 11:     .where({ section: { $eq: props.bpSection } })
 12:     .findOne(),
 13: )
 14: 
 15: if (error.value) {
 16:   console.error(error.value)
 17: }
 18: 
 19: console.log('bpMarkdown', bpMarkdown)
 20: </script>
 21: 
 22: <template>
 23:   <div class="mx-auto overflow-x-hidden p-4 md:p-6">
 24:     <MDC
 25:       v-if="bpMarkdown"
 26:       :value="bpMarkdown"
 27:       tag="article"
 28:       class="list-item-primary-700 background custom-content prose prose-lg marker:text-primary-700 prose-headings:no-underline prose-h1:border-b-0 prose-h2:border-b-0 prose-h3:border-b-0 prose-h4:border-b-0 prose-h5:border-b-0 prose-h6:border-b-0 mx-auto w-full rounded-md p-8 marker:h-3 marker:w-3"
 29:     />
 30:   </div>
 31: </template>
 32: 
 33: <style>
 34: .custom-content {
 35:   color: #c8c8c8;
 36:   line-height: 1.6;
 37:   font-family: 'Arial', sans-serif;
 38:   max-width: 700px !important;
 39: }
 40: 
 41: /* Heading styles */
 42: .custom-content h1,
 43: .custom-content h2,
 44: .custom-content h3,
 45: .custom-content h4,
 46: .custom-content h5,
 47: .custom-content h6 {
 48:   color: #0d7daa;
 49: }
 50: 
 51: .custom-content h1 a,
 52: .custom-content h2 a,
 53: .custom-content h3 a,
 54: .custom-content h4 a,
 55: .custom-content h5 a,
 56: .custom-content h6 a {
 57:   font-weight: bold;
 58:   color: #0d7daa;
 59:   text-decoration: none !important;
 60: }
 61: 
 62: /* Bold text */
 63: .custom-content strong {
 64:   color: #957137;
 65: }
 66: 
 67: /* List items */
 68: .custom-content li {
 69:   color: #c8c8c8;
 70: }
 71: 
 72: .custom-content ul {
 73:   list-style-type: none;
 74: }
 75: 
 76: .custom-content ul li::before {
 77:   content: '💡'; /* You can use any character or emoji here */
 78:   color: #f2f4f6; /* Choose your desired color */
 79:   display: inline-block;
 80:   width: 1em;
 81:   margin-left: -1em;
 82:   margin-right: 0.5em;
 83: }
 84: 
 85: li::marker {
 86:   color: rgb(255, 255, 255) !important;
 87: }
 88: 
 89: /* Override max-width for specific elements */
 90: .custom-content > table,
 91: .custom-content > img {
 92:   background-color: #1e1e1e;
 93:   max-width: none !important;
 94:   width: auto !important;
 95:   position: relative !important;
 96:   margin-left: -30% !important;
 97:   margin-right: -30% !important;
 98: }
 99: 
100: .custom-content table {
101:   display: block;
102:   overflow-x: auto;
103:   white-space: nowrap;
104:   border-collapse: separate;
105:   border-spacing: 0;
106:   margin: 2em 0;
107: }
108: 
109: .custom-content th,
110: .custom-content td {
111:   min-width: 120px;
112:   padding: 12px 16px;
113:   border: 1px solid #1a1a1a;
114:   text-align: left;
115: }
116: 
117: .custom-content th {
118:   background-color: #79bbdd82;
119:   font-weight: bold;
120: }
121: 
122: .custom-content tr:nth-child(even) {
123:   background-color: #67676731;
124: }
125: 
126: .custom-content pre {
127:   overflow-x: auto;
128:   white-space: pre-wrap;
129:   word-wrap: break-word;
130:   background-color: #1e1e1e;
131:   border-radius: 4px;
132:   padding: 1em;
133:   font-family: 'Consolas', 'Monaco', monospace;
134: }
135: 
136: .custom-content img {
137:   max-width: 100%;
138:   height: auto;
139:   display: block;
140:   margin: 2em auto;
141: }
142: 
143: @media (max-width: 640px) {
144:   .custom-content {
145:     font-size: 16px;
146:   }
147: }
148: </style>
```

## File: apps/admin-dashboard/components/BusinessSystems.vue
```vue
 1: <template>
 2:   <div v-if="diagram">
 3:     <ContentRenderer :value="diagram">
 4:       <div class="prose prose-invert mx-auto pt-10">
 5:         <ContentRendererMarkdown :value="diagram" />
 6:       </div>
 7:     </ContentRenderer>
 8:   </div>
 9: </template>
10: 
11: <script setup lang="ts">
12: const props = defineProps({
13:   systemName: {
14:     type: String,
15:     required: true,
16:   },
17: })
18: 
19: const { data: diagram } = await useAsyncData(`diagram-${props.systemName}`, () =>
20:   queryContent(`/systems/${props.systemName}`).findOne(),
21: )
22: </script>
```

## File: apps/admin-dashboard/components/DatabaseMetrics.vue
```vue
  1: <script setup lang="ts">
  2: import { ref, computed } from 'vue'
  3: 
  4: interface TimePeriod {
  5:   name: string
  6:   value: string
  7: }
  8: 
  9: interface TableOption {
 10:   name: string
 11:   value: string
 12: }
 13: 
 14: interface GrowthData {
 15:   period_end_time: string
 16:   row_count: number
 17:   growth_count: number
 18:   growth_percentage: number
 19: }
 20: 
 21: const supabase = useSupabaseClient()
 22: 
 23: const tables: TableOption[] = [
 24:   { name: 'Companies', value: 'companies' },
 25:   { name: 'Company URLs', value: 'company_urls' },
 26:   { name: 'News', value: 'news' },
 27:   { name: 'Users', value: 'user_profiles' },
 28: ]
 29: 
 30: const timePeriods: TimePeriod[] = [
 31:   { name: 'Day', value: '1 day' },
 32:   { name: 'Week', value: '1 week' },
 33:   { name: 'Month', value: '1 month' },
 34:   { name: 'Quarter', value: '3 months' },
 35:   { name: 'Year', value: '1 year' },
 36: ]
 37: 
 38: const selectedTable = ref<string>('companies')
 39: const selectedTimePeriod = ref<string>('1 day')
 40: const numPeriods = ref<number>(6)
 41: const growthData = ref<GrowthData[]>([])
 42: const loading = ref<boolean>(false)
 43: const error = ref<string | null>(null)
 44: 
 45: const dummyCalculateTableGrowth = (
 46:   tableName: string,
 47:   timePeriod: string,
 48:   numPeriods: number,
 49: ): Promise<{ data: GrowthData[], error: any }> => {
 50:   return new Promise((resolve) => {
 51:     setTimeout(() => {
 52:       const baseCount
 53:         = {
 54:           companies: 1000,
 55:           users: 10000,
 56:           products: 5000,
 57:         }[tableName] || 1000
 58: 
 59:       const growthRates = {
 60:         '1 day': 0.01,
 61:         '1 week': 0.05,
 62:         '1 month': 0.1,
 63:         '3 months': 0.2,
 64:         '1 year': 0.5,
 65:       }
 66: 
 67:       const baseGrowthRate = growthRates[timePeriod] || 0.01
 68:       const variability = 0.5 // 50% variability in growth rate
 69: 
 70:       const data: GrowthData[] = []
 71:       let currentCount = baseCount
 72: 
 73:       for (let i = 0; i < numPeriods; i++) {
 74:         const growthRate = baseGrowthRate * (1 + (Math.random() - 0.5) * variability)
 75:         const growthCount = Math.round(currentCount * growthRate)
 76:         const newCount = currentCount + growthCount
 77: 
 78:         data.push({
 79:           period_end_time: new Date(Date.now() - i * getMilliseconds(timePeriod)).toISOString(),
 80:           row_count: newCount,
 81:           growth_count: growthCount,
 82:           growth_percentage: growthRate * 100,
 83:         })
 84: 
 85:         currentCount = newCount
 86:       }
 87: 
 88:       resolve({ data: data.reverse(), error: null })
 89:     }, 500) // Simulate network delay
 90:   })
 91: }
 92: 
 93: const getMilliseconds = (period: string): number => {
 94:   const ms = {
 95:     '1 day': 24 * 60 * 60 * 1000,
 96:     '1 week': 7 * 24 * 60 * 60 * 1000,
 97:     '1 month': 30 * 24 * 60 * 60 * 1000,
 98:     '3 months': 90 * 24 * 60 * 60 * 1000,
 99:     '1 year': 365 * 24 * 60 * 60 * 1000,
100:   }
101:   return ms[period] || ms['1 day']
102: }
103: 
104: const fetchData = async () => {
105:   loading.value = true
106:   error.value = null
107:   try {
108:     const { data, error: rpcError } = await dummyCalculateTableGrowth(
109:       selectedTable.value,
110:       selectedTimePeriod.value,
111:       numPeriods.value,
112:     )
113: 
114:     // await supabase.rpc('calculate_table_growth', {
115:     //   p_table_name: selectedTable.value,
116:     //   p_time_period: selectedTimePeriod.value,
117:     //   p_num_periods: numPeriods.value
118:     // })
119:     if (rpcError) throw rpcError
120:     growthData.value = data
121:   } catch (err) {
122:     error.value = 'Failed to fetch growth data'
123:     console.error(err)
124:   }
125:   loading.value = false
126: }
127: 
128: const calculateTotalGrowth = () => {
129:   return growthData.value.reduce((total, period) => total + period.growth_count, 0)
130: }
131: 
132: const calculateAverageGrowthRate = () => {
133:   const totalGrowthRate = growthData.value.reduce(
134:     (total, period) => total + period.growth_percentage,
135:     0,
136:   )
137:   return totalGrowthRate / (growthData.value.length - 1) // Exclude the first period as it's always 0
138: }
139: 
140: const chartData = computed(() => ({
141:   labels: growthData.value.map((d) => new Date(d.period_end_time).toLocaleDateString()).reverse(),
142:   datasets: [
143:     {
144:       label: 'Row Count',
145:       data: growthData.value.map((d) => d.row_count).reverse(),
146:       borderColor: '#42A5F5',
147:       tension: 0.4,
148:     },
149:     {
150:       label: 'Growth Percentage',
151:       data: growthData.value.map((d) => d.growth_percentage).reverse(),
152:       borderColor: '#66BB6A',
153:       tension: 0.4,
154:     },
155:   ],
156: }))
157: 
158: const chartOptions = {
159:   responsive: true,
160:   maintainAspectRatio: false,
161:   scales: {
162:     y: {
163:       beginAtZero: true,
164:     },
165:   },
166: }
167: 
168: const exportToCSV = () => {
169:   const headers = ['Period End Time', 'Row Count', 'Growth Count', 'Growth Percentage']
170:   const csvContent = [
171:     headers.join(','),
172:     ...growthData.value.map((row) =>
173:       [row.period_end_time, row.row_count, row.growth_count, row.growth_percentage].join(','),
174:     ),
175:   ].join('\n')
176: 
177:   const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
178:   const link = document.createElement('a')
179:   if (link.download !== undefined) {
180:     const url = URL.createObjectURL(blob)
181:     link.setAttribute('href', url)
182:     link.setAttribute('download', `${selectedTable.value}_growth_data.csv`)
183:     link.style.visibility = 'hidden'
184:     document.body.appendChild(link)
185:     link.click()
186:     document.body.removeChild(link)
187:   }
188: }
189: </script>
190: 
191: <template>
192:   <div class="p-4">
193:     <h1 class="mb-4 text-2xl font-bold"> Table Growth </h1>
194: 
195:     <div class="mb-4 flex flex-wrap gap-4">
196:       <PrimeSelect
197:         v-model="selectedTable"
198:         :options="tables"
199:         option-label="name"
200:         option-value="value"
201:         placeholder="Select Table"
202:       />
203:       <PrimeSelect
204:         v-model="selectedTimePeriod"
205:         :options="timePeriods"
206:         option-label="name"
207:         option-value="value"
208:         placeholder="Select Time Period"
209:       />
210:       <PrimeInputNumber
211:         v-model="numPeriods"
212:         :min="1"
213:         :max="10"
214:         placeholder="Number of Periods"
215:       />
216:       <PrimeButton
217:         label="Fetch Data"
218:         @click="fetchData"
219:       />
220:       <PrimeButton
221:         label="Export to CSV"
222:         @click="exportToCSV"
223:       />
224:     </div>
225: 
226:     <PrimeMessage
227:       v-if="loading"
228:       severity="info"
229:       :life="3000"
230:     >
231:       Loading data...
232:     </PrimeMessage>
233:     <PrimeMessage
234:       v-if="error"
235:       severity="error"
236:       :closable="true"
237:     >
238:       {{ error }}
239:     </PrimeMessage>
240: 
241:     <div
242:       v-if="growthData.length"
243:       class="mb-4 grid grid-cols-1 gap-4 md:grid-cols-3"
244:     >
245:       <PrimeCard>
246:         <template #title> Current Count </template>
247:         <template #content>
248:           <p class="text-2xl font-bold">
249:             {{ growthData[0].row_count }}
250:           </p>
251:         </template>
252:       </PrimeCard>
253:       <PrimeCard>
254:         <template #title> Total Growth </template>
255:         <template #content>
256:           <p class="text-2xl font-bold">
257:             {{ calculateTotalGrowth() }}
258:           </p>
259:         </template>
260:       </PrimeCard>
261:       <PrimeCard>
262:         <template #title> Average Growth Rate </template>
263:         <template #content>
264:           <p class="text-2xl font-bold"> {{ calculateAverageGrowthRate().toFixed(2) }}% </p>
265:         </template>
266:       </PrimeCard>
267:     </div>
268: 
269:     <PrimeCard v-if="growthData.length">
270:       <template #title> Growth Trend </template>
271:       <template #content>
272:         <PrimeChart
273:           class="min-h-64"
274:           type="line"
275:           :data="chartData"
276:           :options="chartOptions"
277:         />
278:       </template>
279:     </PrimeCard>
280:   </div>
281: </template>
```

## File: apps/admin-dashboard/components/ErrorLogViewer.vue
```vue
  1: <script setup lang="ts">
  2: import { useTimeAgo } from '@vueuse/core'
  3: 
  4: // Define a standard log entry interface
  5: interface NormalizedLogEntry {
  6:   source: string
  7:   message: string
  8:   timestamp: string
  9:   count: number
 10:   severity?: string
 11:   domain?: string
 12:   action?: string
 13:   error?: string
 14:   stack?: string
 15:   [key: string]: any // Allow for additional fields
 16: }
 17: 
 18: // Create normalizer functions for each source
 19: const normalizeDatabaseLog = (log: any): NormalizedLogEntry => ({
 20:   source: 'DB',
 21:   message: log.event_message.split('ERROR:')[1] || log.body?.event_message || 'Unknown error',
 22:   timestamp:
 23:     log.timestamp || (log.body?.timestamp ? new Date(log.body.timestamp).toISOString() : ''),
 24:   count: 1,
 25:   severity: 'CRITICAL',
 26:   domain: 'database',
 27:   id: log.id || log.body?.id,
 28:   // Note: 'error' and 'stack' fields are not present in the provided structure
 29:   // You might want to extract these from the event_message if they're embedded there
 30: })
 31: 
 32: const normalizeAPILog = (log: any): NormalizedLogEntry => ({
 33:   source: 'API',
 34:   message: log.message || log,
 35:   timestamp: log.timestamp,
 36:   count: 1,
 37:   severity: log.level,
 38:   domain: log.metadata?.service,
 39:   action: log.endpoint,
 40:   error: log.status_code?.toString(),
 41:   stack: log.stack || JSON.stringify(log.metadata.context),
 42: })
 43: 
 44: const normalizeFrontendLog = (log: any): NormalizedLogEntry => ({
 45:   source: 'Frontend',
 46:   message: log.message || 'Unknown error',
 47:   timestamp: log.time,
 48:   count: 1,
 49:   severity: log.level,
 50:   domain: log.component,
 51:   action: log.action,
 52:   error: log.type,
 53:   stack: log.stack,
 54: })
 55: 
 56: // Function to normalize logs from all sources
 57: const normalizeAllLogs = (logs: { source: string, entries: any[] }[]): NormalizedLogEntry[] => {
 58:   return logs.flatMap((sourceLog) => {
 59:     console.log('sourceLog', sourceLog)
 60:     const normalizer
 61:       = sourceLog.source === 'DB'
 62:         ? normalizeDatabaseLog
 63:         : sourceLog.source === 'API'
 64:           ? normalizeAPILog
 65:           : sourceLog.source === 'Frontend'
 66:             ? normalizeFrontendLog
 67:             : (log: any) => ({ ...log, source: sourceLog.source, count: 1 }) // Default normalizer
 68: 
 69:     return sourceLog.entries.map(normalizer)
 70:   })
 71: }
 72: 
 73: const props = defineProps<{
 74:   logs: { source: string, entries: any[] }[]
 75: }>()
 76: 
 77: const normalizedLogs = computed(() => normalizeAllLogs(props.logs))
 78: 
 79: const uniqueLogs = computed(() => {
 80:   const logMap = new Map()
 81:   normalizedLogs.value.forEach((log) => {
 82:     const key = `${log.source}-${log.message}`
 83:     if (logMap.has(key)) {
 84:       const existingLog = logMap.get(key)
 85:       existingLog.count++
 86:       if (new Date(log.timestamp) > new Date(existingLog.timestamp)) {
 87:         existingLog.timestamp = log.timestamp
 88:       }
 89:     } else {
 90:       logMap.set(key, { ...log })
 91:     }
 92:   })
 93:   return Array.from(logMap.values()).sort((a, b) => {
 94:     if (b.count !== a.count) return b.count - a.count
 95:     return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
 96:   })
 97: })
 98: 
 99: const copyErrorContext = (log: NormalizedLogEntry) => {
100:   const context = JSON.stringify(log, null, 2)
101:   navigator.clipboard.writeText(context)
102:   // You might want to add a toast notification here to inform the user that the context has been copied
103: }
104: </script>
105: 
106: <template>
107:   <div class="border-color overflow-x-auto rounded-lg border p-4">
108:     <PrimeAccordion
109:       :multiple="true"
110:       :active-index="[0]"
111:       class="w-full space-y-4"
112:     >
113:       <PrimeAccordionPanel
114:         v-for="(log, index) in uniqueLogs"
115:         :key="index"
116:         :value="`${index}`"
117:       >
118:         <PrimeAccordionHeader
119:           :pt="{
120:             root: 'w-full flex items-center justify-between p-2 rounded-md background',
121:             toggleicon: 'mr-2',
122:           }"
123:           :pt-options="{ mergeSections: true, mergeProps: true }"
124:         >
125:           <template #default>
126:             <div class="w-full items-center justify-between rounded-md p-2">
127:               <div class="flex w-full items-center gap-2">
128:                 <PrimeTag severity="warning">
129:                   {{ log.source }}
130:                 </PrimeTag>
131:                 <PrimeTag
132:                   v-if="log.count > 1"
133:                   severity="info"
134:                 >
135:                   {{ log.count }} times
136:                 </PrimeTag>
137: 
138:                 <div class="tags-container flex flex-wrap items-center justify-center gap-2">
139:                   <PrimeTag
140:                     v-if="log.severity"
141:                     severity="danger"
142:                   >
143:                     {{ log.severity }}
144:                   </PrimeTag>
145:                   <PrimeTag
146:                     v-if="log.domain"
147:                     severity="info"
148:                   >
149:                     {{ log.domain }}
150:                   </PrimeTag>
151:                   <PrimeTag
152:                     v-if="log.action"
153:                     severity="success"
154:                   >
155:                     {{ log.action }}
156:                   </PrimeTag>
157: 
158:                   <span class="log-timestamp text-sm text-gray-400">
159:                     {{ useTimeAgo(log.timestamp) }}
160:                   </span>
161:                 </div>
162:               </div>
163:             </div>
164:           </template>
165:         </PrimeAccordionHeader>
166:         <PrimeAccordionContent>
167:           <div class="log-entry mb-4 rounded-md p-4">
168:             <p class="log-message mr-2 text-left text-yellow-600">
169:               {{ log.message }}
170:             </p>
171:             <PrimeButton
172:               severity="link"
173:               tooltip="Copy error context"
174:               @click.stop="copyErrorContext(log)"
175:             >
176:               <Icon name="mdi:content-copy" />
177:             </PrimeButton>
178:             <!-- Error Stack -->
179:             <div
180:               v-if="log.stack"
181:               class="mb-4"
182:             >
183:               <h3 class="text-lg mb-2 font-semibold"> Error Stack </h3>
184:               <pre
185:                 class="max-h-96 overflow-auto whitespace-pre-wrap rounded-md bg-gray-800 p-4 text-sm"
186:                 >{{ log.stack }}</pre
187:               >
188:             </div>
189: 
190:             <!-- Additional Fields -->
191:             <div
192:               v-for="(value, key) in log"
193:               :key="key"
194:               class="mb-2"
195:             >
196:               <template
197:                 v-if="
198:                   ![
199:                     'source',
200:                     'message',
201:                     'timestamp',
202:                     'count',
203:                     'severity',
204:                     'domain',
205:                     'action',
206:                     'error',
207:                     'stack',
208:                   ].includes(key)
209:                 "
210:               >
211:                 <strong>{{ key }}:</strong> {{ value }}
212:               </template>
213:             </div>
214:           </div>
215:         </PrimeAccordionContent>
216:       </PrimeAccordionPanel>
217:     </PrimeAccordion>
218:   </div>
219: </template>
220: 
221: <style scoped></style>
```

## File: apps/admin-dashboard/components/FileViewer.vue
```vue
 1: <script setup lang="ts">
 2: import { ref, onMounted } from 'vue'
 3: 
 4: const files = ref([])
 5: const selectedFile = ref('')
 6: const fileContent = ref('')
 7: 
 8: onMounted(async () => {
 9:   await loadFiles()
10: })
11: 
12: const loadFiles = async () => {
13:   try {
14:     const response = await $fetch('/api/list-files')
15:     files.value = response.files
16:   } catch (error) {
17:     console.error('Error loading files:', error)
18:   }
19: }
20: 
21: const viewFile = async (fileName: string) => {
22:   try {
23:     const response = await $fetch('/api/view-file', {
24:       method: 'POST',
25:       body: { fileName },
26:     })
27:     selectedFile.value = fileName
28:     fileContent.value = response.content
29:   } catch (error) {
30:     console.error('Error viewing file:', error)
31:     fileContent.value = 'Error loading file content'
32:   }
33: }
34: </script>
35: 
36: <template>
37:   <div class="file-viewer">
38:     <h2>File Viewer</h2>
39:     <div class="file-list">
40:       <ul>
41:         <li
42:           v-for="file in files"
43:           :key="file.name"
44:         >
45:           <span @click="viewFile(file.name)">{{ file.name }}</span>
46:           <span>({{ file.size }} bytes)</span>
47:         </li>
48:       </ul>
49:     </div>
50:     <div
51:       v-if="selectedFile"
52:       class="file-content"
53:     >
54:       <h3>{{ selectedFile }}</h3>
55:       <pre>{{ fileContent }}</pre>
56:     </div>
57:   </div>
58: </template>
59: 
60: <style scoped>
61: .file-viewer {
62:   margin-top: 20px;
63:   border: 1px solid #ccc;
64:   padding: 20px;
65:   border-radius: 5px;
66: }
67: .file-list ul {
68:   list-style-type: none;
69:   padding: 0;
70: }
71: .file-list li {
72:   cursor: pointer;
73:   margin-bottom: 5px;
74: }
75: .file-list li:hover {
76:   text-decoration: underline;
77: }
78: .file-content {
79:   margin-top: 20px;
80:   background-color: #f0f0f0;
81:   padding: 10px;
82:   border-radius: 5px;
83: }
84: </style>
```

## File: apps/admin-dashboard/components/GrowthMetrics.vue
```vue
  1: <script setup lang="ts">
  2: import { useErrorHandler } from '@ib/logger'
  3: 
  4: const { store, loadMore, refresh, isSelecting } = useSelectData('table_statistics', {
  5:   columns: 'table_name, table_size, row_count, capture_time',
  6:   orderBy: { column: 'capture_time', ascending: false },
  7:   limit: 100,
  8:   initialFetch: true,
  9: })
 10: 
 11: const { handleError } = useErrorHandler()
 12: const toast = useNotification()
 13: const { format, calculate } = useBaseMetrics()
 14: 
 15: const isLoading = ref(true)
 16: const metrics = ref([] as any)
 17: const chartData = ref(null)
 18: 
 19: const chartOptions = reactive({
 20:   plugins: {
 21:     legend: {
 22:       labels: { color: '#ffffff' },
 23:     },
 24:   },
 25:   scales: {
 26:     x: {
 27:       ticks: { color: '#ffffff' },
 28:       grid: { color: 'rgba(255, 255, 255, 0.2)' },
 29:     },
 30:     y: {
 31:       ticks: { color: '#ffffff' },
 32:       grid: { color: 'rgba(255, 255, 255, 0.2)' },
 33:     },
 34:   },
 35: })
 36: 
 37: const formatBytes = (bytes: number): string => {
 38:   const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']
 39:   if (bytes === 0) return '0 Bytes'
 40:   const i = Math.floor(Math.log(bytes) / Math.log(1024))
 41:   return `${format.roundToN(bytes / Math.pow(1024, i), 2)} ${sizes[i]}`
 42: }
 43: 
 44: const processData = () => {
 45:   const data = store.items
 46:   if (data.length === 0) return
 47: 
 48:   const latestData = data[0]
 49:   const previousWeekData = data.find(
 50:     (d) => new Date(d.capture_time) <= new Date(latestData.capture_time - 7 * 24 * 60 * 60 * 1000),
 51:   )
 52: 
 53:   const uniqueTables = new Set(data.map((d) => d.table_name))
 54: 
 55:   metrics.value = [
 56:     {
 57:       name: 'Total Tables',
 58:       value: uniqueTables.size,
 59:       growth: 0,
 60:     },
 61:     {
 62:       name: 'Total Size',
 63:       value: formatBytes(latestData.table_size),
 64:       growth: calculate.percentile([latestData.table_size, previousWeekData?.table_size || 0], 50),
 65:     },
 66:     {
 67:       name: 'Total Rows',
 68:       value: latestData.row_count.toLocaleString(),
 69:       growth: calculate.percentile([latestData.row_count, previousWeekData?.row_count || 0], 50),
 70:     },
 71:     {
 72:       name: 'Avg Size per Table',
 73:       value: formatBytes(latestData.table_size / uniqueTables.size),
 74:       growth: calculate.percentile(
 75:         [
 76:           latestData.table_size / uniqueTables.size,
 77:           previousWeekData
 78:             ? previousWeekData.table_size /
 79:               new Set(
 80:                 data
 81:                   .filter((d) => d.capture_time <= previousWeekData.capture_time)
 82:                   .map((d) => d.table_name),
 83:               ).size
 84:             : 0,
 85:         ],
 86:         50,
 87:       ),
 88:     },
 89:   ]
 90: 
 91:   const chartDataMap = data.reverse().reduce((acc, curr) => {
 92:     const date = new Date(curr.capture_time).toLocaleDateString()
 93:     if (!acc[date]) {
 94:       acc[date] = curr.table_size / (1024 * 1024) // Convert to MB
 95:     }
 96:     return acc
 97:   }, {})
 98: 
 99:   chartData.value = {
100:     labels: Object.keys(chartDataMap),
101:     datasets: [
102:       {
103:         label: 'Total Table Size (MB)',
104:         data: Object.values(chartDataMap),
105:         fill: false,
106:         borderColor: '#42A5F5',
107:         tension: 0.4,
108:       },
109:     ],
110:   }
111: }
112: 
113: onMounted(async () => {
114:   try {
115:     await loadMore()
116:     processData()
117:   } catch (error) {
118:     handleError(error, 'Error loading dashboard data')
119:     toast.error({
120:       summary: 'Data Load Error',
121:       message: 'Failed to load dashboard data. Please try again later.',
122:     })
123:   } finally {
124:     isLoading.value = false
125:   }
126: })
127: </script>
128: 
129: <template>
130:   <div>
131:     <h1 class="mb-6 text-3xl font-bold"> Growth Dashboard </h1>
132:     <div
133:       v-if="isLoading"
134:       class="flex h-64 items-center justify-center"
135:     >
136:       <PrimeProgressSpinner />
137:     </div>
138:     <div v-else>
139:       <div class="grid gap-4">
140:         <div
141:           v-for="metric in metrics"
142:           :key="metric.name"
143:           class="col-12 md:col-6 lg:col-3"
144:         >
145:           <PrimeCard class="h-full">
146:             <template #title>
147:               <h2 class="mb-2 text-xl font-semibold">
148:                 {{ metric.name }}
149:               </h2>
150:             </template>
151:             <template #content>
152:               <div class="mb-2 text-3xl font-bold">
153:                 {{ metric.value }}
154:               </div>
155:               <div class="text-sm">
156:                 <span
157:                   :class="{
158:                     'text-green-500': metric.growth > 0,
159:                     'text-red-500': metric.growth < 0,
160:                   }"
161:                 >
162:                   {{ metric.growth > 0 ? '▲' : '▼' }}
163:                   {{ Math.abs(metric.growth).toFixed(2) }}%
164:                 </span>
165:                 <span class="ml-1">since last week</span>
166:               </div>
167:             </template>
168:           </PrimeCard>
169:         </div>
170:       </div>
171:       <div class="mt-8">
172:         <h2 class="mb-4 text-2xl font-semibold"> Table Size Growth </h2>
173:         <PrimeChart
174:           type="line"
175:           :data="chartData"
176:           :options="chartOptions"
177:           class="h-96"
178:         />
179:       </div>
180:     </div>
181:   </div>
182: </template>
183: 
184: <style scoped></style>
```

## File: apps/admin-dashboard/components/MetricCard.vue
```vue
 1: <template>
 2:   <div class="rounded-lg border border-color background p-4 shadow-lg">
 3:     <h3 class="mb-4 text-xl font-semibold">
 4:       {{ title }}
 5:     </h3>
 6:     <slot></slot>
 7:   </div>
 8: </template>
 9: 
10: <script setup lang="ts">
11: defineProps<{
12:   title: string
13: }>()
14: </script>
```

## File: apps/admin-dashboard/components/RedisManagement.vue
```vue
  1: <script lang="ts" setup>
  2: import { FilterMatchMode } from '@primevue/core/api'
  3: 
  4: const PAGE_SIZE = 50
  5: 
  6: const scraperUrl = useRuntimeConfig().public.scraperUrl
  7: 
  8: const tableData = ref([])
  9: const loading = ref(false)
 10: const totalRecords = ref(0)
 11: const filters = ref({
 12:   table: { matchMode: FilterMatchMode.CONTAINS, value: null },
 13:   category: { matchMode: FilterMatchMode.CONTAINS, value: null },
 14:   type: { matchMode: FilterMatchMode.CONTAINS, value: null },
 15: })
 16: 
 17: const dialogVisible = ref(false)
 18: const dialogMode = ref<'view' | 'edit'>('view')
 19: const dialogHeader = computed(() => (dialogMode.value === 'view' ? 'View Value' : 'Edit Value'))
 20: const selectedValue = ref('')
 21: const editedValue = ref('')
 22: const selectedKey = ref('')
 23: 
 24: const loadKeys = async (page = 0, pageSize = PAGE_SIZE) => {
 25:   loading.value = true
 26:   try {
 27:     const response = await fetch(
 28:       `${scraperUrl}/admin/redis/keys?page=${page}&pageSize=${pageSize}&includeValues=true`,
 29:     )
 30: 
 31:     const data = await response.json()
 32:     console.log('REDIS DATA', data)
 33:     tableData.value = data.keys.map(parseKey)
 34:     totalRecords.value = data.total
 35:   } catch (error) {
 36:     console.error('Failed to fetch keys', error)
 37:   } finally {
 38:     loading.value = false
 39:   }
 40: }
 41: 
 42: const parseKey = (item: { key: string, value: string }) => {
 43:   const match = item.key.match(/\{(.+?)\}:(.+?):(.+)/)
 44:   if (match) {
 45:     return {
 46:       key: item.key,
 47:       table: match[1],
 48:       category: match[2],
 49:       type: match[3],
 50:       value: item.value,
 51:     }
 52:   }
 53:   return { key: item.key, table: '', category: '', type: '', value: item.value }
 54: }
 55: 
 56: const onPage = (event: any) => {
 57:   loadKeys(event.page, event.rows)
 58: }
 59: 
 60: const truncateValue = (value: string) => {
 61:   return value.split(',')
 62: }
 63: 
 64: const viewFullValue = (data: any) => {
 65:   selectedKey.value = data.key
 66:   selectedValue.value = data.value
 67:   dialogMode.value = 'view'
 68:   dialogVisible.value = true
 69: }
 70: 
 71: const editValue = (data: any) => {
 72:   selectedKey.value = data.key
 73:   editedValue.value = JSON.stringify(data.value, null, 2)
 74:   dialogMode.value = 'edit'
 75:   dialogVisible.value = true
 76: }
 77: 
 78: const saveEditedValue = async () => {
 79:   try {
 80:     await fetch(`${scraperUrl}/admin/redis/keys/${encodeURIComponent(selectedKey.value)}`, {
 81:       method: 'PUT',
 82:       headers: { 'Content-Type': 'application/json' },
 83:       body: JSON.stringify({ value: editedValue.value }),
 84:     })
 85:     dialogVisible.value = false
 86:     loadKeys() // Refresh the data
 87:   } catch (error) {
 88:     console.error('Failed to update value', error)
 89:   }
 90: }
 91: 
 92: const deleteKey = async (key: string) => {
 93:   if (confirm('Are you sure you want to delete this key?')) {
 94:     try {
 95:       await fetch(`${scraperUrl}/admin/redis/keys/${encodeURIComponent(key)}`, { method: 'DELETE' })
 96:       loadKeys() // Refresh the data
 97:     } catch (error) {
 98:       console.error('Failed to delete key', error)
 99:     }
100:   }
101: }
102: 
103: const flushDatabase = async () => {
104:   if (confirm('Are you sure you want to flush the entire database?')) {
105:     try {
106:       await fetch(`${scraperUrl}/admin/redis/flush`, { method: 'POST' })
107:       alert('Database flushed successfully')
108:       loadKeys()
109:     } catch (error) {
110:       console.error('Failed to flush database', error)
111:     }
112:   }
113: }
114: 
115: loadKeys()
116: </script>
117: 
118: <template>
119:   <div class="p-4">
120:     <div class="border-color background mb-4 flex items-center gap-4 rounded-md border p-4">
121:       <h1>Redis Management</h1>
122:       <PrimeButton @click="loadKeys"> Refresh Keys </PrimeButton>
123:       <PrimeButton
124:         severity="danger"
125:         @click="flushDatabase"
126:       >
127:         Flush Database
128:       </PrimeButton>
129:     </div>
130: 
131:     <PrimeDataTable
132:       v-model:filters="filters"
133:       :value="tableData"
134:       :paginator="true"
135:       :rows="PAGE_SIZE"
136:       filter-display="row"
137:       :global-filter-fields="['table', 'category']"
138:       :loading="loading"
139:       :total-records="totalRecords"
140:       @page="onPage"
141:     >
142:       <PrimeColumn
143:         field="table"
144:         header="Table"
145:         style="max-width: 8rem"
146:         :sortable="true"
147:       >
148:         <template #filter="{ filterModel }">
149:           <PrimeInputText
150:             v-model="filterModel.value"
151:             placeholder="Search by table"
152:           />
153:         </template>
154:       </PrimeColumn>
155:       <PrimeColumn
156:         field="category"
157:         header="Category"
158:         :sortable="true"
159:       >
160:         <template #filter="{ filterModel }">
161:           <InputText
162:             v-model="filterModel.value"
163:             placeholder="Search by category"
164:           />
165:         </template>
166:       </PrimeColumn>
167:       <PrimeColumn
168:         field="type"
169:         header="Type"
170:         :sortable="true"
171:       >
172:         <template #filter="{ filterModel }">
173:           <PrimeInputText
174:             v-model="filterModel.value"
175:             placeholder="Search by type"
176:           />
177:         </template>
178:       </PrimeColumn>
179:       <PrimeColumn
180:         field="value"
181:         header="Value"
182:         :sortable="false"
183:       >
184:         <template #body="slotProps">
185:           <div class="flex flex-col text-sm max-w-64 text-wrap overflow-scroll">
186:             <pre>{{ slotProps.data.value }}</pre>
187:           </div>
188:         </template>
189:       </PrimeColumn>
190:       <PrimeColumn
191:         field="edit"
192:         header="Edit"
193:       >
194:         <template #body="slotProps">
195:           <div class="flex flex-col">
196:             <div class="mt-2 flex gap-2">
197:               <PrimeButton
198:                 label="View"
199:                 size="small"
200:                 @click="viewFullValue(slotProps.data)"
201:               />
202:               <PrimeButton
203:                 label="Edit"
204:                 size="small"
205:                 severity="secondary"
206:                 @click="editValue(slotProps.data)"
207:               />
208:               <PrimeButton
209:                 label="Delete"
210:                 size="small"
211:                 severity="danger"
212:                 @click="deleteKey(slotProps.data.key)"
213:               />
214:             </div>
215:           </div>
216:         </template>
217:       </PrimeColumn>
218:     </PrimeDataTable>
219: 
220:     <PrimeDialog
221:       v-model:visible="dialogVisible"
222:       :header="dialogHeader"
223:       :modal="true"
224:     >
225:       <template v-if="dialogMode === 'view'">
226:         <pre>{{ selectedValue }}</pre>
227:       </template>
228:       <template v-else-if="dialogMode === 'edit'">
229:         <PrimeTextarea
230:           v-model="editedValue"
231:           rows="10"
232:           class="w-full"
233:         ></PrimeTextarea>
234:       </template>
235:       <template
236:         v-if="dialogMode === 'edit'"
237:         #footer
238:       >
239:         <PrimeButton
240:           label="Save"
241:           @click="saveEditedValue"
242:         />
243:         <PrimeButton
244:           label="Cancel"
245:           severity="secondary"
246:           @click="dialogVisible = false"
247:         />
248:       </template>
249:     </PrimeDialog>
250:   </div>
251: </template>
```

## File: apps/admin-dashboard/components/ScriptExecution.vue
```vue
 1: <script setup lang="ts">
 2: import { ref } from 'vue'
 3: 
 4: const scripts = [
 5:   { name: 'build-all', label: 'Build All', type: 'sh' },
 6:   { name: 'db-setup', label: 'Setup Database', type: 'ts' },
 7:   { name: 'generate-lazy-routes', label: 'Generate Lazy Routes', type: 'ts' },
 8:   { name: 'clean-packages', label: 'Clean Packages', type: 'sh' },
 9:   // Add more scripts as needed
10: ]
11: 
12: const output = ref('')
13: 
14: const executeScript = async (scriptName: string) => {
15:   try {
16:     const response = await $fetch('/api/execute-script', {
17:       method: 'POST',
18:       body: { scriptName },
19:     })
20:     output.value = response.output
21:   } catch (error) {
22:     console.error('Error executing script:', error)
23:     output.value = 'Error executing script. Check console for details.'
24:   }
25: }
26: </script>
27: 
28: <template>
29:   <div class="script-execution-panel">
30:     <h2>Script Execution Panel</h2>
31:     <div class="script-buttons flex gap-2">
32:       <PrimeButton
33:         v-for="script in scripts"
34:         :key="script.name"
35:         :label="`${script.label} (${script.type})`"
36:         @click="executeScript(script.name)"
37:       />
38:     </div>
39:     <div
40:       v-if="output"
41:       class="output-display"
42:     >
43:       <h3>Output:</h3>
44:       <pre>{{ output }}</pre>
45:     </div>
46:   </div>
47: </template>
48: 
49: <style scoped>
50: /* ... (styles remain the same) ... */
51: </style>
```

## File: apps/admin-dashboard/components/ServerErrors.vue
```vue
  1: <script setup lang="ts">
  2: const useErrorDashboard = defineStore('errorDashboard', () => {
  3:   const { fetch } = useBaseFetch()
  4: 
  5:   const errorReport = ref(null)
  6:   const errorTrends = ref([])
  7:   const errorLogs = ref([])
  8:   const errorPG = ref([])
  9:   const totalLogs = ref(0)
 10:   const currentPage = ref(1)
 11:   const totalPages = ref(1)
 12:   const pageSize = ref(50)
 13:   const selectedDate = ref(new Date())
 14:   const loading = ref(false)
 15:   const error = ref(null as string | null)
 16: 
 17:   const errorsByDomain = computed(() => errorReport.value?.domainDistribution || {})
 18:   const errorsBySeverity = computed(() => errorReport.value?.severityDistribution || {})
 19:   const errorReduction = computed(() => errorReport.value?.errorReduction || 0)
 20:   const mostFrequentErrors = computed(
 21:     () => errorReport.value?.mostFrequentErrors?.slice(0, 5) || [],
 22:   )
 23:   const errorsByHour = computed(() => {
 24:     return (
 25:       errorLogs.value?.reduce((acc, log) => {
 26:         const hour = new Date(log.timestamp).getHours()
 27:         acc[hour] = (acc[hour] || 0) + 1
 28:         return acc
 29:       }, {}) || {}
 30:     )
 31:   })
 32:   const averageErrorsPerDay = computed(() => {
 33:     const trends = errorReport.value?.historicalTrends?.errorTrends || []
 34:     if (trends.length === 0) return 0
 35:     const total = trends.reduce((sum, day) => sum + day.totalErrors, 0)
 36:     return total / trends.length
 37:   })
 38: 
 39:   async function fetchErrorReport() {
 40:     loading.value = true
 41:     error.value = null
 42:     try {
 43:       const response = await fetch('/api/error/report', {
 44:         query: { date: selectedDate.value.toISOString() },
 45:       })
 46:       if (!response || !response.data) {
 47:         throw new Error('No data returned from the server')
 48:       }
 49:       errorReport.value = response.data
 50:     } catch (err) {
 51:       console.error('Failed to fetch error report', err)
 52:       error.value = 'Failed to load error report. Please try again later.'
 53:       errorReport.value = null
 54:     } finally {
 55:       loading.value = false
 56:     }
 57:   }
 58: 
 59:   async function fetchErrorTrends() {
 60:     loading.value = true
 61:     error.value = null
 62:     try {
 63:       const response = await fetch('/api/error/trends', {
 64:         query: { date: selectedDate.value.toISOString() },
 65:       })
 66:       if (!response || !response.data) {
 67:         throw new Error('No data returned from the server')
 68:       }
 69:       errorTrends.value = response.data.trends || []
 70:     } catch (err: any) {
 71:       console.error('Failed to fetch error trends', err)
 72:       error.value = 'Failed to load error trends. Please try again later.'
 73:       errorTrends.value = []
 74:     } finally {
 75:       loading.value = false
 76:     }
 77:   }
 78: 
 79:   async function fetchErrorLogs() {
 80:     loading.value = true
 81:     error.value = null
 82:     try {
 83:       const response = await fetch('/api/error/logs', {
 84:         query: {
 85:           date: selectedDate.value.toISOString(),
 86:           page: currentPage.value,
 87:           pageSize: pageSize.value,
 88:         },
 89:       })
 90:       if (!response || !response.data) {
 91:         throw new Error('No data returned from the server')
 92:       }
 93:       errorLogs.value = response.data.logs || []
 94:       totalLogs.value = response.data.total || 0
 95:       totalPages.value = response.data.totalPages || 1
 96:     } catch (err) {
 97:       console.error('Failed to fetch error logs', err)
 98:       error.value = 'Failed to load error logs. Please try again later.'
 99:       errorLogs.value = []
100:       totalLogs.value = 0
101:       totalPages.value = 1
102:     } finally {
103:       loading.value = false
104:     }
105:   }
106: 
107:   async function fetchPostgresErrors() {
108:     loading.value = true
109:     error.value = null
110:     try {
111:       const response = await fetch('/api/error/postgres', {
112:         query: { date: selectedDate.value.toISOString() },
113:       })
114:       if (!response || !response.data) {
115:         throw new Error('No data returned from the server')
116:       }
117:       errorPG.value = response.data || []
118:     } catch (err) {
119:       console.error('Failed to fetch postgres errors', err)
120:       error.value = 'Failed to load postgres errors. Please try again later.' + err
121:       errorPG.value = []
122:     } finally {
123:       loading.value = false
124:     }
125:   }
126: 
127:   async function refreshData() {
128:     await Promise.all([
129:       fetchErrorReport(),
130:       fetchErrorLogs(),
131:       fetchPostgresErrors(),
132:       fetchErrorTrends(),
133:     ])
134:   }
135: 
136:   function setDate(date: Date) {
137:     selectedDate.value = date
138:     currentPage.value = 1
139:     refreshData()
140:   }
141: 
142:   function setPage(page: number) {
143:     currentPage.value = page
144:     fetchErrorLogs()
145:   }
146: 
147:   watch(pageSize, () => {
148:     currentPage.value = 1
149:     fetchErrorLogs()
150:   })
151: 
152:   return {
153:     errorReport,
154:     errorLogs,
155:     errorPG,
156:     totalLogs,
157:     currentPage,
158:     totalPages,
159:     pageSize,
160:     selectedDate,
161:     loading,
162:     error,
163:     errorsByDomain,
164:     errorsBySeverity,
165:     errorTrends,
166:     errorReduction,
167:     mostFrequentErrors,
168:     errorsByHour,
169:     averageErrorsPerDay,
170:     fetchErrorReport,
171:     fetchErrorLogs,
172:     refreshData,
173:     setDate,
174:     setPage,
175:   }
176: })
177: 
178: const errorDashboard = useErrorDashboard()
179: 
180: const {
181:   errorsByDomain,
182:   errorsBySeverity,
183:   error,
184:   errorLogs,
185:   errorPG,
186:   errorReport,
187:   errorTrends,
188:   mostFrequentErrors,
189:   errorReduction,
190:   averageErrorsPerDay,
191:   pageSize,
192:   totalLogs,
193:   errorsByHour,
194:   loading,
195:   currentPage,
196:   totalPages,
197: } = storeToRefs(errorDashboard)
198: 
199: const domainChartData = computed(() => ({
200:   labels: Object.keys(errorsByDomain.value),
201:   datasets: [
202:     {
203:       data: Object.values(errorsByDomain.value),
204:       backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],
205:     },
206:   ],
207: }))
208: 
209: const severityChartData = computed(() => ({
210:   labels: Object.keys(errorsBySeverity.value),
211:   datasets: [
212:     {
213:       label: 'Errors',
214:       data: Object.values(errorsBySeverity.value),
215:       backgroundColor: '#36A2EB',
216:     },
217:   ],
218: }))
219: 
220: const chartOptions = {
221:   responsive: true,
222:   maintainAspectRatio: false,
223: }
224: 
225: // Computed properties for chart data
226: const hourlyErrorChartData = computed(() => ({
227:   labels:
228:     errorReport.value?.errorTrends?.map((trend) => trend.interval.split(' ')[1].slice(0, 5)) || [],
229:   datasets: [
230:     {
231:       label: 'Hourly Errors',
232:       data: errorReport.value?.errorTrends?.map((trend) => trend.count) || [],
233:       backgroundColor: '#FF6384',
234:       borderColor: '#FF6384',
235:       valueType: 'number',
236:       type: 'bar',
237:     },
238:   ],
239: }))
240: 
241: const dailyErrorChartData = computed(() => ({
242:   labels: errorReport.value?.historicalTrends?.map((trend) => trend.date) || [],
243:   datasets: [
244:     {
245:       label: 'Daily Errors',
246:       data: errorReport.value?.historicalTrends?.map((trend) => trend.totalErrors) || [],
247:       backgroundColor: '#36A2EB',
248:       borderColor: '#36A2EB',
249:       valueType: 'number',
250:       type: 'line',
251:     },
252:   ],
253: }))
254: 
255: // Chart configurations
256: const hourlyErrorChart = computed(() => ({
257:   id: 1,
258:   scaleType: 'linear',
259:   title: 'Hourly Error Trends',
260:   subtitle: 'Number of errors per hour in the last 24 hours',
261:   type: 'bar',
262:   data: hourlyErrorChartData.value,
263: }))
264: 
265: const dailyErrorChart = computed(() => ({
266:   id: 2,
267:   scaleType: 'linear',
268:   title: 'Daily Error Trends',
269:   subtitle: 'Total errors per day over time',
270:   type: 'line',
271:   data: dailyErrorChartData.value,
272: }))
273: 
274: onMounted(errorDashboard.refreshData)
275: 
276: const rawDataArray = computed(() => [
277:   { title: 'Error Trends', data: errorTrends.value },
278:   { title: 'Error Logs', data: errorLogs.value },
279:   { title: 'Postgres Errors', data: errorPG.value },
280:   { title: 'Error Report', data: errorReport.value },
281: ])
282: 
283: const settings = ref()
284: 
285: const toggle = (event) => {
286:   settings.value.toggle(event)
287: }
288: </script>
289: 
290: <template>
291:   <div class="flex h-full flex-col">
292:     <PrimeSplitter class="h-full">
293:       <PrimeSplitterPanel class="h-full overflow-scroll p-4">
294:         <div class="flex h-full flex-col">
295:           <div class="flex items-center justify-between gap-4 p-4">
296:             <h2 class="text-xl font-bold"> {{ totalLogs }} Error Logs </h2>
297:             <div class="flex items-center gap-2">
298:               <!-- <PrimeButton
299:                 type="button"
300:                 label="Settings"
301:                 @click="toggle"
302:               /> -->
303:               <!-- <PrimePopover ref="settings">
304:                 <DevSettings />
305:               </PrimePopover> -->
306:               <PrimeButton
307:                 :loading="loading"
308:                 class="h-full"
309:                 @click="errorDashboard.refreshData"
310:               >
311:                 <Icon name="mdi:refresh" />
312:               </PrimeButton>
313:             </div>
314:           </div>
315:           <ErrorLogViewer
316:             v-if="errorLogs.length > 0 && errorPG.length > 0"
317:             :logs="[
318:               { source: 'DB', entries: errorPG },
319:               { source: 'API', entries: errorLogs },
320:             ]"
321:             class="no-scrollbar flex-grow overflow-auto"
322:           />
323:           <p
324:             v-else-if="error"
325:             class="text-red-500"
326:           >
327:             {{ error }}
328:           </p>
329:           <p
330:             v-else-if="loading"
331:             class="text-gray-500"
332:           >
333:             Loading error logs...
334:           </p>
335:           <p
336:             v-else
337:             class="text-gray-500"
338:           >
339:             No logs available for the selected date.
340:           </p>
341:         </div>
342:       </PrimeSplitterPanel>
343:       <PrimeSplitterPanel class="h-full overflow-scroll p-4">
344:         <div
345:           v-if="!loading && !error && errorReport"
346:           class="h-full overflow-auto"
347:         >
348:           <h2 class="mb-4 text-2xl font-bold"> Error Metrics </h2>
349:           <div class="mb-4 grid grid-cols-1 gap-4 md:grid-cols-2">
350:             <PrimeCard>
351:               <template #title> Total Errors </template>
352:               <template #content>
353:                 <div class="text-4xl font-bold">
354:                   {{ errorReport.totalErrors }}
355:                 </div>
356:                 <div class="text-sm text-gray-500">
357:                   {{ errorReduction.toFixed(2) }}% change from yesterday
358:                 </div>
359:               </template>
360:             </PrimeCard>
361:             <PrimeCard>
362:               <template #title> Average Errors per Day </template>
363:               <template #content>
364:                 <div class="text-4xl font-bold">
365:                   {{ averageErrorsPerDay.toFixed(2) }}
366:                 </div>
367:               </template>
368:             </PrimeCard>
369:           </div>
370:           <PrimeCard
371:             v-if="Object.keys(errorsByDomain).length > 0"
372:             class="mb-4"
373:           >
374:             <template #title> Domain Distribution </template>
375:             <template #content>
376:               <PrimeChart
377:                 type="pie"
378:                 :data="domainChartData"
379:                 :options="chartOptions"
380:               />
381:             </template>
382:           </PrimeCard>
383:           <PrimeCard
384:             v-if="Object.keys(errorsBySeverity).length > 0"
385:             class="mb-4"
386:           >
387:             <template #title> Severity Distribution </template>
388:             <template #content>
389:               <PrimeChart
390:                 type="bar"
391:                 :data="severityChartData"
392:                 :options="chartOptions"
393:               />
394:             </template>
395:           </PrimeCard>
396:           <PrimeCard
397:             v-if="mostFrequentErrors.length > 0"
398:             class="mb-4"
399:           >
400:             <template #title> Most Frequent Errors </template>
401:             <template #content>
402:               <ul class="list-disc pl-5">
403:                 <li
404:                   v-for="freqError in mostFrequentErrors"
405:                   :key="freqError.message"
406:                   class="mb-2"
407:                 >
408:                   {{ freqError.message }} ({{ freqError.count }} occurrences)
409:                 </li>
410:               </ul>
411:             </template>
412:           </PrimeCard>
413:           <div class="mb-4 grid grid-cols-1 gap-4">
414:             <PrimeCard>
415:               <template #title> Hourly Error Trends </template>
416:               <template #content>
417:                 <Chart :chart="hourlyErrorChart" />
418:               </template>
419:             </PrimeCard>
420:             <PrimeCard>
421:               <template #title> Daily Error Trends </template>
422:               <template #content>
423:                 <Chart :chart="dailyErrorChart" />
424:               </template>
425:             </PrimeCard>
426:           </div>
427:         </div>
428:         <p
429:           v-else-if="error"
430:           class="text-red-500"
431:         >
432:           {{ error }}
433:         </p>
434:         <p
435:           v-else-if="loading"
436:           class="text-gray-500"
437:         >
438:           Loading error metrics...
439:         </p>
440:         <p
441:           v-else
442:           class="text-gray-500"
443:         >
444:           No error report available for the selected date.
445:         </p>
446:       </PrimeSplitterPanel>
447:     </PrimeSplitter>
448:   </div>
449: </template>
```

## File: apps/admin-dashboard/components/ServerJobs.vue
```vue
  1: <script setup lang="ts">
  2: const store = useServerAnalyticsStore()
  3: const { company, news_links, performance, queue, isConnected, haveMetrics } = storeToRefs(store)
  4: 
  5: interface FlatMetric {
  6:   key: string
  7:   value: any
  8:   path: string[]
  9: }
 10: 
 11: function formatMetricValue(value: any, key: string): string {
 12:   if (typeof value === 'number') {
 13:     switch (key) {
 14:       case 'cpu_usage':
 15:       case 'memory_usage':
 16:         return `${value.toFixed(2)}%`
 17:       case 'free_memory':
 18:       case 'total_memory':
 19:       case 'heap_used':
 20:       case 'heap_total':
 21:       case 'external_memory':
 22:       case 'heap_limit':
 23:         return formatBytes(value)
 24:       case 'load_average_1m':
 25:       case 'load_average_5m':
 26:       case 'load_average_15m':
 27:         return value.toFixed(2)
 28:       case 'uptime':
 29:         return formatUptime(value)
 30:       default:
 31:         return value.toLocaleString()
 32:     }
 33:   } else if (value instanceof Date) {
 34:     return value.toLocaleString()
 35:   } else {
 36:     return String(value)
 37:   }
 38: }
 39: 
 40: function formatBytes(bytes: number): string {
 41:   const units = ['B', 'KB', 'MB', 'GB', 'TB']
 42:   let i = 0
 43:   while (bytes >= 1024 && i < units.length - 1) {
 44:     bytes /= 1024
 45:     i++
 46:   }
 47:   return `${bytes.toFixed(2)} ${units[i]}`
 48: }
 49: 
 50: function formatUptime(seconds: number): string {
 51:   const days = Math.floor(seconds / (3600 * 24))
 52:   const hours = Math.floor((seconds % (3600 * 24)) / 3600)
 53:   const minutes = Math.floor((seconds % 3600) / 60)
 54:   const remainingSeconds = Math.floor(seconds % 60)
 55: 
 56:   const parts = []
 57:   if (days > 0) parts.push(`${days}d`)
 58:   if (hours > 0) parts.push(`${hours}h`)
 59:   if (minutes > 0) parts.push(`${minutes}m`)
 60:   if (remainingSeconds > 0 || parts.length === 0) parts.push(`${remainingSeconds}s`)
 61: 
 62:   return parts.join(' ')
 63: }
 64: 
 65: function flattenMetrics(obj: any, prefix: string[] = []): FlatMetric[] {
 66:   let flattened: FlatMetric[] = []
 67: 
 68:   for (const key in obj) {
 69:     if (Object.prototype.hasOwnProperty.call(obj, key)) {
 70:       const value = obj[key]
 71:       const newPrefix = [...prefix, key]
 72: 
 73:       if (typeof value === 'object' && value !== null && !(value instanceof Date)) {
 74:         flattened = flattened.concat(flattenMetrics(value, newPrefix))
 75:       } else {
 76:         flattened.push({
 77:           key: key,
 78:           value: value,
 79:           path: newPrefix,
 80:         })
 81:       }
 82:     }
 83:   }
 84: 
 85:   return flattened
 86: }
 87: 
 88: const allMetrics = computed(() => ({
 89:   company: company.value,
 90:   news_links: news_links.value,
 91:   performance: performance.value,
 92:   queue: queue.value,
 93: }))
 94: 
 95: const flatMetrics = computed<FlatMetric[]>(() => {
 96:   return flattenMetrics(allMetrics.value)
 97: })
 98: 
 99: const metricCategories = computed(() => {
100:   return [...new Set(flatMetrics.value.map((metric) => metric.path[0]))]
101: })
102: 
103: function getCategoryMetrics(category: string): FlatMetric[] {
104:   return flatMetrics.value.filter((metric) => metric.path[0] === category)
105: }
106: 
107: function formatCategoryName(name: string): string {
108:   return name.replace(/([A-Z])/g, ' $1').trim()
109: }
110: 
111: function formatMetricName(name: string): string {
112:   return name.replace(/([A-Z])/g, ' $1').trim()
113: }
114: </script>
115: 
116: <template>
117:   <div class="metrics-display flex flex-col justify-start items-start gap-4">
118:     <div
119:       v-if="isConnected"
120:       class="text-green-500 p-2 rounded-md border border-green-500"
121:     >
122:       Scraper Connected
123:     </div>
124:     <div
125:       v-else
126:       class="text-red-500 p-2 rounded-md border border-red-500"
127:     >
128:       Disconnected
129:     </div>
130:     <div
131:       v-if="haveMetrics"
132:       class="grid gap-4 md:grid-cols-2 xl:grid-cols-3 xl:gap-8"
133:     >
134:       <div
135:         v-for="category in metricCategories"
136:         :key="category"
137:         class="mb-8"
138:       >
139:         <h2 class="mb-4 text-2xl font-semibold capitalize">
140:           {{ formatCategoryName(category) }}
141:         </h2>
142:         <PrimeCard class="shadow-md">
143:           <template #title>
144:             {{ formatCategoryName(category) }}
145:           </template>
146:           <template #content>
147:             <div
148:               v-for="metric in getCategoryMetrics(category)"
149:               :key="metric.path.join('.')"
150:               class="mb-2"
151:             >
152:               <strong>{{ formatMetricName(metric.key) }}:</strong>
153:               {{ formatMetricValue(metric.value, metric.key) }}
154:             </div>
155:           </template>
156:         </PrimeCard>
157:       </div>
158:     </div>
159:   </div>
160: </template>
```

## File: apps/admin-dashboard/components/SpiderAnalytics.vue
```vue
  1: <script setup lang="ts">
  2: const store = useServerAnalyticsStore()
  3: const { news_links, isConnected, haveMetrics } = storeToRefs(store)
  4: 
  5: watch(
  6:   news_links,
  7:   (newMetrics) => {
  8:     console.log('Spider Metrics updated:', newMetrics)
  9:   },
 10:   { deep: true },
 11: )
 12: 
 13: const urlDepthChart = ref(null)
 14: const protocolChart = ref(null)
 15: 
 16: // Common chart options
 17: const commonChartOptions = {
 18:   responsive: true,
 19:   maintainAspectRatio: false,
 20:   animation: false, // Disable default animations
 21:   transitions: {
 22:     active: {
 23:       animation: {
 24:         duration: 300,
 25:       },
 26:     },
 27:     resize: {
 28:       animation: {
 29:         duration: 500,
 30:         easing: 'easeOutQuad',
 31:       },
 32:     },
 33:   },
 34:   plugins: {
 35:     legend: {
 36:       labels: {
 37:         font: {
 38:           family: '\'Helvetica Neue\', \'Helvetica\', \'Arial\', sans-serif',
 39:         },
 40:       },
 41:     },
 42:   },
 43: }
 44: 
 45: const urlDepthChartOptions = {
 46:   ...commonChartOptions,
 47:   scales: {
 48:     x: {
 49:       ticks: {
 50:         font: {
 51:           family: '\'Helvetica Neue\', \'Helvetica\', \'Arial\', sans-serif',
 52:         },
 53:       },
 54:     },
 55:     y: {
 56:       beginAtZero: true,
 57:       ticks: {
 58:         font: {
 59:           family: '\'Helvetica Neue\', \'Helvetica\', \'Arial\', sans-serif',
 60:         },
 61:       },
 62:     },
 63:   },
 64: }
 65: 
 66: const protocolChartOptions = {
 67:   ...commonChartOptions,
 68:   plugins: {
 69:     ...commonChartOptions.plugins,
 70:     legend: {
 71:       ...commonChartOptions.plugins.legend,
 72:       position: 'bottom',
 73:     },
 74:   },
 75: }
 76: 
 77: const urlDepthChartData = computed(() => {
 78:   const depthStats = news_links.value?.depthStats ?? {}
 79:   return {
 80:     labels: Object.keys(depthStats),
 81:     datasets: [
 82:       {
 83:         label: 'New URLs',
 84:         data: Object.values(depthStats).map((stat: any) => stat?.new ?? 0),
 85:         backgroundColor: '#36A2EB',
 86:       },
 87:       {
 88:         label: 'Allowed URLs',
 89:         data: Object.values(depthStats).map((stat: any) => stat?.allowed ?? 0),
 90:         backgroundColor: '#FFCE56',
 91:       },
 92:     ],
 93:   }
 94: })
 95: 
 96: const protocolChartData = computed(() => ({
 97:   labels: ['HTTP', 'HTTPS'],
 98:   datasets: [
 99:     {
100:       data: [
101:         news_links.value?.protocolDistribution?.http ?? 0,
102:         news_links.value?.protocolDistribution?.https ?? 0,
103:       ],
104:       backgroundColor: ['#FF6384', '#36A2EB'],
105:     },
106:   ],
107: }))
108: 
109: const isSpiderActive = computed(() => !!news_links.value?.crawlDuration)
110: 
111: const rawDataArray = computed(() =>
112:   isSpiderActive.value
113:     ? [
114:         {
115:           title: 'Spider Metrics',
116:           data: {
117:             crawlDuration: news_links.value.crawlDuration,
118:             urlsPerSecond: news_links.value.urlsPerSecond,
119:             responseTimeStats: news_links.value.responseTimeStats,
120:             urlCounts: news_links.value.urlCounts,
121:             depthStats: news_links.value.depthStats,
122:             protocolDistribution: news_links.value.protocolDistribution,
123:           },
124:         },
125:         {
126:           title: 'URL Depth Data',
127:           data: urlDepthChartData.value,
128:         },
129:         {
130:           title: 'Protocol Distribution Data',
131:           data: protocolChartData.value,
132:         },
133:       ]
134:     : [],
135: )
136: </script>
137: 
138: <template>
139:   <div class="p-4">
140:     {{ news_links }}
141:     <div v-if="isConnected"> Connected </div>
142:     <div v-else> Disconnected </div>
143:     <div v-if="haveMetrics && isSpiderActive">
144:       <div class="mb-8">
145:         <h2 class="mb-4 text-2xl font-semibold"> Spider Metrics </h2>
146:         <div class="grid grid-cols-1 gap-4 pb-4 md:grid-cols-2 lg:grid-cols-3">
147:           <PrimeCard class="foreground">
148:             <template #title> Crawl Duration </template>
149:             <template #content>
150:               <div class="text-4xl font-bold"> {{ news_links.crawlDuration / 1000 }}s </div>
151:             </template>
152:           </PrimeCard>
153:           <PrimeCard class="shadow-md">
154:             <template #title> URLs per Second </template>
155:             <template #content>
156:               <div class="text-4xl font-bold">
157:                 {{ news_links.urlsPerSecond }}
158:               </div>
159:             </template>
160:           </PrimeCard>
161:           <PrimeCard class="shadow-md">
162:             <template #title> Avg Response Time </template>
163:             <template #content>
164:               <div class="text-4xl font-bold"> {{ news_links.responseTimeStats.average }}ms </div>
165:             </template>
166:           </PrimeCard>
167:         </div>
168:         <PrimeCard class="shadow-md">
169:           <template #title> Total URLs </template>
170:           <template #content>
171:             <div class="text-4xl font-bold">
172:               {{ news_links.urlCounts.total }}
173:             </div>
174:           </template>
175:         </PrimeCard>
176:         <PrimeCard class="shadow-md">
177:           <template #title> New URLs </template>
178:           <template #content>
179:             <div class="text-4xl font-bold">
180:               {{ news_links.urlCounts.new }}
181:             </div>
182:           </template>
183:         </PrimeCard>
184:         <PrimeCard class="shadow-md">
185:           <template #title> Allowed URLs </template>
186:           <template #content>
187:             <div class="text-4xl font-bold">
188:               {{ news_links.urlCounts.allowed }}
189:             </div>
190:           </template>
191:         </PrimeCard>
192:       </div>
193: 
194:       <div class="mt-6 grid grid-cols-1 gap-6 md:grid-cols-2">
195:         <PrimeChart
196:           ref="urlDepthChart"
197:           type="bar"
198:           :data="urlDepthChartData"
199:           :options="urlDepthChartOptions"
200:           class="h-64"
201:         />
202:         <PrimeChart
203:           ref="protocolChart"
204:           type="doughnut"
205:           :data="protocolChartData"
206:           :options="protocolChartOptions"
207:           class="h-64"
208:         />
209:       </div>
210:     </div>
211:     <div v-else>
212:       <div class="background border-color rounded-md border p-2 text-2xl font-semibold">
213:         Spider is not active
214:       </div>
215:     </div>
216:   </div>
217: </template>
```

## File: apps/admin-dashboard/components/TableGrowth.vue
```vue
  1: <script setup lang="ts">
  2: import { useChangeCase } from '@vueuse/integrations/useChangeCase'
  3: import { useErrorHandler } from '@ib/logger'
  4: 
  5: const supabase = useSupabaseClient()
  6: const { handleError } = useErrorHandler()
  7: const toast = useNotification()
  8: 
  9: const tables = [
 10:   'news',
 11:   'companies',
 12:   'company_urls',
 13:   'user_profiles',
 14:   'content_sources',
 15:   'contents',
 16:   'blacklisted_domains',
 17:   'blacklisted_urls',
 18:   'searches',
 19:   'research',
 20: ]
 21: 
 22: const growthData = ref<Record<string, any>>({})
 23: const isLoading = ref(true)
 24: const useFakeData = ref(false)
 25: 
 26: const fetchGrowthData = async (table: string) => {
 27:   if (useFakeData.value) {
 28:     return generateFakeGrowthData(table)
 29:   }
 30: 
 31:   try {
 32:     const [daily, weekly, monthly] = await Promise.all([
 33:       supabase.rpc('calculate_table_growth', {
 34:         p_table_name: table,
 35:         p_time_period: '1 day',
 36:         p_num_periods: 30,
 37:       }),
 38:       supabase.rpc('calculate_table_growth', {
 39:         p_table_name: table,
 40:         p_time_period: '1 week',
 41:         p_num_periods: 12,
 42:       }),
 43:       supabase.rpc('calculate_table_growth', {
 44:         p_table_name: table,
 45:         p_time_period: '1 month',
 46:         p_num_periods: 12,
 47:       }),
 48:     ])
 49: 
 50:     return {
 51:       daily: daily.data,
 52:       weekly: weekly.data,
 53:       monthly: monthly.data,
 54:     }
 55:   } catch (error) {
 56:     handleError(error, `Error fetching growth data for ${table}`)
 57:     return null
 58:   }
 59: }
 60: 
 61: const generateFakeGrowthData = (table: string) => {
 62:   const generatePeriodData = (periodCount: number, baseRowCount: number) => {
 63:     let rowCount = baseRowCount
 64:     return Array.from({ length: periodCount }, (_, i) => {
 65:       const growth = Math.random() * 0.1 - 0.05 // Random growth between -5% and 5%
 66:       rowCount = Math.max(0, Math.round(rowCount * (1 + growth)))
 67:       return {
 68:         period_end_time: new Date(Date.now() - (periodCount - i - 1) * 86400000).toISOString(),
 69:         row_count: rowCount,
 70:         growth_count: i === 0 ? 0 : rowCount - baseRowCount,
 71:         growth_percentage: i === 0 ? 0 : ((rowCount - baseRowCount) / baseRowCount) * 100,
 72:       }
 73:     })
 74:   }
 75: 
 76:   const baseRowCount = Math.floor(Math.random() * 10000) + 1000 // Random base count between 1000 and 11000
 77:   return {
 78:     daily: generatePeriodData(30, baseRowCount),
 79:     weekly: generatePeriodData(12, baseRowCount),
 80:     monthly: generatePeriodData(12, baseRowCount),
 81:   }
 82: }
 83: 
 84: const processGrowthData = (data: any) => {
 85:   if (!data) return null
 86: 
 87:   const getLatestGrowth = (periodData: any[]) => {
 88:     return periodData.sort(
 89:       (a, b) => new Date(b.period_end_time).getTime() - new Date(a.period_end_time).getTime(),
 90:     )[0]
 91:   }
 92: 
 93:   return {
 94:     daily: {
 95:       latest: getLatestGrowth(data.daily),
 96:       data: data.daily,
 97:     },
 98:     weekly: {
 99:       latest: getLatestGrowth(data.weekly),
100:       data: data.weekly,
101:     },
102:     monthly: {
103:       latest: getLatestGrowth(data.monthly),
104:       data: data.monthly,
105:     },
106:   }
107: }
108: 
109: const fetchAllGrowthData = async () => {
110:   for (const table of tables) {
111:     const data = await fetchGrowthData(table)
112:     growthData.value[table] = processGrowthData(data)
113:   }
114:   isLoading.value = false
115: }
116: 
117: const formatNumber = (num: number) => {
118:   if (isNaN(num) || num < 0) return 'N/A'
119:   return new Intl.NumberFormat().format(Math.round(num))
120: }
121: 
122: const formatPercentage = (num: number) => {
123:   if (isNaN(num)) return 'N/A'
124:   return `${num > 0 ? '+' : ''}${num.toFixed(2)}%`
125: }
126: 
127: const getGrowthClass = (growth: number) => {
128:   if (isNaN(growth)) return 'text-gray-500'
129:   return growth > 0 ? 'text-green-500' : growth < 0 ? 'text-red-500' : 'text-gray-500'
130: }
131: 
132: const getGrowthIcon = (growth: number) => {
133:   if (isNaN(growth)) return 'mdi:minus-circle-outline'
134:   return growth > 0
135:     ? 'material-symbols:trending-up-rounded'
136:     : growth < 0
137:       ? 'material-symbols:trending-down-rounded'
138:       : 'mdi:minus-circle-outline'
139: }
140: 
141: const totalRowCount = computed(() => {
142:   return Object.values(growthData.value).reduce((sum, table: any) => {
143:     const count = table?.daily?.latest.row_count || 0
144:     return sum + (count > 0 ? count : 0)
145:   }, 0)
146: })
147: 
148: const getSparklineData = (table: string, period: string) => {
149:   const data = growthData.value[table]?.[period]?.data || []
150: 
151:   const borderColor =
152:     growthData.value[table]?.[period]?.latest.growth_percentage > 0 ? '#4CAF50' : '#F44336'
153: 
154:   return {
155:     labels: data.map((d: any) => d.period_end_time),
156:     datasets: [
157:       {
158:         data: data.map((d: any) => d.row_count),
159:         borderColor,
160:         borderWidth: 2,
161:         fill: false,
162:         pointRadius: 0,
163:       },
164:     ],
165:   }
166: }
167: 
168: const sparklineOptions = {
169:   responsive: true,
170:   maintainAspectRatio: false,
171:   plugins: {
172:     legend: { display: false },
173:     tooltip: { enabled: false },
174:   },
175:   scales: { x: { display: false }, y: { display: false } },
176:   elements: {
177:     line: {
178:       tension: 0.4, // Smooth line
179:     },
180:     point: {
181:       radius: 0, // Hide points
182:     },
183:   },
184:   interaction: {
185:     intersect: false,
186:     mode: 'index',
187:     hover: {
188:       mode: null, // Disable hover mode
189:     },
190:   },
191:   animation: {
192:     duration: 0, // Disable all animations
193:   },
194: }
195: 
196: onMounted(async () => {
197:   try {
198:     await fetchAllGrowthData()
199:   } catch (error) {
200:     handleError(error, 'Error loading dashboard data')
201:     toast.error({
202:       summary: 'Data Load Error',
203:       message: 'Failed to load dashboard data. Please try again later.',
204:     })
205:   }
206: })
207: </script>
208: 
209: <template>
210:   <div class="table-growth-dashboard overflow-hidden bg-gray-900 p-4 text-white">
211:     <h1 class="mb-8 py-12 text-center text-5xl font-bold"> Table Growth Dashboard </h1>
212:     <div
213:       v-if="isLoading"
214:       class="flex h-64 items-center justify-center"
215:     >
216:       <PrimeProgressSpinner />
217:     </div>
218:     <div v-else>
219:       <div class="mb-8 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
220:         <IBGlass class="lg:col-start-2">
221:           <template #header>
222:             <h2 class="mb-2 text-2xl font-semibold"> Total Row Count </h2>
223:           </template>
224:           <template #default>
225:             <div class="text-5xl font-bold">
226:               {{ formatNumber(totalRowCount) }}
227:             </div>
228:           </template>
229:         </IBGlass>
230:       </div>
231:       <div class="mb-8 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
232:         <IBGlass
233:           v-for="table in tables"
234:           :key="table"
235:         >
236:           <template #header>
237:             <h2 class="pb-4 text-2xl font-bold">
238:               {{ useChangeCase(table, 'capitalCase') }}
239:             </h2>
240:           </template>
241:           <template #default>
242:             <div v-if="growthData[table]">
243:               <div
244:                 v-for="period in ['daily', 'weekly', 'monthly']"
245:                 :key="period"
246:                 class="mb-2"
247:               >
248:                 <div class="flex items-center justify-between">
249:                   <strong class="capitalize">{{ period }} Growth:</strong>
250:                   <div class="flex items-center">
251:                     <Icon
252:                       :name="getGrowthIcon(growthData[table][period].latest.growth_percentage)"
253:                       :class="getGrowthClass(growthData[table][period].latest.growth_percentage)"
254:                       class="mr-2"
255:                       size="24px"
256:                     />
257:                     <span
258:                       :class="getGrowthClass(growthData[table][period].latest.growth_percentage)"
259:                     >
260:                       {{ formatPercentage(growthData[table][period].latest.growth_percentage) }}
261:                     </span>
262:                   </div>
263:                 </div>
264:                 <PrimeChart
265:                   type="line"
266:                   :data="getSparklineData(table, period)"
267:                   :options="sparklineOptions"
268:                   class="mt-1 h-8"
269:                 />
270:               </div>
271:               <div class="mt-4">
272:                 <strong>Total Rows:</strong>
273:                 {{ formatNumber(growthData[table].daily.latest.row_count) }}
274:               </div>
275:             </div>
276:             <div
277:               v-else
278:               class="italic text-gray-400"
279:             >
280:               No data available
281:             </div>
282:           </template>
283:         </IBGlass>
284:       </div>
285:     </div>
286:   </div>
287: </template>
288: 
289: <style scoped>
290: .table-growth-dashboard {
291:   font-family: 'Arial', sans-serif;
292: }
293: .p-card {
294:   transition: all 0.3s ease;
295: }
296: .p-card:hover {
297:   transform: translateY(-5px);
298:   box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
299: }
300: </style>
```

## File: apps/admin-dashboard/components/Upload.vue
```vue
  1: <script setup lang="ts">
  2: import { useFileUpload } from '#imports'
  3: 
  4: const user = useSupabaseUser()
  5: 
  6: const {
  7:   uploadFile,
  8:   queueUpload,
  9:   cancelUpload,
 10:   clearQueue,
 11:   isUploading,
 12:   isProcessing,
 13:   uploadProgress,
 14:   currentUpload,
 15:   uploadQueue,
 16: } = useFileUpload()
 17: 
 18: const buckets = [
 19:   { name: 'user-profiles', label: 'User Profiles' },
 20:   { name: 'public-assets', label: 'Public Assets' },
 21:   { name: 'private-documents', label: 'Private Documents' },
 22: ]
 23: 
 24: const paths = {
 25:   'user-profiles': ['avatars', 'cover-photos', 'galleries'],
 26:   'public-assets': ['blog-images', 'marketing-materials'],
 27:   'private-documents': ['user-uploads'],
 28: }
 29: 
 30: const fileTypes = [
 31:   { name: 'avatar', label: 'Avatar' },
 32:   { name: 'cover-photo', label: 'Cover Photo' },
 33:   { name: 'gallery-image', label: 'Gallery Image' },
 34:   { name: 'document', label: 'Document' },
 35:   { name: 'other', label: 'Other' },
 36: ]
 37: 
 38: const bucket = ref(buckets[0].name)
 39: const path = ref(paths[bucket.value][0])
 40: const fileType = ref(fileTypes[0].name)
 41: 
 42: const maxFileSize = ref(5 * 1024 * 1024) // 5MB
 43: 
 44: const allowedMimeTypes = ref(['image/*', 'application/pdf'])
 45: 
 46: const uploadedFiles = ref<any[]>([])
 47: 
 48: const onUpload = (event: any) => {
 49:   uploadedFiles.value.push(...event.files)
 50: }
 51: 
 52: const onSelect = (event: any) => {
 53:   event.files.forEach((file: File) => {
 54:     queueUpload(file, {
 55:       bucket: bucket.value,
 56:       path: path.value,
 57:       fileType: fileType.value as any,
 58:       userId: user.value?.id,
 59:       optimizeImage: true,
 60:       maxWidth: 1200,
 61:       maxHeight: 1200,
 62:       quality: 80,
 63:       format: 'webp',
 64:       rateLimitMs: 1000,
 65:       maxFileSize: maxFileSize.value,
 66:       allowedMimeTypes: allowedMimeTypes.value,
 67:       onProgress: (progress) => {
 68:         console.log(`Upload progress: ${progress}%`)
 69:       },
 70:       auditLog: async (action, details) => {
 71:         console.log(action, details)
 72:         // Implement your audit logging here
 73:       },
 74:     })
 75:   })
 76: }
 77: 
 78: const onRemove = (event: any) => {
 79:   console.log('File removed:', event.file)
 80: }
 81: 
 82: const formatSize = (bytes: number) => {
 83:   if (bytes === 0) return '0 B'
 84:   const k = 1024
 85:   const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
 86:   const i = Math.floor(Math.log(bytes) / Math.log(k))
 87:   return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
 88: }
 89: 
 90: const totalSize = computed(() => {
 91:   return formatSize(uploadQueue.value.reduce((acc, file) => acc + file.size, 0))
 92: })
 93: 
 94: const totalSizePercent = computed(() => {
 95:   const total = uploadQueue.value.reduce((acc, file) => acc + file.size, 0)
 96:   return (total / maxFileSize.value) * 100
 97: })
 98: 
 99: const uploadEvent = (uploadCallback: () => void) => {
100:   uploadCallback()
101: }
102: 
103: const fileURL = (file: File) => URL.createObjectURL(file)
104: 
105: watch(bucket, (newBucket) => {
106:   path.value = paths[newBucket][0]
107: })
108: </script>
109: 
110: <template>
111:   <div class="p-4">
112:     <h2 class="mb-4 text-2xl font-bold"> File Uploads </h2>
113:     <div class="mb-4 flex flex-wrap gap-4">
114:       <span class="flex flex-col gap-2">
115:         <label
116:           for="bucket"
117:           class="pl-2"
118:           >Bucket</label
119:         >
120:         <PrimeSelect
121:           id="bucket"
122:           v-model="bucket"
123:           :options="buckets"
124:           option-label="label"
125:           option-value="name"
126:         />
127:       </span>
128:       <span class="flex flex-col gap-2">
129:         <label
130:           for="path"
131:           class="pl-2"
132:           >Path</label
133:         >
134:         <PrimeSelect
135:           id="path"
136:           v-model="path"
137:           :options="paths[bucket]"
138:         />
139:       </span>
140:       <span class="flex flex-col gap-2">
141:         <label
142:           for="fileType"
143:           class="pl-2"
144:           >File Type</label
145:         >
146:         <PrimeSelect
147:           id="fileType"
148:           v-model="fileType"
149:           :options="fileTypes"
150:           option-label="label"
151:           option-value="name"
152:         />
153:       </span>
154:     </div>
155:     <PrimeFileUpload
156:       name="demo[]"
157:       url="/api/upload"
158:       :multiple="true"
159:       accept="image/*,application/pdf"
160:       :max-file-size="maxFileSize"
161:       @upload="onUpload"
162:       @select="onSelect"
163:       @remove="onRemove"
164:     >
165:       <template #header="{ chooseCallback, uploadCallback, clearCallback, files }">
166:         <div class="flex flex-1 flex-wrap items-center justify-between gap-4">
167:           <div class="flex gap-2">
168:             <PrimeButton
169:               rounded
170:               outlined
171:               severity="contrast"
172:               @click="chooseCallback()"
173:             >
174:               <Icon
175:                 name="mdi:file-image"
176:                 size="32px"
177:               />
178:             </PrimeButton>
179:             <PrimeButton
180:               rounded
181:               outlined
182:               severity="success"
183:               :disabled="!files || files.length === 0"
184:               @click="uploadEvent(uploadCallback)"
185:             >
186:               <Icon
187:                 name="mdi:cloud-upload"
188:                 size="32px"
189:               />
190:             </PrimeButton>
191:             <PrimeButton
192:               rounded
193:               outlined
194:               severity="danger"
195:               :disabled="!files || files.length === 0"
196:               @click="clearCallback()"
197:             >
198:               <Icon
199:                 name="mdi:delete"
200:                 size="32px"
201:               />
202:             </PrimeButton>
203:           </div>
204:           <PrimeProgressBar
205:             :value="totalSizePercent"
206:             :show-value="false"
207:             class="md:w-20rem h-1 w-full md:ml-auto"
208:           >
209:             <span class="whitespace-nowrap">{{ totalSize }} / {{ formatSize(maxFileSize) }}</span>
210:           </PrimeProgressBar>
211:         </div>
212:       </template>
213:       <template #content="{ files, removeUploadedFileCallback, removeFileCallback }">
214:         <div class="flex flex-col gap-8 pt-4">
215:           <div v-if="files.length > 0">
216:             <h5>Pending</h5>
217:             <div class="flex flex-wrap gap-4">
218:               <div
219:                 v-for="(file, index) of files"
220:                 :key="file.name + file.type + file.size"
221:                 class="flex flex-col items-center gap-4 border p-8 border-surface rounded-border"
222:               >
223:                 <div>
224:                   <NuxtImg
225:                     v-if="file.type.startsWith('image/')"
226:                     role="presentation"
227:                     :alt="file.name"
228:                     :src="fileURL(file)"
229:                     width="100"
230:                     height="50"
231:                   />
232:                   <Icon
233:                     v-else
234:                     name="mdi:file"
235:                     class="text-4xl"
236:                   ></Icon>
237:                 </div>
238:                 <span
239:                   class="max-w-60 overflow-hidden text-ellipsis whitespace-nowrap font-semibold"
240:                   >{{ file.name }}</span
241:                 >
242:                 <div>{{ formatSize(file.size) }}</div>
243:                 <PrimeBadge
244:                   value="Pending"
245:                   severity="warn"
246:                 />
247:                 <PrimeButton
248:                   icon="pi pi-times"
249:                   outlined
250:                   rounded
251:                   severity="danger"
252:                   @click="removeFileCallback(index)"
253:                 />
254:               </div>
255:             </div>
256:           </div>
257:           <div v-if="uploadedFiles.length > 0">
258:             <h5>Completed</h5>
259:             <div class="flex flex-wrap gap-4">
260:               <div
261:                 v-for="(file, index) of uploadedFiles"
262:                 :key="file.name + file.type + file.size"
263:                 class="flex flex-col items-center gap-4 border p-8 border-surface rounded-border"
264:               >
265:                 <div>
266:                   <NuxtImg
267:                     v-if="file.type.startsWith('image/')"
268:                     role="presentation"
269:                     :alt="file.name"
270:                     :src="fileURL(file)"
271:                     width="100"
272:                     height="50"
273:                   />
274:                   <Icon
275:                     v-else
276:                     name="mdi:cloud-upload"
277:                     class="text-4xl"
278:                   ></Icon>
279:                 </div>
280:                 <span
281:                   class="max-w-60 overflow-hidden text-ellipsis whitespace-nowrap font-semibold"
282:                   >{{ file.name }}</span
283:                 >
284:                 <div>{{ formatSize(file.size) }}</div>
285:                 <PrimeBadge
286:                   value="Completed"
287:                   class="mt-4"
288:                   severity="success"
289:                 />
290:                 <PrimeButton
291:                   outlined
292:                   rounded
293:                   severity="danger"
294:                   @click="removeUploadedFileCallback(index)"
295:                 >
296:                   <Icon name="mdi:delete" />
297:                 </PrimeButton>
298:               </div>
299:             </div>
300:           </div>
301:         </div>
302:       </template>
303:       <template #empty>
304:         <div class="flex flex-col items-center justify-center">
305:           <div
306:             class="flex h-20 w-20 items-center justify-center rounded-full border-2 bg-primary-500 text-white"
307:           >
308:             <Icon
309:               name="mdi:cloud-upload"
310:               size="48px"
311:             />
312:           </div>
313:           <p class="mb-0 mt-6"> Drag and drop files here to upload. </p>
314:         </div>
315:       </template>
316:     </PrimeFileUpload>
317:   </div>
318: </template>
```

## File: apps/admin-dashboard/components/UserProfiles.vue
```vue
 1: <script setup lang="ts">
 2: const editingRows = ref([])
 3: 
 4: const admin = useAdmin()
 5: 
 6: const {
 7:   store: userProfiles,
 8:   loadMore,
 9:   refresh,
10: } = await useSelectData<User>('user_profiles', {
11:   columns: 'id, given_name, surname, avatar, email, created_at, updated_at',
12:   filters: { content_status: { eq: 'pending_agent_action' } },
13:   orderBy: { column: 'created_at', ascending: false },
14:   initialFetch: true,
15:   pagination: { page: 1, limit: 20 },
16: })
17: 
18: const onRowEditSave = async (event) => {
19:   const { data, newData } = event
20: 
21:   // Update the user profile in Supabase
22:   await admin.updateUser(newData, data.id)
23: }
24: </script>
25: 
26: <template>
27:   <div>
28:     <PrimeDataTable
29:       v-model:editing-rows="editingRows"
30:       :value="userProfiles"
31:       edit-mode="row"
32:       data-key="id"
33:       :pt="{
34:         table: { style: 'min-width: 50rem' },
35:         column: {
36:           bodycell: ({ state }) => ({
37:             style: state['d_editing'] && 'padding-top: 0.6rem; padding-bottom: 0.6rem',
38:           }),
39:         },
40:       }"
41:       @row-edit-save="onRowEditSave"
42:     >
43:       <PrimeColumn
44:         field="id"
45:         header="ID"
46:         style="width: 10%"
47:       ></PrimeColumn>
48:       <PrimeColumn
49:         field="first_name"
50:         header="First Name"
51:         style="width: 20%"
52:       >
53:         <template #editor="{ data, field }">
54:           <PrimeInputText v-model="data[field]" />
55:         </template>
56:       </PrimeColumn>
57:       <PrimeColumn
58:         field="last_name"
59:         header="Last Name"
60:         style="width: 20%"
61:       >
62:         <template #editor="{ data, field }">
63:           <PrimeInputText v-model="data[field]" />
64:         </template>
65:       </PrimeColumn>
66:       <PrimeColumn
67:         field="email"
68:         header="Email"
69:         style="width: 30%"
70:       >
71:         <template #editor="{ data, field }">
72:           <PrimeInputText v-model="data[field]" />
73:         </template>
74:       </PrimeColumn>
75:       <PrimeColumn
76:         :row-editor="true"
77:         style="width: 10%; min-width: 8rem"
78:         body-style="text-align:center"
79:       ></PrimeColumn>
80:     </PrimeDataTable>
81:   </div>
82: </template>
```

## File: apps/admin-dashboard/composables/createAdminDashboard.ts
```typescript
  1: import DataTable from 'primevue/datatable'
  2: import Column from 'primevue/column'
  3: import InputText from 'primevue/inputtext'
  4: import Button from 'primevue/button'
  5: import Dialog from 'primevue/dialog'
  6: import type { DataTableFilterMeta } from 'primevue/datatable'
  7: import ConfirmDialog from 'primevue/confirmdialog'
  8: import { useConfirm } from 'primevue/useconfirm'
  9: import { useStorage } from '@vueuse/core'
 10: import type { createCRUDComposable } from './crud-factory.js'
 11: import { Icon } from '#components'
 12: 
 13: export interface AdminColumn<T> {
 14:   field: keyof T
 15:   header: string
 16:   sortable?: boolean
 17:   filter?: boolean
 18:   filterMatchMode?: string
 19:   bodyComponent?: (item: T) => any
 20:   editComponent?: (item: T, field: keyof T) => any
 21:   insertComponent?: () => any
 22:   width?: string
 23: }
 24: 
 25: export function createAdminDashboard<T extends { id: string | number }>(
 26:   entityName: string,
 27:   columns: AdminColumn<T>[],
 28:   useEntityComposable: () => ReturnType<ReturnType<typeof createCRUDComposable<T>>>,
 29: ) {
 30:   return defineComponent({
 31:     name: `${entityName}AdminDashboard`,
 32:     props: {
 33:       title: {
 34:         type: String,
 35:         default: `Manage ${entityName}`,
 36:       },
 37:       customActions: {
 38:         type: Object as PropType<Record<string, (item: T) => void>>,
 39:         default: () => ({}),
 40:       },
 41:       class: 'p-4',
 42:     },
 43:     setup(props) {
 44:       const { entities, isLoading, fetchEntities, insertEntity, updateEntity, deleteEntity } =
 45:         useEntityComposable()
 46:       const confirm = useConfirm()
 47:       const filters = ref({})
 48:       const showInsertDialog = ref(false)
 49:       const newEntity = ref({} as Omit<T, 'id'>)
 50: 
 51:       const orderedColumns = ref<(keyof T)[]>(columns.map((col) => col.field))
 52:       const handleRowEditSave = async (event: { data: T; newData: Partial<T> }) => {
 53:         try {
 54:           await updateEntity(event.data.id, event.newData)
 55:         } catch (error) {
 56:           // Handle error (e.g., show toast message)
 57:         }
 58:       }
 59: 
 60:       const onColumnReorder = (event: { dragIndex: number; dropIndex: number }) => {
 61:         const newOrder = [...orderedColumns.value]
 62:         const [reorderedItem] = newOrder.splice(event.dragIndex, 1)
 63:         newOrder.splice(event.dropIndex, 0, reorderedItem)
 64:         orderedColumns.value = newOrder
 65:       }
 66: 
 67:       const onCellEditComplete = async (event) => {
 68:         const { data, newValue, field, oldValue } = event
 69:         // 4. Only trigger the update function if the value has changed
 70:         if (newValue !== oldValue) {
 71:           console.log('updating', newValue, oldValue)
 72:           try {
 73:             await updateEntity(data.id, { [field]: newValue })
 74:           } catch (error) {
 75:             // Handle error (e.g., show toast message)
 76:           }
 77:         }
 78:       }
 79: 
 80:       const handleDeleteEntity = (item: T) => {
 81:         confirm.require({
 82:           message: `Are you sure you want to delete this ${entityName}?`,
 83:           header: 'Delete Confirmation',
 84:           icon: 'pi pi-exclamation-triangle',
 85:           accept: async () => {
 86:             try {
 87:               await deleteEntity(item.id)
 88:               // Show success message
 89:             } catch (error) {
 90:               // Handle error (e.g., show toast message)
 91:             }
 92:           },
 93:         })
 94:       }
 95: 
 96:       const handleInsertEntity = async () => {
 97:         try {
 98:           await insertEntity(newEntity.value)
 99:           showInsertDialog.value = false
100:           newEntity.value = {} as Omit<T, 'id'>
101:           // Show success message
102:         } catch (error) {
103:           // Handle error (e.g., show toast message)
104:         }
105:       }
106: 
107:       onMounted(() => {
108:         fetchEntities()
109:       })
110: 
111:       return {
112:         entities,
113:         isLoading,
114:         handleRowEditSave,
115:         handleDeleteEntity,
116:         handleInsertEntity,
117:         onCellEditComplete,
118:         onColumnReorder,
119:         filters,
120:         showInsertDialog,
121:         newEntity,
122:         orderedColumns,
123:       }
124:     },
125:     render() {
126:       return h('div', { class: 'admin-dashboard-wrapper' }, [
127:         h('div', { class: 'admin-dashboard-headder p-4' }, [
128:           this.$slots.title
129:             ? this.$slots.title()
130:             : h('h2', { class: 'text-2xl font-bold mb-4' }, this.title),
131:           h(Button, {
132:             label: `Add New ${entityName}`,
133:             class: 'p-button-success mb-4',
134:             onClick: () => (this.showInsertDialog = true),
135:           }),
136:         ]),
137:         h('div', { class: 'admin-dashboard-content' }, [
138:           h(
139:             DataTable,
140:             {
141:               value: this.entities,
142:               paginator: true,
143:               rows: 100,
144:               filters: this.filters,
145:               editMode: 'cell',
146:               onCellEditComplete: this.onCellEditComplete,
147:               loading: this.isLoading,
148:               responsiveLayout: 'scroll',
149:               resizableColumns: true,
150:               columnResizeMode: 'expand',
151:               showGridlines: true,
152:               reorderableColumns: true,
153:               onColumnReorder: this.onColumnReorder,
154:             },
155:             {
156:               header: () =>
157:                 h('div', { class: 'flex justify-between' }, [
158:                   h(InputText, {
159:                     'modelValue': this.filters['global']?.value,
160:                     'onUpdate:modelValue': (value) => {
161:                       this.filters['global'] = { value, matchMode: 'contains' }
162:                     },
163:                     'placeholder': 'Global Search',
164:                   }),
165:                 ]),
166:               default: () =>
167:                 this.orderedColumns
168:                   .map((field, index) => {
169:                     const col = columns.find((c) => c.field === field)
170:                     if (!col) return null
171:                     return h(
172:                       Column,
173:                       {
174:                         key: col.field,
175:                         field: col.field,
176:                         header: col.header,
177:                         sortable: col.sortable ?? true,
178:                         filter: col.filter ?? true,
179:                         filterMatchMode: col.filterMatchMode ?? 'contains',
180:                         class: 'whitespace-nowrap overflow-hidden',
181:                         style: { maxWidth: col.width || '200px' },
182:                       },
183:                       {
184:                         body: (slotProps) =>
185:                           col.bodyComponent
186:                             ? col.bodyComponent(slotProps.data)
187:                             : slotProps.data[col.field],
188:                         editor: (slotProps) =>
189:                           col.editComponent
190:                             ? col.editComponent(slotProps.data, col.field)
191:                             : h(InputText, {
192:                                 'modelValue': slotProps.data[col.field],
193:                                 'onUpdate:modelValue': (value) =>
194:                                   (slotProps.data[col.field] = value),
195:                               }),
196:                       },
197:                     )
198:                   })
199:                   .filter(Boolean)
200:                   .concat([
201:                     h(Column, {
202:                       key: 'row-editor',
203:                       rowEditor: true,
204:                       style: { width: '10%', minWidth: '8rem' },
205:                     }),
206:                     h(
207:                       Column,
208:                       {
209:                         key: 'actions',
210:                         header: 'Actions',
211:                         style: { width: '10%', minWidth: '8rem' },
212:                         class: 'whitespace-nowrap',
213:                       },
214:                       {
215:                         body: (slotProps) => [
216:                           h(Button, {
217:                             label: 'delete',
218:                             severity: 'danger',
219:                             size: 'small',
220:                             onClick: () => this.handleDeleteEntity(slotProps.data),
221:                           }),
222:                           ...Object.entries(this.customActions).map(([label, action]) =>
223:                             h(Button, {
224:                               label,
225:                               onClick: () => action(slotProps.data),
226:                             }),
227:                           ),
228:                         ],
229:                       },
230:                     ),
231:                   ]),
232:             },
233:           ),
234:           h(
235:             Dialog,
236:             {
237:               'header': `Add New ${entityName}`,
238:               'visible': this.showInsertDialog,
239:               'onUpdate:visible': (value) => (this.showInsertDialog = value),
240:               'style': { width: '50vw' },
241:             },
242:             {
243:               default: () => [
244:                 ...this.orderedColumns
245:                   .filter((col) => col.field !== 'id')
246:                   .map((col) =>
247:                     h('div', { class: 'field' }, [
248:                       h('label', { for: col.field }, col.header),
249:                       col.insertComponent
250:                         ? col.insertComponent()
251:                         : h(InputText, {
252:                             'id': col.field,
253:                             'modelValue': this.newEntity[col.field],
254:                             'onUpdate:modelValue': (value) => (this.newEntity[col.field] = value),
255:                             'class': 'w-full',
256:                           }),
257:                     ]),
258:                   ),
259:                 h(Button, {
260:                   label: `Add ${entityName}`,
261:                   onClick: this.handleInsertEntity,
262:                 }),
263:               ],
264:             },
265:           ),
266:           h(ConfirmDialog),
267:         ]),
268:       ])
269:     },
270:   })
271: }
```

## File: apps/admin-dashboard/composables/crud-factory.ts
```typescript
  1: import { useErrorHandler, AppError, ErrorType, ErrorSeverity } from '@ib/logger'
  2: import { useUpdateData, useSelectData, useDeleteData, useInsertData } from '#imports'
  3: 
  4: export interface CRUDOptions<T> {
  5:   initialFetch?: boolean
  6:   orderBy?: { column: keyof T; ascending: boolean }
  7:   limit?: number
  8:   customSelectLogic?: (data: T[]) => T[]
  9:   validateInsert?: (data: Omit<T, 'id'>) => boolean | Promise<boolean>
 10:   validateUpdate?: (data: Partial<T>) => boolean | Promise<boolean>
 11:   validateDelete?: (id: string | number) => boolean | Promise<boolean>
 12:   afterInsert?: (insertedItem: T) => void | Promise<void>
 13:   afterUpdate?: (updatedItem: T) => void | Promise<void>
 14:   afterDelete?: (deletedId: string | number) => void | Promise<void>
 15: }
 16: 
 17: export function createCRUDComposable<T extends { id: string | number }>(
 18:   entityName: string,
 19:   options: CRUDOptions<T> = {},
 20: ) {
 21:   return function () {
 22:     const { store, isSelecting, loadMore } = useSelectData<T>(entityName, {
 23:       initialFetch: options.initialFetch ?? true,
 24:       orderBy: options.orderBy as any,
 25:       limit: options.limit ?? 100,
 26:     })
 27: 
 28:     const { insertData, isInserting } = useInsertData<T>(entityName)
 29:     const { updateData, isUpdating } = useUpdateData<T>(entityName)
 30:     const { deleteData, isDeleting } = useDeleteData<T>(entityName)
 31:     const { handleError } = useErrorHandler()
 32: 
 33:     const entities = computed(() => {
 34:       const data = store.items
 35:       return options.customSelectLogic ? options.customSelectLogic(data as T[]) : data
 36:     })
 37: 
 38:     const isLoading = computed(() => isSelecting.value || isUpdating.value || isDeleting.value)
 39: 
 40:     const fetchEntities = async () => {
 41:       try {
 42:         await loadMore()
 43:       } catch (error: any) {
 44:         handleError(error, `Error fetching ${entityName}`)
 45:       }
 46:     }
 47: 
 48:     const insertEntity = async (data: Omit<T, 'id'>) => {
 49:       try {
 50:         if (options.validateInsert && !(await options.validateInsert(data))) {
 51:           throw new AppError({
 52:             type: ErrorType.VALIDATION_ERROR,
 53:             message: 'Insert validation failed',
 54:             severity: ErrorSeverity.MEDIUM,
 55:             stack: 'no stack',
 56:             context: `${entityName} insert`,
 57:           })
 58:         }
 59:         const insertedItem = (await insertData(data as T)) as T
 60:         if (options.afterInsert) {
 61:           await options.afterInsert(insertedItem)
 62:         }
 63:         await fetchEntities() // Refresh the list after insertion
 64:         return insertedItem
 65:       } catch (error: any) {
 66:         handleError(error, `Error inserting ${entityName}`)
 67:         throw error
 68:       }
 69:     }
 70: 
 71:     const updateEntity = async (id: string | number, data: Partial<T>) => {
 72:       try {
 73:         if (options.validateUpdate && !(await options.validateUpdate(data))) {
 74:           throw new AppError({
 75:             type: ErrorType.VALIDATION_ERROR,
 76:             message: 'Update validation failed',
 77:             severity: ErrorSeverity.MEDIUM,
 78:             context: `${entityName} update`,
 79:             stack: 'no stack',
 80:           })
 81:         }
 82:         const updatedItem = await updateData(id, data)
 83:         if (options.afterUpdate) {
 84:           await options.afterUpdate(updatedItem)
 85:         }
 86:         return updatedItem
 87:       } catch (error: any) {
 88:         handleError(error, `Error updating ${entityName}`)
 89:         throw error
 90:       }
 91:     }
 92: 
 93:     const deleteEntity = async (id: string | number) => {
 94:       try {
 95:         if (options.validateDelete && !(await options.validateDelete(id))) {
 96:           throw new AppError({
 97:             type: ErrorType.VALIDATION_ERROR,
 98:             message: 'Delete validation failed',
 99:             severity: ErrorSeverity.MEDIUM,
100:             context: `${entityName} delete`,
101:             stack: 'no stack',
102:           })
103:         }
104:         await deleteData(id)
105:         if (options.afterDelete) {
106:           await options.afterDelete(id)
107:         }
108:         await fetchEntities() // Refresh the list after deletion
109:       } catch (error: any) {
110:         handleError(error, `Error deleting ${entityName}`)
111:         throw error
112:       }
113:     }
114: 
115:     return {
116:       entities,
117:       isLoading,
118:       insertEntity,
119:       fetchEntities,
120:       updateEntity,
121:       deleteEntity,
122:     }
123:   }
124: }
```

## File: apps/admin-dashboard/composables/useFinancials.ts
```typescript
  1: import data from '../assets/business-financials.json'
  2: 
  3: function formatNumber(value: number, style: 'INR' | 'USD' = 'INR'): string {
  4:   const absValue = Math.abs(value)
  5:   let formattedNumber
  6: 
  7:   switch (style) {
  8:     case 'INR':
  9:       if (absValue >= 1_00_00_00_000) {
 10:         formattedNumber = `${(absValue / 1_00_00_00_000).toFixed(2)} T`
 11:       } else if (absValue >= 1_00_00_000) {
 12:         formattedNumber = `${(absValue / 1_00_00_000).toFixed(2)} CR`
 13:       } else if (absValue >= 1_00_000) {
 14:         formattedNumber = `${(absValue / 1_00_000).toFixed(2)} L`
 15:       } else if (absValue >= 1_000) {
 16:         formattedNumber = `${(absValue / 1_000).toFixed(2)} K`
 17:       } else {
 18:         formattedNumber = absValue.toFixed(2)
 19:       }
 20:       break
 21:     case 'USD':
 22:       if (absValue >= 1_000_000_000) {
 23:         formattedNumber = `${(absValue / 1_000_000_000).toFixed(2)} B`
 24:       } else if (absValue >= 1_000_000) {
 25:         formattedNumber = `${(absValue / 1_000_000).toFixed(2)} M`
 26:       } else if (absValue >= 1_000) {
 27:         formattedNumber = `${(absValue / 1_000).toFixed(2)} K`
 28:       } else {
 29:         formattedNumber = absValue.toString()
 30:       }
 31:       break
 32:   }
 33: 
 34:   return value < 0 ? '-' + formattedNumber : formattedNumber
 35: }
 36: 
 37: function formatCurrency(amount: number, currencyType: 'INR' | 'USD'): string {
 38:   const formattedNumber = formatNumber(amount, currencyType)
 39:   const currencySymbol = currencyType === 'INR' ? '₹' : '$'
 40:   return `${currencySymbol}${formattedNumber}`
 41: }
 42: 
 43: function formatStorage(sizeInGB: number): string {
 44:   const absSize = Math.abs(sizeInGB)
 45:   let formattedSize: string
 46: 
 47:   if (absSize >= 1_000_000) {
 48:     formattedSize = `${(absSize / 1_000_000).toFixed(2)} PB`
 49:   } else if (absSize >= 1_000) {
 50:     formattedSize = `${(absSize / 1_000).toFixed(2)} TB`
 51:   } else if (absSize >= 1) {
 52:     formattedSize = `${absSize.toFixed(2)} GB`
 53:   } else {
 54:     formattedSize = `${(absSize * 1_000).toFixed(2)} MB`
 55:   }
 56: 
 57:   return sizeInGB < 0 ? '-' + formattedSize : formattedSize
 58: }
 59: 
 60: function findLargestValue(values: number[]): number {
 61:   return Math.max(...values)
 62: }
 63: 
 64: const colorPalette = {
 65:   darkBlue: [0, 102, 255],
 66:   mediumBlue: [83, 104, 120],
 67:   lightBlue: [122, 138, 153],
 68:   darkGray: [161, 176, 186],
 69:   mediumGray: [182, 194, 207],
 70:   lightGray: [199, 210, 221],
 71:   veryLightGray: [216, 226, 235],
 72:   extraLightGray: [233, 241, 245],
 73:   darkRed: [139, 0, 0],
 74:   mediumRed: [178, 34, 34],
 75:   lightRed: [220, 20, 60],
 76:   darkGreen: [0, 100, 0],
 77:   mediumGreen: [34, 139, 34],
 78:   lightGreen: [46, 139, 87],
 79:   darkOrange: [255, 140, 0],
 80:   mediumOrange: [255, 165, 0],
 81:   lightOrange: [255, 215, 0],
 82:   darkPurple: [75, 0, 130],
 83:   mediumPurple: [138, 43, 226],
 84:   lightPurple: [147, 112, 219],
 85:   darkPink: [255, 20, 147],
 86:   mediumPink: [255, 105, 180],
 87:   lightPink: [255, 182, 193],
 88:   darkYellow: [255, 255, 0],
 89:   mediumYellow: [255, 255, 0],
 90:   lightYellow: [255, 255, 153],
 91:   darkCyan: [0, 139, 139],
 92:   mediumCyan: [0, 255, 255],
 93:   lightCyan: [224, 255, 255],
 94:   darkBrown: [139, 69, 19],
 95:   mediumBrown: [160, 82, 45],
 96:   lightBrown: [210, 105, 30],
 97:   black: [0, 0, 0],
 98: }
 99: 
100: type ColorName =
101:   | 'darkBlue'
102:   | 'mediumBlue'
103:   | 'lightBlue'
104:   | 'darkGray'
105:   | 'mediumGray'
106:   | 'lightGray'
107:   | 'veryLightGray'
108:   | 'extraLightGray'
109:   | 'darkRed'
110:   | 'mediumRed'
111:   | 'lightRed'
112:   | 'darkGreen'
113:   | 'mediumGreen'
114:   | 'lightGreen'
115:   | 'darkOrange'
116:   | 'mediumOrange'
117:   | 'lightOrange'
118:   | 'darkPurple'
119:   | 'mediumPurple'
120:   | 'lightPurple'
121:   | 'darkPink'
122:   | 'mediumPink'
123:   | 'lightPink'
124:   | 'darkYellow'
125:   | 'mediumYellow'
126:   | 'lightYellow'
127:   | 'darkCyan'
128:   | 'mediumCyan'
129:   | 'lightCyan'
130:   | 'darkBrown'
131:   | 'mediumBrown'
132:   | 'lightBrown'
133:   | 'black'
134: 
135: interface FinancialDataItem {
136:   [key: string]: any
137: }
138: 
139: interface FinancialData {
140:   [key: string]: FinancialDataItem[] | number[] | string[]
141: }
142: 
143: // Function to convert RGB to RGBA
144: function rgba(colorName: ColorName, opacity: number = 1): string {
145:   const color = colorPalette[colorName]
146:   return `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${opacity})`
147: }
148: 
149: export default function useFinancials() {
150:   const globalChartRange = reactive({ start: 0, end: 12 })
151: 
152:   const filteredData = reactive(
153:     Object.entries(data).reduce((acc, [key, value]) => {
154:       if (Array.isArray(value)) {
155:         acc[key] = value.slice(globalChartRange.start, globalChartRange.end)
156:       } else {
157:         acc[key] = value
158:       }
159:       return acc
160:     }, {} as FinancialData),
161:   )
162: 
163:   // function updateGlobalRange(newRange: { start: number; end: number }): void {
164:   //   globalChartRange.start = newRange.start
165:   //   globalChartRange.end = newRange.end
166:   //   // Re-filter data when range changes
167:   // }
168: 
169:   const haveData = computed(() => !!filteredData && filteredData.months?.length > 0)
170: 
171:   const months = computed(() => filteredData?.months?.map((month: number) => `M${month}`) || [])
172: 
173:   console.log('data in composable:', filteredData)
174: 
175:   return {
176:     ...toRefs(filteredData),
177:     haveData,
178:     months,
179:     formatCurrency,
180:     formatNumber,
181:     formatStorage,
182:     updateGlobalRange: () => console.log('hi'),
183:     findLargestValue,
184:     rgba,
185:   }
186: }
```

## File: apps/admin-dashboard/composables/useServerAnalytics.client.ts
```typescript
  1: import { defineStore } from 'pinia'
  2: import { ref, reactive, onUnmounted, watchEffect } from 'vue'
  3: 
  4: export const useServerAnalyticsStore = defineStore('serverAnalytics', () => {
  5:   const company = reactive({})
  6:   const queue = reactive({})
  7:   const performance = reactive({})
  8:   const news_links = reactive({})
  9: 
 10:   const availableMetrics = ref<string[]>([])
 11: 
 12:   const isConnected = ref(false)
 13:   const haveMetrics = ref(false)
 14: 
 15:   const socket = ref<WebSocket | null>(null)
 16:   const reconnectAttempts = ref(0)
 17:   const maxReconnectAttempts = 5
 18:   const reconnectInterval = 3000 // 3 seconds
 19: 
 20:   function updateMetrics(newData: any) {
 21:     console.log('Updating metrics with:', newData)
 22:     Object.entries(newData).forEach(([key, value]) => {
 23:       const targetMetric = {
 24:         company,
 25:         performance,
 26:         news_links,
 27:         queue,
 28:       }[key as keyof typeof newData]
 29: 
 30:       if (targetMetric && Array.isArray(value)) {
 31:         value.forEach((metric: any) => {
 32:           if (metric.name && metric.value !== undefined) {
 33:             targetMetric[metric.name] = metric.value
 34:             if (metric.metadata) {
 35:               targetMetric[`${metric.name}_metadata`] = metric.metadata
 36:             }
 37:           }
 38:         })
 39:       }
 40:     })
 41:     haveMetrics.value = true
 42:   }
 43: 
 44:   function setAvailableMetrics(metrics: string[]) {
 45:     availableMetrics.value = metrics
 46:   }
 47: 
 48:   function setConnectionStatus(status: boolean) {
 49:     isConnected.value = status
 50:   }
 51: 
 52:   function getMetricsByType(type: string) {
 53:     return {
 54:       company,
 55:       news_links,
 56:       performance,
 57:       queue,
 58:     }[type]
 59:   }
 60: 
 61:   function getAllMetrics() {
 62:     return {
 63:       company,
 64:       news_links,
 65:       performance,
 66:       queue,
 67:     }
 68:   }
 69: 
 70:   function connectWebSocket() {
 71:     console.log('Attempting to connect WebSocket...')
 72:     if (socket.value?.readyState === WebSocket.OPEN) {
 73:       console.log('WebSocket is already open')
 74:       return
 75:     }
 76: 
 77:     const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:'
 78:     const host = window.location.host
 79:     socket.value = new WebSocket(`${protocol}//${host}/api/server-jobs`)
 80: 
 81:     socket.value.onopen = () => {
 82:       console.log('WebSocket connection established')
 83:       setConnectionStatus(true)
 84:       reconnectAttempts.value = 0
 85:     }
 86: 
 87:     socket.value.onmessage = (event) => {
 88:       const data = JSON.parse(event.data)
 89:       console.log('Received message from Analytics server:', data)
 90:       if (data.type === 'availableMetrics') {
 91:         setAvailableMetrics(data.metrics)
 92:       } else if (data.type === 'error') {
 93:         console.error('WebSocket error:', data.message)
 94:       } else if (data.domain && data.metrics) {
 95:         console.log('Updating metrics:', data)
 96:         updateMetrics({ [data.domain]: data.metrics })
 97:       } else {
 98:         console.warn('Received unexpected data structure:', data)
 99:       }
100:     }
101: 
102:     socket.value.onerror = (error) => {
103:       console.error('WebSocket error:', error)
104:     }
105: 
106:     socket.value.onclose = () => {
107:       console.log('WebSocket connection closed')
108:       setConnectionStatus(false)
109:       reconnect()
110:     }
111:   }
112: 
113:   function reconnect() {
114:     if (reconnectAttempts.value < maxReconnectAttempts) {
115:       reconnectAttempts.value++
116:       console.log(`Attempting to reconnect (${reconnectAttempts.value}/${maxReconnectAttempts})...`)
117:       setTimeout(connectWebSocket, reconnectInterval)
118:     } else {
119:       console.log('Max reconnect attempts reached. Please refresh the page.')
120:     }
121:   }
122: 
123:   function disconnectWebSocket() {
124:     if (socket.value) {
125:       socket.value.close()
126:       socket.value = null
127:       setConnectionStatus(false)
128:     }
129:   }
130: 
131:   function subscribeToMetrics(metricTypes: string[]) {
132:     if (socket.value && socket.value.readyState === WebSocket.OPEN) {
133:       socket.value.send(
134:         JSON.stringify({
135:           action: 'subscribe',
136:           metrics: metricTypes,
137:         }),
138:       )
139:     }
140:   }
141: 
142:   function unsubscribeFromMetrics(metricTypes: string[]) {
143:     if (socket.value && socket.value.readyState === WebSocket.OPEN) {
144:       socket.value.send(
145:         JSON.stringify({
146:           action: 'unsubscribe',
147:           metrics: metricTypes,
148:         }),
149:       )
150:     }
151:   }
152: 
153:   watchEffect(() => {
154:     if (!socket.value || socket.value.readyState !== WebSocket.OPEN) {
155:       connectWebSocket()
156:     }
157:   })
158: 
159:   onUnmounted(() => {
160:     disconnectWebSocket()
161:   })
162: 
163:   return {
164:     queue,
165:     company,
166:     news_links,
167:     performance,
168:     availableMetrics,
169:     isConnected,
170:     haveMetrics,
171:     connectWebSocket,
172:     disconnectWebSocket,
173:     subscribeToMetrics,
174:     unsubscribeFromMetrics,
175:     getMetricsByType,
176:     getAllMetrics,
177:   }
178: })
```

## File: apps/admin-dashboard/composables/useTasks.ts
```typescript
  1: // to add
  2: // PWA
  3: // move to monorepo structure
  4: // extract out base func / components etc.
  5: 
  6: export interface Goal {
  7:   id: number
  8:   title: string
  9:   date: string
 10:   category: 'financial' | 'metrics' | 'hiring' | 'events' | 'development' | 'milestone'
 11:   assigneeId: number
 12:   completed: boolean
 13:   recurrence?: {
 14:     frequency: 'daily' | 'weekly' | 'monthly' | 'yearly'
 15:     interval: number
 16:     endDate?: string
 17:   }
 18: }
 19: 
 20: interface Milestone {
 21:   id: number
 22:   title: string
 23:   description: string
 24:   startDate: string
 25:   endDate: string
 26:   status: 'not_started' | 'in_progress' | 'completed'
 27:   progress: number
 28:   parentMilestoneId: number | null
 29: }
 30: 
 31: export default function useTasks() {
 32:   const goals = ref<Goal[]>([])
 33:   const milestones = ref<Milestone[]>([])
 34:   const toast = useNotification()
 35: 
 36:   async function fetchGoals() {
 37:     try {
 38:       console.log('fetchGoals')
 39:       const response = await $fetch('/api/goals', {
 40:         method: 'POST',
 41:         body: { action: 'read' },
 42:       })
 43: 
 44:       console.log('fetchGoals response', response)
 45:       if (response.success) {
 46:         goals.value = response.goals
 47:         generateRecurringTasks()
 48:       } else {
 49:         throw new Error(response.message)
 50:       }
 51:     } catch (error) {
 52:       console.error('Error fetching goals:', error)
 53:       throw error
 54:     }
 55:   }
 56: 
 57:   function generateRecurringTasks() {
 58:     const today = new Date()
 59:     const oneYearLater = new Date(today.getFullYear() + 1, today.getMonth(), today.getDate())
 60:     const newGoals: Goal[] = []
 61: 
 62:     goals.value.forEach((task) => {
 63:       if (task.recurrence) {
 64:         const currentDate = new Date(task.date)
 65:         while (currentDate <= oneYearLater) {
 66:           if (task.recurrence.endDate && new Date(task.recurrence.endDate) < currentDate) {
 67:             break
 68:           }
 69:           if (currentDate > today) {
 70:             newGoals.push({
 71:               ...task,
 72:               id: Math.max(...goals.value.map((g) => g.id), 0) + 1,
 73:               date: currentDate.toISOString().split('T')[0],
 74:               completed: false,
 75:             })
 76:           }
 77:           advanceDate(currentDate, task.recurrence.frequency, task.recurrence.interval)
 78:         }
 79:       }
 80:     })
 81: 
 82:     goals.value = [...goals.value, ...newGoals]
 83:   }
 84: 
 85:   function advanceDate(date: Date, frequency: string, interval: number) {
 86:     switch (frequency) {
 87:       case 'daily':
 88:         date.setDate(date.getDate() + interval)
 89:         break
 90:       case 'weekly':
 91:         date.setDate(date.getDate() + 7 * interval)
 92:         break
 93:       case 'monthly':
 94:         date.setMonth(date.getMonth() + interval)
 95:         break
 96:       case 'yearly':
 97:         date.setFullYear(date.getFullYear() + interval)
 98:         break
 99:     }
100:   }
101: 
102:   async function createGoal(goal: Goal) {
103:     goal.subtasks = goal.subtasks.map((subtask, index) => ({
104:       ...subtask,
105:       id: subtask.id || Date.now() + index,
106:     }))
107:     return handleGoalCrud('create', goal)
108:   }
109: 
110:   async function updateGoal(goal: Goal) {
111:     goal.subtasks = goal.subtasks.map((subtask, index) => ({
112:       ...subtask,
113:       id: subtask.id || Date.now() + index,
114:     }))
115:     return handleGoalCrud('update', goal)
116:   }
117: 
118:   async function deleteGoal(goal: Goal) {
119:     return handleGoalCrud('delete', goal)
120:   }
121: 
122:   async function handleGoalCrud(action: 'create' | 'update' | 'delete', goal: Goal) {
123:     try {
124:       const response = await $fetch('/api/goals', {
125:         method: 'POST',
126:         body: { action, goal },
127:       })
128:       if (response.success) {
129:         if (action === 'update') {
130:           // Update the goal in the local state
131:           const index = goals.value.findIndex((g) => g.id === goal.id)
132:           if (index !== -1) {
133:             goals.value[index] = { ...goal, subtasks: goal.subtasks }
134:           }
135:         } else {
136:           // For create and delete, re-fetch all goals
137:           await fetchGoals()
138:         }
139:       } else {
140:         throw new Error(response.message)
141:       }
142:     } catch (error) {
143:       console.error(`Error ${action}ing goal:`, error)
144:       throw error
145:     }
146:   }
147: 
148:   async function updateGoalsWithDefaultValues() {
149:     const updatedGoals = goals.value.map((goal) => ({
150:       ...goal,
151:       progress: goal.progress ?? 0,
152:       priority: goal.priority ?? 'medium',
153:       timeSpent: goal.timeSpent ?? 0,
154:       description: goal.description ?? '',
155:       subtasks: goal.subtasks ?? [],
156:     }))
157: 
158:     for (const goal of updatedGoals) {
159:       await updateGoal(goal)
160:     }
161: 
162:     await fetchGoals()
163:   }
164: 
165:   async function fetchMilestones() {
166:     try {
167:       const response = await fetch('/api/milestones')
168: 
169:       console.log('milestones', response)
170:       if (!response.ok) {
171:         throw new Error('Failed to fetch milestones')
172:       }
173:       const data = await response.json()
174:       milestones.value = data
175:     } catch (error) {
176:       console.error('Error fetching milestones:', error)
177:       toast.error({ message: 'Failed to fetch milestones', summary: 'Error' })
178:     }
179:   }
180: 
181:   return {
182:     goals,
183:     milestones,
184:     fetchMilestones,
185:     updateGoalsWithDefaultValues,
186:     fetchGoals,
187:     createGoal,
188:     updateGoal,
189:     deleteGoal,
190:   }
191: }
```

## File: apps/admin-dashboard/content/bp/1.summary.md
```markdown
 1: ---
 2: section: summary
 3: ---
 4: 
 5: ### Executive Summary
 6: 
 7: #### Brief Introduction to AstronEra
 8: 
 9: AstronEra is a cutting-edge SaaS company based in India, dedicated to creating an all-encompassing
10: Online Astronomy Hub driving science popularization. Our platform serves as a one-stop destination
11: for astronomy enthusiasts, professionals, students, and businesses, providing a comprehensive suite
12: of services that include news aggregation, research papers company profiles, social interaction,
13: AI-driven summarization, job listings, courses, and advanced AI search capabilities to enhance
14: research and learning.
15: 
16: ---
17: 
18: <!-- Bulk of content -->
19: 
20: ---
21: 
22: ## Conclusion
23: 
24: By leveraging our innovative technology, comprehensive content, and strong community focus,
25: AstronEra is poised to become the leading platform in the astronomy space, driving user engagement
26: and growth while providing valuable tools and resources to our diverse user base.
```

## File: apps/admin-dashboard/content/bp/10.appendix.md
```markdown
 1: ---
 2: section: appendix
 3: ---
 4: 
 5: ### Appendix (Overview)
 6: 
 7: The Appendix section will provide supporting documents and data to substantiate the claims and
 8: projections made throughout the business plan. It will include market research reports, detailed
 9: financial forecasts, and legal and regulatory considerations. Here is a detailed breakdown based on
10: the information provided.
11: 
12: ---
13: 
14: <!-- Bulk of content -->
15: 
16: ---
17: 
18: ### Conclusion
```

## File: apps/admin-dashboard/content/bp/12.todo.md
```markdown
  1: ---
  2: section: todo
  3: ---
  4: 
  5: ## Research Immediate Timeline
  6: 
  7: 1. [ ] Extract all current papers with links to PDF, Abstract, Title, Authors, Date, Pages, Figure
  8:        Count, Subjects (Categories), HTML Link, Abs Link, Tables Count, Publ/Journal Details
  9: 
 10: 2. [ ] Create DB Table / Update what we have. Store Metrics per month
 11: 
 12: 3. [ ] Cycle through the abs links and extract all Abstracts (research and see if it needs parsing)
 13: 
 14: 4. [ ] Calculate the cost of vectorizing all abstracts 400 tokens for ~250 words (avg abst length) x
 15:        300k papers = 120000000 tokens, 1 million tokens text-embed-small = 2 cents usd. Total cost
 16:        for 300k abstracts $2.4 USD. First test 1,000 abstracts to validate cost. Depending on
 17:        outcome either vectorize all at once or 1000 per weeek
 18: 
 19: 5. [ ] Add search for research articles
 20: 
 21: - [ ] vectorize the question
 22: - [ ] store the question (unique col) with vector
 23: - [ ] search question table before vector in future
 24: 
 25: 6.  [ ] Allow the user to return full abstracts, references/titles only, links to PDF, summaries,
 26:         LLM response (last to add)
 27: 
 28: - [ ] in future have different styles of references
 29: - [ ] allow users to bookmark the papers, experts can have groups of bookmarks (for when they are
 30:       working on multiple papers at once)
 31: - [ ] in future sort by number of cites
 32: - [ ] in future show number of references in papers
 33: - [ ] show authors
 34: - [ ] show category
 35: 
 36: 7. [ ] Setup cron to extract new papers every month
 37: 
 38: ---
 39: 
 40: Later improvements:
 41: 
 42: - store the references / citations links in a separate table using https://www.prophy.science/
 43: - use https://www.prophy.science/ reference to find the common terms in the paper
 44: - Also use prophy to extract the author information (affiliations / ORCID / Citations / Academic Age
 45:   / Years Active, H-index / Articles / Notibal Articles)
 46: - if we navigate to their prophy page we can see more info: top co-authors, top author concepts
 47:   total citations, manuscript types, 5 newest articles with all above info
 48: 
 49: ## Ideas
 50: 
 51: - Different styles of citations, Harvard etc. Samwell AI for example
 52: - We could have a panelist of people selected from our userbase through application, their job is to
 53:   act as mentors / a sounding board for us, similar to a board of directors. Might appeal to retired
 54:   experts, people seeking status in industry. We should also rotate the board every 3 years.
 55: - Add social share buttons to content Allow users to connect their social media accounts, so when
 56:   they post on astronEra we automatically post on the other social platforms as well.
 57: - Allow users to upload a PDF if we do not have it in our database, it will then be chunked and they
 58:   can perform rag search on it.
 59: 
 60: ## What are we missing:
 61: 
 62: # Websites to scrape
 63: 
 64: - Linkedin for Companies and Jobs
 65: - https://orcid.org/ researchers database, has cite count, can search by Astronomy etc.
 66: - Can potentially find citations from this website if Arxiv papers don't have links, just titles.
 67:   https://www.semanticscholar.org/
 68: 
 69: <!--
 70: https://www.bplans.com/saas-business-plan/
 71: https://www.saastock.com/wp-content/uploads/2020/02/SaaS-Marketing-eBook.pdf
 72:  -->
 73: 
 74: 3. How our solution solves this problem, go in depth on benefits later.
 75: 4. Comprehensive Market Research (competitors and market size), Label if it is a direct competitor
 76:    or indirect.
 77: 5. Market Size should have a pie chart or pyramid
 78: 6. Show some metric cards in a grid (color coded)
 79: 7. two column sections, image or text on the right
 80: 8. Testimonials can be added
 81: 9. Box content for social media marketing plans, could have icon on the left then the plan on the
 82:    right for each platform.
 83: 10. edit prose to match our brand colors etc: https://github.com/tailwindlabs/tailwindcss-typography
 84: 11. Mention products / affiliates and how we will incorporate them into the app more, potentially
 85:     use an API like https://www.webscrapingapi.com/amazon-api
 86: 
 87: # Competitors:
 88: 
 89: - https://www.samwell.ai/ - for research papers
 90: -
 91: 
 92: ## Must Do
 93: 
 94: - Comprehensive Competitor Analysis
 95: - Comprehensive Market Research
 96: - Reliable Estimations for Financials
 97:   - Must know how much it costs per Company / Research Paper / News Article / etc etc.
 98:   - How much it costs to store our data, need to know rough size of Company / ...
 99:   - How many employees for different stages, all associated employee costs
100:   - Finalize projected revenue, must have references for how we have come up with Affilaite numbers,
101:     advertising revenue, why we have priced our monthly subscripion at $x and $$x for pro/expert
102:   - Decide on what Financial Charts to include in the Business plan, and which are required for
103:     Slide Deck
104: - Rough estimation on how much data is available for companies / news / research papers
105: - Explain what data we are extracting from research papers and why (for future AI training,
106:   additional features)
107: - Clarity on our USP and positioning, needs to be in the summary
108: - Clarity on the problem we are solving.
```

## File: apps/admin-dashboard/content/bp/2.company-description.md
```markdown
 1: ---
 2: section: description
 3: ---
 4: 
 5: ### Company Overview
 6: 
 7: ---
 8: 
 9: <!-- Bulk of content -->
10: 
11: ---
12: 
13: ### Conclusion
14: 
15: By focusing on these comprehensive strategies, AstronEra aims to build a robust platform that
16: addresses the needs of its diverse user base, fosters a global community, and drives innovation and
17: growth in the field of astronomy.
```

## File: apps/admin-dashboard/content/bp/3.market-analysis.md
```markdown
 1: ---
 2: section: market-analysis
 3: ---
 4: 
 5: ### Market Research on the Astronomy/Space Sector (overview)
 6: 
 7: The global space economy is projected to experience substantial growth, reaching an estimated value
 8: of $1.8 trillion by 2035, up from $630 billion in 2023. This growth will be driven by advancements
 9: in space-enabled technologies, such as satellite communications, Earth observation, and positioning
10: services, which are becoming increasingly integral to various industries beyond traditional space
11: applications.
12: 
13: ---
14: 
15: <!-- Bulk of content -->
16: 
17: ---
18: 
19: ### Conclusion
20: 
21: AstronEra is well-positioned to capitalize on the burgeoning space economy. By targeting a diverse
22: user base that includes companies, professionals, students, and enthusiasts, and leveraging
23: advancements in space technology, AstronEra can achieve significant growth. Continued investment in
24: technology, strategic partnerships, and a robust marketing plan will be key to realizing these
25: projections and sustaining long-term success in the rapidly expanding space sector.
26: 
27: ### References
28: 
29: 1. [World Economic Forum - Space Economy Set to Triple to $1.8 Trillion by 2035](https://www.weforum.org/press/2023/06/space-economy-set-to-triple-to-1-8-trillion-by-2035-new-research-reveals).
30: 
31: 2. [World Economic Forum - Space is booming. Here's how to embrace the $1.8 trillion opportunity](https://www.weforum.org/agenda/2023/06/space-is-booming-heres-how-to-embrace-the-1-8-trillion-opportunity/).
32: 
33: 3. [McKinsey - Space: The $1.8 trillion opportunity for global economic growth](https://www.mckinsey.com/industries/aerospace-and-defense/our-insights/space-the-1-point-8-trillion-dollar-opportunity-for-global-economic-growth).
34: 
35: 4. [Space Foundation - The Space Report 2024 Q1](https://www.spacefoundation.org/2024/01/29/space-report-2024-q1-finds-growth-in-us-space-workforce-record-2024-launch-pace-leaps-in-commercial-and-civil-spacecraft-technology/).
36: 
37: 5. [Grand View Research - SpaceTech Market Size & Growth Analysis Report, 2030](https://www.grandviewresearch.com/industry-analysis/space-tech-market).
```

## File: apps/admin-dashboard/content/bp/4.products.md
```markdown
 1: ---
 2: section: products
 3: ---
 4: 
 5: ### Detailed Description of the Online Astronomy Hub
 6: 
 7: ### Overview
 8: 
 9: - **Primary Purpose and Mission:**
10:   - To democratize access to astronomy knowledge and resources.
11:   - To further humanity's understanding of the universe and our place in it.
12: - **Platform Functionality:**
13:   - **User Journey:**
14:     - Users sign up and select their interests.
15:     - Users receive personalized newsfeeds, summaries, and updates.
16:     - Users interact with customized AI agents for queries.
17:     - Users can participate in community-driven events, discussions, and projects.
18:   - **Key Functionalities:**
19:     - Personalized news aggregation.
20:     - Detailed company profiles.
21:     - Social interaction with content.
22:     - AI-driven summarization.
23:     - Jobs portal.
24:     - Courses and educational resources.
25:     - Advanced AI RAG (Retrieval-Augmented Generation) search.
26: 
27: 1. **Sources:**
28:    - **Types of News Sources:**
29:      1. Scientific journals
30:      2. Research papers
31:      3. Space/astronomy companies and their blogs
32:      4. News agencies with an astronomy focus
33:      5. Social media of major space agencies
34:      6. Space agencies
35:      7. Research institutions
36:      8. Events
37:    - **Update Frequency:**
38:      - Initially, most sources will be updated once per day.
39:      - As manpower scales, multiple scraping jobs will reduce the time between updates to a few
40:        hours.
41: 
42: AstronEra aggregates content from a wide array of sources, including scientific journals, research
43: papers, blogs of space companies, news agencies focused on astronomy, social media of major space
44: agencies, and research institutions. Initially updated once per day, the frequency will increase as
45: the platform scales. Users can tailor their newsfeed to their interests and receive summaries
46: curated by advanced AI, ensuring they stay informed on the latest developments.
47: 
48: ---
49: 
50: <!-- Bulk of content -->
51: 
52: ---
53: 
54: ### Conclusion
55: 
56: AstronEra distinguishes itself with a unique combination of astronomy expertise and AI technology.
57: It serves diverse user segments, from casual enthusiasts to professionals, by providing centralized
58: access to all aspects of astronomy. The platform supports sustainable development and night sky
59: conservation, promotes scientific temperament, and reduces superstitions through credible, curated
60: information. By continuously updating with advancing technologies and connecting everyday life with
61: cosmic knowledge, AstronEra remains at the forefront of innovation in the astronomy domain.
```

## File: apps/admin-dashboard/content/bp/5.marketing.md
```markdown
 1: ---
 2: section: marketing
 3: ---
 4: 
 5: ### Marketing and Sales Strategy
 6: 
 7: This comprehensive approach will ensure a robust marketing and sales strategy for AstronEra, helping
 8: to attract and retain users while fostering growth and engagement. By measuring the effectiveness of
 9: user acquisition strategies, mitigating potential risks in digital marketing, and enhancing customer
10: retention strategies, AstronEra can ensure long-term success and user satisfaction.
```

## File: apps/admin-dashboard/content/bp/6.management-operations.md
```markdown
1: ---
2: section: management-operations
3: ---
4: 
5: ### Management Team Structure and Operations Plan
6: 
7: ::org-chart ::
```

## File: apps/admin-dashboard/content/bp/7.financials.md
```markdown
 1: ---
 2: section: financials
 3: ---
 4: 
 5: ### Financial Plan
 6: 
 7: ## ::financial-chart
 8: 
 9: title: 3 Year User Projections chartType: line chartDataKey: users
10: 
11: ---
12: 
13: ::
```

## File: apps/admin-dashboard/content/bp/8.risk-analysis.md
```markdown
 1: ---
 2: section: risk-analysis
 3: ---
 4: 
 5: ### Risk Analysis (overview)
 6: 
 7: ---
 8: 
 9: <!-- Bulk of content -->
10: 
11: ---
12: 
13: ### Conclusion
14: 
15: By addressing these potential risks and implementing robust mitigation strategies, AstronEra can
16: better navigate the challenges in the dynamic space industry and maintain a competitive edge.
```

## File: apps/admin-dashboard/content/bp/9.roadmap.md
```markdown
 1: ---
 2: section: roadmap
 3: ---
 4: 
 5: ### Roadmap
 6: 
 7: AstronEra aims to become a leading platform in the space and astronomy sector, providing
 8: cutting-edge technology, comprehensive content, and a robust user experience. Our future growth
 9: strategy focuses on rolling out new features and expanding our user base through innovative
10: solutions, strategic partnerships, and continuous improvement in our services.
11: 
12: ---
13: 
14: <!-- Bulk of content -->
15: 
16: ---
17: 
18: ### Conclusion
19: 
20: By strategically rolling out these features and continuously enhancing our platform, AstronEra aims
21: to lead the space and astronomy sector, providing unparalleled value to our users and partners. This
22: phased growth strategy ensures we remain agile and responsive to market demands while pursuing our
23: long-term vision.
24: 
25: ::timeline ::
```

## File: apps/admin-dashboard/content/bp/appendix-data-sources.md
```markdown
  1: ### Research Papers
  2: 
  3: ## Summary
  4: 
  5: Thomson Reuters’s (now Clarivate Analytics) Web of Science (WoS) bibliographic database was utilized
  6: to gather bibliographical data of referred research publications from India. Using the 'Advance
  7: search' option with the field tags ‘SU’ (Subject) and ‘CU’ (Country) combined with the Boolean
  8: operator ‘AND’ (i.e., (SU=Astronomy & Astrophysics) AND (CU=India)), data was collected over a
  9: thirty-year period from 1988 to 2017. A total of 20,311 research papers were retrieved for
 10: scientometric analysis. Bibexcel and Pajek software were employed for data analysis, processing, and
 11: visualization.
 12: 
 13: ### Table: Top 20 Astronomy & Astrophysics Research Countries (1988-2017)
 14: 
 15: | Rank | Country     | Research Publications | Percentage (%) |
 16: | ---- | ----------- | --------------------- | -------------- |
 17: | 1    | USA         | 234,310               | 39.87          |
 18: | 2    | Germany     | 82,522                | 14.04          |
 19: | 3    | England     | 67,641                | 11.51          |
 20: | 4    | France      | 59,062                | 10.05          |
 21: | 5    | Italy       | 54,751                | 9.32           |
 22: | 6    | Japan       | 41,942                | 7.14           |
 23: | 7    | Russia      | 36,961                | 6.29           |
 24: | 8    | Spain       | 35,742                | 6.08           |
 25: | 9    | China       | 30,209                | 5.14           |
 26: | 10   | Canada      | 29,381                | 5.00           |
 27: | 11   | Netherlands | 24,602                | 4.19           |
 28: | 12   | Australia   | 20,807                | 3.54           |
 29: | 13   | India       | 20,311                | 3.46           |
 30: | 14   | Switzerland | 19,844                | 3.38           |
 31: | 15   | Brazil      | 15,099                | 2.57           |
 32: | 16   | Chile       | 14,714                | 2.50           |
 33: | 17   | Poland      | 14,357                | 2.44           |
 34: | 18   | Sweden      | 11,538                | 1.96           |
 35: | 19   | Scotland    | 11,499                | 1.96           |
 36: | 20   | Mexico      | 11,038                | 1.87           |
 37: 
 38: **Total Research Publications: 818,391** (check tally)
 39: 
 40: ## Summary
 41: 
 42: The following table lists the top 20 prolific journals in Astronomy & Astrophysics research in India
 43: based on various metrics.
 44: 
 45: ### Table: Top 20 Prolific Journals in Astronomy & Astrophysics Research
 46: 
 47: | Rank | Journal                                                   | Total Papers (TP) | Total Citations (TC) | Average Citations Per Paper (ACPP) | Web of Science Citations (WSC) | Crossref Citations (CA) | Web of Science Core Collection Citations (WCA) | H-index | Impact Factor (IF) |
 48: | ---- | --------------------------------------------------------- | ----------------- | -------------------- | ---------------------------------- | ------------------------------ | ----------------------- | ---------------------------------------------- | ------- | ------------------ |
 49: | 1    | Physical Review D                                         | 3,752             | 83,369               | 22.22                              | 75,671                         | 48,281                  | 45,667                                         | 102     | 4.57               |
 50: | 2    | Physics Letters B                                         | 2,131             | 64,332               | 30.19                              | 61,860                         | 43,204                  | 42,026                                         | 93      | 4.81               |
 51: | 3    | Monthly Notices of the Royal Astronomical Society (MNRAS) | 1,815             | 29,555               | 16.28                              | 25,863                         | 18,812                  | 17,657                                         | 64      | 4.96               |
 52: | 4    | Astrophysics and Space Science                            | 1,681             | 10,047               | 5.98                               | 7,717                          | 4,684                   | 3,912                                          | 36      | 1.62               |
 53: | 5    | Astrophysical Journal                                     | 1,493             | 32,597               | 21.83                              | 30,622                         | 23,123                  | 22,268                                         | 75      | 5.53               |
 54: | 6    | Astronomy & Astrophysics                                  | 1,226             | 39,938               | 32.58                              | 36,688                         | 26,254                  | 25,619                                         | 78      | 5.01               |
 55: | 7    | Advances in Space Research                                | 557               | 2,928                | 5.26                               | 2,697                          | 2,470                   | 2,343                                          | 25      | 1.40               |
 56: | 8    | Journal of Geophysical Research - Space Physics           | 505               | 6,166                | 12.21                              | 5,229                          | 4,109                   | 3,769                                          | 35      | 2.73               |
 57: | 9    | Journal of Astrophysics and Astronomy                     | 502               | 2,151                | 4.28                               | 2,002                          | 1,859                   | 1,761                                          | 19      | 0.39               |
 58: | 10   | Classical and Quantum Gravity                             | 454               | 10,275               | 22.63                              | 9,919                          | 7,609                   | 7,413                                          | 50      | 3.12               |
 59: | 11   | Solar Physics                                             | 454               | 5,419                | 11.94                              | 4,862                          | 3,623                   | 3,366                                          | 36      | 2.68               |
 60: | 12   | Indian Journal of Radio Space Physics                     | 446               | 934                  | 2.09                               | 934                            | 756                     | 756                                            | 13      | -                  |
 61: | 13   | International Journal of Modern Physics D                 | 403               | 8,346                | 20.71                              | 8,101                          | 6,105                   | 5,962                                          | 30      | 2.48               |
 62: | 14   | General Relativity and Gravitation                        | 338               | 4,192                | 12.40                              | 4,074                          | 3,165                   | 3,074                                          | 31      | 1.62               |
 63: | 15   | Astronomical Society of the Pacific Conference Series     | 335               | 429                  | 1.28                               | 413                            | 386                     | 374                                            | 10      | -                  |
 64: | 16   | Annales Geophysicae                                       | 287               | 3,585                | 12.49                              | 3,409                          | 2,644                   | 2,540                                          | 26      | 1.61               |
 65: | 17   | Journal of Cosmology and Astroparticle Physics            | 259               | 3,882                | 14.82                              | 3,655                          | 3,259                   | 3,147                                          | 24      | 4.73               |
 66: | 18   | International Astronomical Union (IAU) Symposia           | 218               | 28                   | 0.13                               | 28                             | 28                      | 28                                             | 3       | -                  |
 67: | 19   | Journal of Physics Conference Series                      | 190               | 236                  | 1.24                               | 236                            | 226                     | 226                                            | 7       | -                  |
 68: | 20   | Planetary and Space Science                               | 186               | 1,879                | 10.10                              | 1,775                          | 1,542                   | 1,483                                          | 21      | 1.89               |
 69: 
 70: **Total Publications: 17,232 (84.84%)**
 71: 
 72: Here is a table with links to the top 20 prolific journals in Astronomy & Astrophysics research:
 73: 
 74: | Rank | Journal                                                   | Link                                                                                                           |
 75: | ---- | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------- |
 76: | 1    | Physical Review D                                         | [Physical Review D](https://journals.aps.org/prd)                                                              |
 77: | 2    | Physics Letters B                                         | [Physics Letters B](https://www.journals.elsevier.com/physics-letters-b)                                       |
 78: | 3    | Monthly Notices of the Royal Astronomical Society (MNRAS) | [MNRAS](https://academic.oup.com/mnras)                                                                        |
 79: | 4    | Astrophysics and Space Science                            | [Astrophysics and Space Science](https://www.springer.com/journal/10509)                                       |
 80: | 5    | Astrophysical Journal                                     | [Astrophysical Journal](https://iopscience.iop.org/journal/0004-637X)                                          |
 81: | 6    | Astronomy & Astrophysics                                  | [Astronomy & Astrophysics](https://www.aanda.org/)                                                             |
 82: | 7    | Advances in Space Research                                | [Advances in Space Research](https://www.journals.elsevier.com/advances-in-space-research)                     |
 83: | 8    | Journal of Geophysical Research - Space Physics           | [Journal of Geophysical Research - Space Physics](https://agupubs.onlinelibrary.wiley.com/journal/21699402)    |
 84: | 9    | Journal of Astrophysics and Astronomy                     | [Journal of Astrophysics and Astronomy](https://www.ias.ac.in/Journals/Journal_of_Astrophysics_and_Astronomy/) |
 85: | 10   | Classical and Quantum Gravity                             | [Classical and Quantum Gravity](https://iopscience.iop.org/journal/0264-9381)                                  |
 86: | 11   | Solar Physics                                             | [Solar Physics](https://www.springer.com/journal/11207)                                                        |
 87: | 12   | Indian Journal of Radio Space Physics                     | [Indian Journal of Radio Space Physics](http://nopr.niscpr.res.in/handle/123456789/44)                         |
 88: | 13   | International Journal of Modern Physics D                 | [International Journal of Modern Physics D](https://www.worldscientific.com/worldscinet/ijmpd)                 |
 89: | 14   | General Relativity and Gravitation                        | [General Relativity and Gravitation](https://www.springer.com/journal/10714)                                   |
 90: | 15   | Astronomical Society of the Pacific Conference Series     | [ASP Conference Series](https://www.aspbooks.org/)                                                             |
 91: | 16   | Annales Geophysicae                                       | [Annales Geophysicae](https://angeo.copernicus.org/)                                                           |
 92: | 17   | Journal of Cosmology and Astroparticle Physics            | [Journal of Cosmology and Astroparticle Physics](https://iopscience.iop.org/journal/1475-7516)                 |
 93: | 18   | International Astronomical Union (IAU) Symposia           | [IAU Symposia](https://www.iau.org/publications/symposia/)                                                     |
 94: | 19   | Journal of Physics Conference Series                      | [Journal of Physics Conference Series](https://iopscience.iop.org/journal/1742-6596)                           |
 95: | 20   | Planetary and Space Science                               | [Planetary and Space Science](https://www.journals.elsevier.com/planetary-and-space-science)                   |
 96: 
 97: This table includes links to each journal's website for further reference.
 98: 
 99: - [Nature](https://www.nature.com/)
100: - []()
101: - []()
102: - []()
103: - []()
104: - []()
105: - []()
106: 
107: ### Databases
108: 
109: - [Astronomy Outreach Network](https://www.explorescientific.com/pages/astronomy-outreach-network)
110: - [Space Industry Database](https://spaceindustrydatabase.com/)
111: - []()
112: - []()
113: - []()
```

## File: apps/admin-dashboard/content/bp/appendix-financials.md
```markdown
 1: #### Detailed Financial Forecasts
 2: 
 3: 1. **Revenue Projections:**
 4: 
 5:    - Subscription revenue projections for Free, Pro, and Expert tiers over the next three years.
 6:    - Additional revenue streams from advertising and affiliate marketing.
 7: 
 8: 2. **Cost Structure and Budget:**
 9: 
10:    - Breakdown of operational costs, including salaries, infrastructure, marketing, AI and data
11:      processing, customer support, and development costs.
12:    - Miscellaneous costs such as legal, administrative, and office space expenses.
13: 
14: 3. **Profit and Loss Statements:**
15: 
16:    - Projected profit and loss statements for the next three years.
17:    - Calculation of net profit by subtracting total expenses from total revenue.
18: 
19: 4. **Cash Flow Analysis:**
20: 
21:    - Expected cash inflows from subscriptions and other revenue streams.
22:    - Expected cash outflows for operational, development, and miscellaneous expenses.
23:    - Net cash flow analysis.
24: 
25: 5. **Break-even Analysis:**
26:    - Calculation of the break-even point in terms of revenue and time.
27:    - Monthly and yearly analysis of how long it will take to reach the break-even point.
```

## File: apps/admin-dashboard/content/bp/appendix-funding.md
```markdown
1: 1. https://blume.vc/funds/fund-iv
2: 2. https://www.spacecapital.com/portfolio
3: 3.
```

## File: apps/admin-dashboard/content/bp/appendix-hires.md
```markdown
1: ### Show Hires beyond year 1
```

## File: apps/admin-dashboard/content/bp/appendix-legal.md
```markdown
 1: #### Legal and Regulatory Considerations
 2: 
 3: 1. **Compliance Documents:**
 4: 
 5:    - Documentation of compliance with data protection regulations such as GDPR and CCPA.
 6:    - Legal requirements for operating in the target markets (e.g., India, Europe, North America).
 7: 
 8: 2. **Terms of Service and Privacy Policy:**
 9: 
10:    - Detailed terms of service outlining user rights and responsibilities.
11:    - Privacy policy detailing how user data will be collected, used, and protected.
12: 
13: 3. **Intellectual Property:**
14: 
15:    - Documentation of trademarks, copyrights, and patents relevant to AstronEra’s technology and
16:      content.
17: 
18: 4. **Risk Management:**
19:    - Detailed risk analysis reports outlining potential risks and challenges, mitigation strategies,
20:      and contingency plans.
```

## File: apps/admin-dashboard/content/bp/appendix-market.md
```markdown
  1: ### Summary (https://www2.deloitte.com/xe/en/insights/industry/aerospace-defense/future-of-space-economy.html)
  2: 
  3: The space economy has experienced rapid growth due to advances in technology, increased private
  4: sector investment, and rising demand for space data. This growth is opening opportunities for new
  5: and existing players in the industry. Key factors and challenges include:
  6: 
  7: #### Key Points:
  8: 
  9: - **Technological Advances:**
 10: 
 11:   - Development of reusable launch vehicles, SmallSats, and CubeSats has reduced costs.
 12:   - SmallSats accounted for about 95% of spacecraft launched in 2022.
 13:   - Innovations like satellite constellations can provide global coverage.
 14: 
 15: - **Private Sector Investment:**
 16: 
 17:   - Significant private equity (PE) and venture capital (VC) investments in the space sector.
 18:   - PE investments totaled about $272 billion into 1,791 unique companies since 2013.
 19:   - The FY23 U.S. national security space budget allocated $20.8 billion, a 19.5% increase from
 20:     FY22.
 21:   - Over 5,000 broadband satellites expected in Low Earth Orbit (LEO) by the end of 2023.
 22:   - Potentially 40,000-50,000 satellites to serve over 10 million end-users by 2030.
 23: 
 24: - **Rising Demand for Space Data:**
 25:   - Demand for space data is increasing, with applications in military communications, environmental
 26:     monitoring, and emergency response.
 27:   - Data sent to and from space expected to grow to over 500 exabytes from 2020 to 2030.
 28:   - AI and edge computing are expected to transform space data services.
 29: 
 30: #### Challenges:
 31: 
 32: - **Supply Chain Disruptions:** Developing competitive space-grade products and components.
 33: - **Regulatory Issues:** Complex and overlapping regulations from multiple agencies.
 34: - **Environmental Concerns:** Space debris, congestion, and greenhouse gas emissions.
 35: - **Technical Barriers:** Cost of launching equipment into space and lack of in-space manufacturing
 36:   infrastructure.
 37: 
 38: #### Opportunities:
 39: 
 40: - **In-Space Manufacturing:** Using microgravity and vacuum conditions for production.
 41: - **Additive Manufacturing:** 3D printing in space to create complex objects and reduce costs.
 42: - **Robotics:** Use of robotics for exploration, maintenance, and assembly in space.
 43: - **Space Sustainability:** Addressing space debris and congestion through active debris removal and
 44:   end-of-life disposal maneuvers.
 45: 
 46: #### Industry and Market Growth:
 47: 
 48: - **Public-Private Collaboration:** Crucial for scaling opportunities and leveraging investments.
 49: - **Emerging Trends:** Expansion of private companies’ roles, space data services, and in-space
 50:   manufacturing.
 51: - **Future Business Models:** Shift towards higher volume, lower cost, and standardized offerings.
 52: 
 53: #### Key Statistics:
 54: 
 55: - **186 successful rocket launches in 2022, 41 more than in 2021.**
 56: - **95% of spacecraft launched in 2022 were SmallSats.**
 57: - **Global space sector attracted PE investments of about $272 billion since 2013.**
 58: - **FY23 U.S. national security space budget allocated $20.8 billion, a 19.5% increase from FY22.**
 59: - **Over 5,000 broadband satellites in LEO by the end of 2023.**
 60: - **Potential for 40,000-50,000 satellites serving over 10 million end-users by 2030.**
 61: - **Data from space expected to grow to over 500 exabytes from 2020 to 2030.**
 62: - **98% of senior executives believe in increased demand for space data and the expansion of private
 63:   companies' roles.**
 64: 
 65: ---
 66: 
 67: ### Summary of the Space Technology Market Analysis
 68: 
 69: The global space technology market, valued at USD 443.20 billion in 2023, is projected to reach USD
 70: 916.85 billion by 2033, growing at a CAGR of 7.54% from 2024 to 2033.
 71: 
 72: #### Key Statistics:
 73: 
 74: - **North America's Market Share (2023):** >55%
 75: - **Asia Pacific's Expected CAGR (2024-2033):** 9.05%
 76: - **Space Vehicles Market Share (2023):** 67%
 77: - **Commercial Segment Market Share (2023):** 62%
 78: - **Navigation and Mapping Segment Market Share (2023):** 21%
 79: - **U.S. Market Size (2023):** USD 170.63 billion, projected to reach USD 355.51 billion by 2033
 80: 
 81: #### Key Drivers:
 82: 
 83: - Technological advancements (e.g., reusable rockets, SmallSats, CubeSats)
 84: - Increased private sector investment (e.g., SpaceX, Blue Origin)
 85: - Rising demand for satellite data and services (e.g., navigation, Earth observation)
 86: 
 87: For a more detailed analysis, visit the full report
 88: [here](https://www.precedenceresearch.com/space-technology-market).
 89: 
 90: ---
 91: 
 92: ### Summary of the Space Exploration Market Report
 93: 
 94: **Market Size & Growth:**
 95: 
 96: - 2022: USD 486 billion
 97: - 2032: USD 1879 billion
 98: - CAGR: 16.21% (2022-2032)
 99: 
100: **Key Segments:**
101: 
102: - **Space Technology:** Satellites (largest share, 34.9%)
103: - **Mission Type:** Unmanned missions (significant growth)
104: - **Exploration Type:** Moon exploration (57.2% share)
105: - **End-Use:** Commercial sector (47.8% share)
106: 
107: **Regional Insights:**
108: 
109: - North America: Dominates with 38.7% share
110: - Asia Pacific: Fastest growth predicted
111: 
112: **Key Players:**
113: 
114: - SpaceX, NASA, Blue Origin, Lockheed Martin, Airbus Defense & Space
115: 
116: **Driving Factors:**
117: 
118: - Technological advancements
119: - Private sector investment
120: - Increased demand for space data
121: 
122: **Challenges:**
123: 
124: - High costs
125: - Space debris management
126: - Regulatory complexities
127: 
128: For more detailed information, visit the
129: [report page](https://www.sphericalinsights.com/reports/space-exploration-market).
130: 
131: ---
132: 
133: The article from the World Economic Forum discusses the projected growth of the space economy,
134: expecting it to reach $1.8 trillion by 2035. Key points include:
135: 
136: - **Rapid Growth**: The space economy, currently valued at $630 billion, is forecasted to grow at 9%
137:   per year.
138: - **Technological Advancements**: Innovations in satellite and rocket technologies are driving this
139:   growth.
140: - **Diverse Benefits**: Space technologies are enhancing various sectors, including agriculture,
141:   disaster mitigation, and digital communications.
142: - **Broader Investment**: Both state and private investments in space are increasing, with more than
143:   $70 billion invested in 2021-2022.
144: 
145: For more details, visit the article
146: [here](https://www.weforum.org/agenda/2024/04/space-economy-technology-invest-rocket-opportunity/).
147: 
148: ---
149: 
150: ### Summary: Space: The $1.8 Trillion Opportunity for Global Economic Growth
151: 
152: #### Executive Summary
153: 
154: - **Projected Growth**: Space economy to reach $1.8 trillion by 2035 from $630 billion in 2023,
155:   growing at 9% per year.
156: - **Technological Impact**: Innovations in satellite and rocket technologies are key growth drivers.
157: - **Industry Impact**: Space technologies will influence various sectors, including supply chain,
158:   agriculture, disaster mitigation, and digital communications.
159: 
160: #### Main Drivers
161: 
162: 1. **Decrease in Launch Costs**: 10-fold decrease over 20 years.
163: 2. **Commercial Innovation**: Smaller, more capable satellites.
164: 3. **Diversified Investment**: Over $70 billion private investment in 2021-2022.
165: 4. **Cultural Awareness**: Increased global interest in space activities.
166: 
167: #### Key Metrics
168: 
169: - **Space Economy Growth**: $1.8 trillion by 2035, 9% CAGR.
170: - **Commercial Communications**: $133 billion to $218 billion by 2035.
171: - **Positioning, Navigation, and Timing (PNT)**: Revenue growth from $40 billion to $95 billion
172:   by 2035.
173: - **Earth Observation (EO)**: Increase from $2 billion to $9 billion by 2035.
174: 
175: #### Industry Impacts
176: 
177: - **Supply Chain & Transportation**: Enhanced logistics and real-time tracking.
178: - **Food & Beverage**: Revolutionized delivery systems.
179: - **Retail & Consumer Goods**: Increased adoption of satellite-enabled devices.
180: - **Media & Entertainment**: Shift towards online platforms enabled by satellite internet.
181: - **State-Sponsored Applications**: Strategic importance for national security and research.
182: 
183: #### Global Participation
184: 
185: - **Established Space Nations**: Increased investments (e.g., India, Japan).
186: - **Emerging Space Nations**: New investments (e.g., Saudi Arabia, Thailand).
187: - **Geopolitical Conflicts**: Space capabilities in modern warfare (e.g., Ukraine).
188: 
189: ### References
190: 
191: - **World Economic Forum in partnership with McKinsey & Company**
192: 
193: For more detailed information, you can view the full report on the
194: [World Economic Forum's website](https://www3.weforum.org/docs/WEF_Space_2024.pdf).
195: 
196: ### References
197: 
198: - [Market Growth Q1 23](https://www.newspace.capital/wp-content/uploads/2023/11/Space-Industry-Review_Q1-2023_compressed.pdf)
199: - [Research Paper on Industry Growth April 24](https://www.oecd-ilibrary.org/docserver/9ae9a28d-en.pdf?expires=1718003766&id=id&accname=guest&checksum=0040C7D689A36606E846C58D7A8D8CDA)
200: - [Number of Investors in Industry](https://brycetech.com/reports/report-documents/Bryce_Start_Up_Space_2023.pdf)
201: - [Australia Report](https://assets.kpmg.com/content/dam/kpmg/au/pdf/2023/prosperous-future-report-space.pdf)
202: - [Space Sector Report Q1 2024](https://spacecapital.docsend.com/view/ajdahcajuyxa2zq9)
203: - [Space Sector Investment](https://app.powerbi.com/view?r=eyJrIjoiNGY4MWI4OWEtMjNmZS00OTM3LWE5M2QtYTgxZTdjODk3YTllIiwidCI6IjYzMDZkMTJjLTEwODMtNGNhOS04Yjk2LTdjYzM3ODcwMWIzMiIsImMiOjN9)
204: - [World Economic Forum Space Sector 2024](https://www3.weforum.org/docs/WEF_Space_2024.pdf)
205: - [The role in space driving sustainable development](https://www.mckinsey.com/~/media/mckinsey/industries/aerospace%20and%20defense/our%20insights/the%20role%20of%20space%20in%20driving%20sustainability%20security%20and%20development%20on%20earth/the-role-of-space-in-driving-sustainability-security-and-development-on-earth-vf.pdf)
206: 
207: ### Indian Market
208: 
209: The space sector in India has been growing steadily over the past few years, driven by significant
210: advancements and initiatives by the Indian Space Research Organisation (ISRO) and the increasing
211: involvement of private companies. Here is an overview of the key aspects of the Indian space sector:
212: 
213: ### Growth Over the Last Few Years
214: 
215: 1. **ISRO's Achievements:**
216: 
217:    - **Mars Orbiter Mission (Mangalyaan):** Launched in 2013, it made India the first country to
218:      successfully reach Mars in its first attempt.
219:    - **Chandrayaan Missions:** The Chandrayaan-2 mission in 2019 aimed to explore the Moon's south
220:      pole.
221:    - **Satellite Launches:** ISRO has been launching satellites for various purposes, including
222:      communication, Earth observation, and navigation. The PSLV (Polar Satellite Launch Vehicle) has
223:      been a workhorse for ISRO, with numerous successful missions.
224: 
225: 2. **Private Sector Involvement:**
226: 
227:    - Companies like OneWeb and SpaceX have shown interest in launching satellites using ISRO's
228:      launch vehicles.
229:    - Indian startups like Skyroot Aerospace and Agnikul Cosmos are emerging, focusing on developing
230:      private launch capabilities and small satellite technology.
231: 
232: 3. **Commercial Satellite Launches:**
233: 
234:    - India has been a preferred destination for launching small satellites for other countries due
235:      to its cost-effective launch solutions. ISRO’s Antrix Corporation, the commercial arm, has been
236:      successful in attracting international clients.
237: 
238: 4. **Policy and Infrastructure:**
239:    - The Indian government has been working on policies to boost private sector participation. The
240:      creation of IN-SPACe (Indian National Space Promotion and Authorization Center) aims to provide
241:      a level playing field for private companies.
242:    - Investment in space infrastructure, including new launch sites and the development of the Human
243:      Spaceflight program (Gaganyaan), is ongoing.
244: 
245: ### Projections to 2035
246: 
247: 1. **Market Size and Growth:**
248: 
249:    - The Indian space sector is expected to grow significantly, with projections indicating that it
250:      could reach a market size of around $50 billion by 2030.
251:    - The sector's growth rate is expected to be robust, driven by increased demand for
252:      satellite-based services, commercial launches, and new space exploration missions.
253: 
254: 2. **Key Areas of Growth:**
255: 
256:    - **Satellite Launches:** Continued growth in the launch of communication, Earth observation, and
257:      navigation satellites.
258:    - **Space Exploration:** Missions like Chandrayaan-3, Gaganyaan (human spaceflight), and future
259:      interplanetary missions.
260:    - **Space-Based Services:** Expansion in services like satellite internet, remote sensing, and
261:      satellite-based navigation (NavIC).
262: 
263: 3. **Private Sector Expansion:**
264: 
265:    - Increased involvement of private companies in manufacturing, launching, and providing
266:      space-based services.
267:    - Growth of startups and innovation hubs focused on space technology.
268: 
269: 4. **Government Initiatives:**
270:    - Continued support through policies and funding, aiming to make India a global space hub.
271:    - Collaboration with international space agencies and participation in global space missions.
272: 
273: ### Recent Developments
274: 
275: 1. **ISRO's Budget:**
276: 
277:    - The Indian government has been increasing the budget allocation for ISRO, reflecting the
278:      growing importance of space activities.
279: 
280: 2. **Human Spaceflight Program:**
281: 
282:    - The Gaganyaan mission aims to send Indian astronauts into space, which would be a significant
283:      milestone.
284: 
285: 3. **International Collaborations:**
286:    - ISRO has been collaborating with other space agencies like NASA, ESA, and Roscosmos for various
287:      missions and technology sharing.
288: 
289: ### Challenges
290: 
291: 1. **Funding and Investment:**
292: 
293:    - While the government has been supportive, increasing private investment is crucial for
294:      sustained growth.
295: 
296: 2. **Regulatory Framework:**
297: 
298:    - Streamlining regulatory processes to facilitate easier entry and operation for private
299:      companies.
300: 
301: 3. **Technological Advancements:**
302:    - Keeping pace with global advancements in space technology and innovation.
303: 
304: ---
305: 
306: ### Department of Space Year-End Review 2022: Key Achievements from 2014 to December 2022
307: 
308: #### Overview
309: 
310: The Indian Space Programme has been highly dynamic and vibrant, achieving several milestones over
311: the past eight years. Below are the key missions, technological advancements, and strategic
312: initiatives by the Department of Space (DoS) and ISRO.
313: 
314: #### Key Missions
315: 
316: - **Launches and Missions:**
317:   - **44 spacecraft missions**, **42 launch vehicle missions**, and **5 technology demonstrators**
318:     have been successfully executed since 2014.
319:   - **GSLV-D5 (2014):** First successful flight with indigenous Cryogenic Upper Stage.
320:   - **Mars Orbiter Mission (2014):** Successfully entered Mars orbit, operational beyond its
321:     designed life.
322:   - **GSLV MKIII (2014):** Experimental flight of the next-generation launch vehicle.
323:   - **AstroSat (2015):** First dedicated Indian astronomy mission, discovering five new galaxies.
324:   - **NavIC (2016):** Navigation with Indian Constellation operational with 7 satellites.
325:   - **Reusable Launch Vehicle-Technology Demonstrator (2016):** Successful flight testing.
326:   - **PSLV C-37 (2017):** World record by placing 104 satellites in orbit during a single launch.
327:   - **GSLV Mk-III D1 (2017):** Successfully launched GSAT-19.
328:   - **Chandrayaan-2 (2019):** Launched India's second mission to the Moon.
329:   - **Quantum Key Distribution (2022):** Demonstrated real-time QKD and quantum-secure
330:     communication.
331:   - **OneWeb India-1 Mission (2022):** Successfully launched by LVM3.
332: 
333: #### Technological and Strategic Advancements
334: 
335: - **Human Spaceflight:**
336:   - **Gaganyaan Programme (2018):** Announced to mark India's foray into human space exploration.
337:   - **Crew Escape System (2018):** Pad Abort Test for human spaceflight safety.
338: - **High Throughput Satellites:**
339:   - **GSAT-29 (2018):** Launched to provide connectivity to remote regions.
340:   - **GSAT-11 (2018):** Heaviest satellite built by ISRO, launched from French Guiana.
341: - **Innovations:**
342:   - **Scramjet Engine (2016):** First experimental mission of Air Breathing Propulsion System.
343:   - **Inflatable Aerodynamic Decelerator (2022):** New technology demonstration for future missions.
344: - **Space Policy and Industry Participation:**
345:   - **NewSpace India Limited (NSIL, 2019):** Incorporated to scale up high-technology manufacturing
346:     and commercial exploitation of space products and services.
347:   - **IN-SPACe (2020):** Established to enhance private sector participation and boost India's
348:     market share in the global space economy.
349:   - **Private Launches (2022):** First private launchpad and mission control center by Agnikul
350:     Cosmos and the launch of Vikram-S by Skyroot Aerospace.
351: 
352: #### Academic Support and Outreach
353: 
354: - **Space Technology Incubational Centres (STIC):**
355:   - Established at key locations to boost space research activities. Currently, nine Space
356:     Technology Cells, six STICs, and six Regional Academic Centres for Space (RACS) are operational.
357: - **Capacity Building:**
358:   - **UNNATI Programme (2018):** Training on nanosatellites development with international
359:     participants.
360:   - **Young Scientist Programme (YUVIKA, 2019):** Imparts basic knowledge on space technology to
361:     young talents.
362: - **Innovation Network:**
363:   - **SpaceTech Innovation Network (SpIN, 2022):** Launched to support the burgeoning space
364:     entrepreneurial ecosystem.
365: 
366: #### Reforms and Enhanced Industry Participation
367: 
368: - **Space Sector Reforms (2020):** Major transformation to include private players in the Indian
369:   space programme.
370: - **Technology Transfer:**
371:   - NSIL has signed multiple Technology Transfer Agreements, transferring ISRO-developed
372:     technologies to Indian Industry.
373: - **Contracts and Commercial Launches:**
374:   - HAL and L&T consortia to produce PSLV.
375:   - Launch of GSAT-24, a demand-driven mission by NSIL.
376: 
377: #### Conclusion
378: 
379: The Indian space sector has achieved significant milestones in mission execution, technological
380: advancements, and strategic reforms, positioning India as a major player in the global space
381: economy. The initiatives have not only enhanced India's space capabilities but also opened avenues
382: for increased private sector participation and international collaboration.
383: 
384: ---
385: 
386: ### Snapshot of the Indian Space Sector
387: 
388: #### Overview
389: 
390: The Indian space sector is renowned for its cost-effective satellite solutions and successful launch
391: missions, such as the Mars Orbiter Mission (Mangalyaan). Currently, India holds 2-3% of the global
392: space economy, with ambitions to increase this share to over 10% by 2030.
393: 
394: #### Sector Specifics
395: 
396: **Satellite Manufacturing:**
397: 
398: - Collaboration between government agencies and private parties for manufacturing satellite parts
399:   and launchers.
400: - PSLV-C53 marked the first official public-private collaboration for a space launcher in India.
401: 
402: **Satellite Launches:**
403: 
404: - **Mars Orbiter Mission (2013):** India became the first nation to reach Mars orbit on its first
405:   attempt.
406: - **Gaganyaan Mission:** Scheduled to launch India's first crewed flight into space by 2024.
407: - **Other Missions:** Research satellites, navigation satellites (NavIC), and student satellites.
408: 
409: **Satellite Launch Services:**
410: 
411: - ISRO provides launch facilities for private and foreign organizations.
412: - Two operational launchers: Polar Satellite Launch Vehicle (PSLV) and Geosynchronous Satellite
413:   Launch Vehicle (GSLV).
414: - **PSLV:** 55 launches with 52 successes (as of July 2022).
415: - **NewSpace India Limited (NSIL):** Established as ISRO's commercial arm to drive private sector
416:   demand through technology transfer and aggregator models.
417: - India launched 381 foreign satellites for 34 countries (1999-2022), including 36 OneWeb Gen 1
418:   communication satellites in October 2022.
419: 
420: **Satellite Applications:**
421: 
422: - Applications include remote sensing, navigation, earth observation, disaster management, testing,
423:   and data analysis.
424: - Shift from building capabilities under ISRO to commercializing space-based technology and
425:   increasing private sector involvement.
426: - Potential future areas: space tourism and asteroid mining.
427: 
428: #### Key Achievements and Statistics
429: 
430: - **Foreign Satellite Launches:** 424 foreign satellites launched, earning over $279 million in
431:   revenue.
432: - **ISRO Agreements:** Six agreements with four countries (2021-2023) for launching foreign
433:   satellites, with a revenue potential of $141 million.
434: - **Private Sector Growth:** Over 400 private space companies, making India the fifth globally in
435:   the number of space companies.
436: - **Start-Up Growth:** From 1 start-up in 2012 to 189 in 2023, with funding growing to $124.7
437:   million in 2023.
438: 
439: #### Industry Scenario
440: 
441: - **Sector Valuation:** Valued at $9.6 billion in 2020, contributing 2%-3% of the global space
442:   economy. Expected to reach $13 billion by 2025 and capture close to 10% of the global economy
443:   by 2030.
444: - **Private Sector Role:** Emphasized by Prime Minister to increase India's share in the global
445:   space industry.
446: - **NSIL Investment:** Announced $1.2 billion investment over the next 5 years to boost industry
447:   involvement and commercial activities.
448: - **International Collaboration:** India is the 27th country to sign the Artemis Accords, guiding
449:   space exploration cooperation among nations participating in NASA’s Artemis program.
450: - **Policy Changes:** Space Policy 2023 highlights private sector as a critical stakeholder. Space
451:   Activities Bill and 10 draft policies are in progress to provide regulatory frameworks and
452:   investment channels.
453: 
454: #### Growth Drivers
455: 
456: - **Increasing Demand:** For satellite services, including geospatial data-based services.
457: - **Encouraging Private Players:** Opportunities in setting up ground stations, small satellite
458:   segments, and component manufacturing.
459: - **Emerging Areas:** Space tourism and commercial recovery of space resources.
460: - **Complementary Sectors:** Strong support from India's leading aviation, defense, IT, and software
461:   industries.
462: 
463: This comprehensive overview highlights India's strategic advancements and growing potential in the
464: global space sector, driven by strong public-private partnerships and innovative policies.
465: 
466: ---
467: 
468: India's space economy is projected to reach $40 billion by 2040, according to Union Minister
469: Jitendra Singh. The sector has grown significantly due to increased private sector participation and
470: various reforms, including the creation of IN-SPACe, which facilitates private industry
471: participation. Singh highlighted the importance of satellite communication, Earth observation, and
472: navigation, and emphasized India's cost-effective satellite launches. The government's focus on
473: innovation and strategic partnerships aims to enhance India's position in the global space economy.
474: 
475: For more details, read the full article
476: [here](https://www.livemint.com/news/india/indias-space-economy-to-soar-to-40-billion-by-2040-union-minister-jitendra-singh-11700977122020.html).
477: 
478: ---
479: 
480: The Indian space sector has made significant advancements, transitioning from primarily
481: government-driven initiatives to increasing private sector involvement. Key milestones include the
482: establishment of the Indian Space Research Organisation (ISRO), notable achievements in satellite
483: launches, and successful interplanetary missions. The sector is supported by policies promoting
484: private investment, technological innovation, and international collaborations. Future growth is
485: expected to be driven by satellite manufacturing, launch services, and space-based applications,
486: with a focus on enhancing India's global presence and market share in the space economy.
487: 
488: For more details, visit the
489: [full document](https://www.eoiparis.gov.in/page/overview-of-the-indian-space-sector/).
490: 
491: ---
492: 
493: The Indian Space Economy is projected to grow from $8.4 billion to $44 billion by 2033. Key
494: developments include the rise of space start-ups from 1 in 2014 to 189 in 2023, with investments
495: reaching $124.7 million in 2023. The Indian Space Policy 2023 aims to enhance private sector
496: involvement in satellite manufacturing, launch vehicle production, and ground systems. Initiatives
497: include promoting foreign direct investment, establishing private launchpads, and integrating space
498: technology education. IN-SPACe has signed 45 MoUs with NGEs to bolster industry participation.
499: 
500: For more detailed information, visit
501: [PIB Press Release](https://pib.gov.in/PressReleaseIframePage.aspx?PRID=1988864).
502: 
503: ---
504: 
505: ## ::financial-chart
506: 
507: title: Projected Indian Market Growth chartType: line chartDataKey: indianMarket
508: 
509: ---
510: 
511: ::
512: 
513: ### References
514: 
515: - [Invest India Space Sector](https://www.investindia.gov.in/sector/space)
516: - [End of Year Review 2022 Space](https://static.investindia.gov.in/s3fs-public/2023-01/PIB1887687.pdf)
517: - [ISRO Opening Space](https://www.isro.gov.in/g20selm/assets/img/PDF/OpeningupSpace.pdf)
518: 
519: ---
520: 
521: ## Jobs Market
522: 
523: ### Summary of Employment in the Space Sector and Gender Perspectives
524: 
525: This chapter provides an overview of employment in the global space sector, with a focus on gender
526: perspectives and the production of indicators to evaluate the sector from this viewpoint. The data
527: covers government space agencies, higher education institutions, and the private sector.
528: 
529: #### State of Employment in the Space Sector
530: 
531: - **Global Workforce**: Approximately 1 million people were employed in the space sector globally in
532:   2017, with significant concentrations in the United States (350,000), Russia (200,000), and Europe
533:   (60,000).
534: - **Employment Categories**: Jobs span public administration, core space manufacturing (rockets,
535:   satellites, ground systems), and the broader space services sector (mainly commercial satellite
536:   telecommunications).
537: 
538: #### Trends and Regional Insights
539: 
540: - **Stability and Growth**: Space manufacturing employment has been stable or increasing in most
541:   OECD countries over the past decade.
542:   - In Europe, employment reached 43,000 full-time equivalents in 2017.
543:   - In North America, US employment levels remained stable with 80,000 people employed in space
544:     manufacturing in 2017, while Canada employed almost 5,000.
545:   - In Asia, Japan employed about 9,000 people in space manufacturing, with Korea employing almost
546:     3,000.
547: 
548: #### Gender Gap and Female Employment
549: 
550: - **Current Status**: Women are under-represented across all segments of the space sector, from
551:   government to private industry.
552: 
553:   - Higher female employment rates are observed in administrative and project management roles
554:     compared to technical and engineering roles.
555:   - In Ukraine's National Space Agency, women represent 48% of employees.
556:   - At NASA, women account for 34% of total employment but only 23% of science and engineering
557:     occupations.
558: 
559: - **Trends in Higher Education**: Female participation in space-related higher education fields
560:   remains low but shows some positive trends.
561:   - In Korea, women accounted for 17% of doctoral and master’s students in space-related fields
562:     in 2016.
563:   - In France, women made up 34% of permanent research personnel in space-related academic research
564:     institutions in 2016.
565: 
566: #### Gender Diversity in the Private Sector
567: 
568: - **Variability Across Segments**: Female employment rates in space manufacturing hover around 20%
569:   in Europe and the United States.
570:   - The Russian Federation reported a 46% female employment rate in the space manufacturing sector.
571:   - Women tend to have higher representation in downstream segments such as earth observation and
572:     satellite telecommunications.
573: 
574: #### Initiatives to Address Gender Disparity
575: 
576: - **Policy Actions and Programs**: Various initiatives are in place to promote gender equality in
577:   the space sector.
578:   - **Awareness and Engagement**: High-level conferences and workshops (e.g., Space for Women by
579:     UNOOSA/UN Women).
580:   - **Educational Initiatives**: Scholarships, mentorship programs, and dedicated internships to
581:     attract women to space-related higher education.
582:   - **Professional Setting**: Gender bias training, recruitment policies aiming for gender balance,
583:     and work-life balance schemes in organizations like NASA, ESA, and JAXA.
584: 
585: #### Future Directions
586: 
587: - **Generation Change**: The retirement of baby boomers is creating opportunities for younger
588:   professionals.
589: - **Digitalization and Automation**: Growing automation and digitalization trends may impact future
590:   job creation in space manufacturing.
591: 
592: This summary underscores the importance of continuous efforts to bridge the gender gap and
593: highlights the ongoing trends and challenges within the global space sector's workforce. For more
594: detailed information, you can refer to the full report from the OECD and other sources.
595: 
596: #### References
597: 
598: - [OECD Report on Space Employment](https://www.oecd-ilibrary.org/docserver/9ae9a28d-en.pdf?expires=1718003766&id=id&accname=guest&checksum=0040C7D689A36606E846C58D7A8D8CDA)
599: - [NASA Workforce Profile](https://wicn.nssc.nasa.gov/wicn_cubes.html)
600: - [Eurospace Facts & Figures](https://www.eurospace.org/)
601: - [Korean Space Industry Survey](https://www.kari.re.kr/eng.do)
602: 
603: ---
604: 
605: ### Summary of Employment in the U.S. Space Economy (2012-2021)
606: 
607: #### Overview:
608: 
609: - **Report Released**: June 27, 2023
610: - **Period Covered**: 2012-2021
611: - **Key Metrics**: Gross output, GDP contribution, private employment, and compensation.
612: 
613: #### Major Findings:
614: 
615: - **2021 Economic Impact**:
616:   - **Gross Output**: $211.6 billion
617:   - **GDP Contribution**: $129.9 billion (0.6% of total U.S. GDP)
618:   - **Private Industry Compensation**: $51.1 billion
619:   - **Private Industry Jobs**: 360,000
620: 
621: #### Employment and Compensation:
622: 
623: - **Total Private Employment**: 360,000 jobs in 2021
624: - **Sector Breakdown**:
625:   - **Manufacturing**:
626:     - **Share of Employment**: 35%
627:     - **Share of Compensation**: 45% ($182,762 average compensation)
628:   - **Information Sector**:
629:     - **Share of Employment**: 23%
630:     - **Share of Compensation**: 18%
631: 
632: #### Industry Performance (2012-2021):
633: 
634: - **Growth**:
635:   - **Gross Output**: Increased from $180.6 billion (2012) to $211.6 billion (2021)
636:   - **Real Gross Output**: Growth varied with an increase of 2.2% in 2019, a decrease of 1.9% in
637:     2020, and a further decrease of 0.4% in 2021.
638:   - **Real Value Added**: Increased 3.0% in 2019, decreased 0.4% in 2020, and decreased 3.6%
639:     in 2021.
640: - **Manufacturing**: Strong growth in 2019 (9.5%) and 2021 (5.8%)
641: - **Government Sector**: Increased 9.3% in 2019 and 3.4% in 2021; no decrease in 2020.
642: 
643: #### Government Employment:
644: 
645: - **Nondefense Federal, State, and Local Space Employment (2021)**: 19,111
646:   - **NASA**: 15,762 employees
647:   - **NOAA**: 2,030 employees
648:   - **Space Force**: 9,979 employees (defense-related, 2021 data)
649:   - **Other Federal Agencies**: FAA and U.S. Geological Survey among others.
650: 
651: #### Revisions and Methodology:
652: 
653: - **Methodological Improvements**: Corrected R&D spending estimates and included new insurance data.
654: - **Updated Source Data**: Reflected in gross output and value added by industry, incorporating new
655:   receipts and shipments data from the U.S. Census Bureau and IRS.
656: 
657: #### Next Steps:
658: 
659: - **Future Enhancements**: Estimating space economic activity by more specific categories (e.g.,
660:   launch and R&D) and potentially by state.
661: - **Feedback Request**: BEA encourages suggestions for improving space economy estimates.
662: 
663: #### Summary:
664: 
665: The U.S. space economy shows significant growth and economic contribution, with notable employment
666: in both private and public sectors. Continuous updates and methodological improvements aim to refine
667: these statistics and provide more detailed insights into the space economy's impact.
668: 
669: For detailed data and further information, you can visit the
670: [U.S. Bureau of Economic Analysis (BEA) space economy website](https://www.bea.gov/data/special-topics/space-economy).
671: 
672: ---
673: 
674: ### Summary of Employment in the Global Space Sector
675: 
676: #### Market Overview:
677: 
678: - **2021 Valuation**: The global space market was valued at $388.50 billion.
679: - **2026 Projection**: Expected to reach $540.75 billion.
680: - **Growth**: The sector grew by 70% between 2010 and 2020.
681: - **CAGR (2022-2026)**: Predicted at 6.84%.
682: - **Long-term Forecast**: Expected to reach $1 trillion in annual revenue by 2040.
683: 
684: #### Key Factors Driving Growth:
685: 
686: - **Cost Reduction**: Launch costs lowered by 95%.
687: - **Private Investment**: Around $14.5 billion invested in space infrastructure companies in the
688:   previous year, with expectations of increased investment.
689: - **Public-Private Partnerships**: Collaboration between public agencies and private companies is
690:   growing.
691: 
692: #### Employment Impact:
693: 
694: - **Current Jobs**: Estimated at around 400,000 jobs in the space sector.
695: - **Future Projection**: Expected to rise to 1.5 million jobs.
696: - **Job Categories**: Includes roles in accounting, marketing, design, IT, manufacturing, and STEM
697:   fields.
698: - **U.S. Manufacturing**: Advanced manufacturing for launch services generates over $2 billion
699:   annually, supporting 40% of global commercial launches.
700: 
701: #### Segment and Regional Insights:
702: 
703: - **Satellite Market**: Comprises over 70% of the space economy, with significant revenue from
704:   television services, broadband Internet, and mobile connectivity.
705: - **Reusable Rockets**: Expected to reduce costs and increase the feasibility of new space
706:   initiatives.
707: - **Lunar Exploration**: Renewed interest in the moon as a testing ground for Mars missions.
708: - **Climate Change Initiatives**: Investments in space technology to combat climate change and
709:   achieve the United Nations’ Sustainable Development Goals.
710: - **Market Segmentation**: The commercial space segment holds the largest market share (76% in
711:   2021).
712: 
713: #### Emerging Trends:
714: 
715: - **Space Tourism**: Private companies are advancing space tourism.
716: - **Technological Innovations**: Includes uninterrupted Internet, small satellites, space resource
717:   utilization, in-space manufacturing, asteroid mining, and interplanetary transportation systems.
718: 
719: #### Regional Market Dynamics:
720: 
721: - **North America**: Leading in Earth observation with nearly half of the global market share
722:   in 2021.
723: - **Africa and the Middle East**: Emerging market for satellite navigation, growing at a CAGR of
724:   11%.
725: 
726: #### Conclusion:
727: 
728: The global space sector is expanding rapidly, driven by technological advancements, increasing
729: private investment, and strategic public-private partnerships. This growth is creating substantial
730: employment opportunities and fostering innovation across various industries.
731: 
732: For more detailed information, you can refer to sources such as the OECD's space industry reports
733: and market analysis from Precedence Research and the World Economic Forum.
734: 
735: ---
736: 
737: #### References
738: 
739: - [State of employment in the space sector 2017](https://www.oecd-ilibrary.org/sites/c5996201-en/1/2/3/index.html?itemId=/content/publication/c5996201-en&mimeType=text/html&_csp_=ffe5a6bbc1382ae4f0ead9dd2da73ff4&itemIGO=oecd&itemContentType=book#:~:text=The%20global%20space%20sector%20employed,around%2060%20000%20in%20Europe.)
740: - [Occupational Outlook Handbook](https://www.bls.gov/ooh/life-physical-and-social-science/physicists-and-astronomers.htm)
741: - [USA Space Job Market 2021](https://apps.bea.gov/scb/issues/2023/06-june/0623-space-economy.htm)
742: - []()
743: - []()
744: - []()
```

## File: apps/admin-dashboard/content/bp/appendix-supporting-docs.md
```markdown
 1: #### Supporting Documents and Data
 2: 
 3: 1. **Company Overview and Mission Statement:**
 4: 
 5:    - A document detailing AstronEra’s mission, vision, and core values.
 6:    - Background information about the company, its founders, and the inspiration behind its
 7:      creation.
 8: 
 9: 2. **Product Descriptions:**
10: 
11:    - Detailed descriptions of the Online Astronomy Hub features, including:
12:      - News Aggregation
13:      - Company Profiles
14:      - Social Interaction
15:      - AI-driven Summarization
16:      - Jobs Portal
17:      - Courses
18:      - AI RAG Search for Scraped Content
19:    - Explanation of the tiered subscription model (Free, Pro, Expert) and the specific features
20:      included in each tier.
21: 
22: 3. **Marketing and Sales Strategy:**
23: 
24:    - Detailed marketing and sales strategy documents, including objectives, customer acquisition
25:      strategies, digital marketing and SEO plans, social media engagement strategies, sales funnel,
26:      and conversion strategies.
27:    - Partnership and collaboration plans.
28: 
29: 4. **Operations Plan:**
30: 
31:    - Overview of business operations and workflow.
32:    - Detailed description of the technology stack and infrastructure.
33:    - AI agents for content updates and automation.
34:    - Content sourcing and quality control processes.
35:    - Customer support and service plans.
36: 
37: 5. **Management Team:**
38:    - Organizational structure and roles and responsibilities of key team members.
39:    - Profiles of advisory board members and consultants.
```

## File: apps/admin-dashboard/content/bp/company-details.md
```markdown
 1: #### Company History and Background
 2: 
 3: 1. **Founding Details:**
 4: 
 5:    - **Founding Date:** AstronEra was founded on 29th August 2018.
 6:    - **Founders:** Shweta Kiran Kulkarni, with over 10 years of experience as a science
 7:      communicator, dark sky advocate, and astropreneur.
 8:    - **Inspiration:** AstronEra was created to bridge the gap between the general public and
 9:      professionals in the field of astronomy, making astronomy accessible to all and fostering
10:      scientific temperment.
11: 
12: 2. **Milestones:**
13: 
14:    - **IIMB Incubation (March 2018):** Shweta, among the top 100 women entrepreneurs in India,
15:      helped shape AstronEra, which was registered as AEII Pvt. Ltd.
16:    - **AstronEra Founded (November 2018):** The first astronomy e-learning platform was launched at
17:      Pune's Chandrasekhar Auditorium to an audience of over 800 business folk, esteemed guests, and
18:      renowned scientists.
19:    - **IAU Award (March 2019):** Efforts to popularize astronomy among tribal students were
20:      acknowledged by the International Astronomical Union (IAU).
21:    - **OAD, IAU Funding (January 2022):** Received an IAU, Office of Astronomy Development (OAD)
22:      grant to train tribal students as AstroGuides through the AstroTribe project.
23:    - **AstroTourism (March 2023):** Department of Science and Technology, (DST), Gov. India granted
24:      funds for AstroTourism and light pollution awareness in Himachal Pradesh and Ladakh.
25:    - **IDSPAC 2023:** Hosted the International Dark Sky Preservation and Astro-Tourism Conference
26:      represented a groundbreaking event in India, shedding light on the critical importance of
27:      preserving Dark Skies and harnessing the immense potential of Astro-Tourism.
28:    - **Significant Developments:** Expansion of services from just stargazing and educational
29:      content to a full astronomy hub, aligning with our original vision.
30: 
31: 3. **Location:**
32:    - **Headquarters:** Pune, India.
33:    - **Additional Locations:** Completed projects in Himachal Pradesh, Ladakh, and througout
34:      Marharashtra.
35:    - **Global Presence:** Presented in prominent conferences around the globe including, Australia,
36:      UK, Israel, Canada, Ethiopeia and France.
```

## File: apps/admin-dashboard/content/bp/company-model.md
```markdown
 1: #### Business Model and Revenue Streams
 2: 
 3: 1. **Revenue Streams:**
 4: 
 5:    - **Subscription Tiers:**
 6:      - **Free Tier:**
 7:        - Access to basic news summarization, basic AI questions, and limited agents using free or
 8:          low-cost LLMs.
 9:        - Access to root content such as news, research, companies, events, courses, etc.
10:      - **Pro Tier ($30/month):**
11:        - Advanced AI features, premium content access, and enhanced content summarization.
12:        - Access to premium news, company insights, job listings, events, and social media
13:          integration.
14:      - **Expert Tier ($50/month):**
15:        - Full AI capabilities with the latest models, extensive AI agents for specialized queries,
16:          comprehensive content summarization, and advanced search capabilities.
17:        - Exclusive webinars, collaborative research tools, advanced data insights, and personalized
18:          content.
19:    - **Additional Revenue Sources:**
20:      - **Advertising:** Simple paid advertising slots in the newsfeed or sidebar, with a future
21:        dashboard for businesses to create and manage their own ads.
22:      - **Affiliate Marketing:** Links in human-generated content, promoting recommended products.
23: 
24: 2. **Customer Segments:**
25: 
26:    - **Primary Customers:**
27:      - **Astronomy Professionals:** Stay updated with the latest news, job openings, use AI tools,
28:        network with other professionals, grow a following, find resources/tools.
29:      - **Students:** Set up career paths, find jobs or internships, help with study planning and
30:        research, find resources/tools.
31:      - **Science Communicators/Influencers:** Simplify complex topics with AI, expand reach and
32:        audience, promote content.
33:      - **Astronomy Businesses:** Outreach and awareness, talent acquisition, promote jobs, customize
34:        profiles, user interactions.
35:      - **Enthusiasts:** Stay updated with the latest news, access all astronomy needs, connect with
36:        professionals, explore career shifts.
37: 
38: 3. **Value Proposition:**
39:    - **Unique Value:**
40:      - Over a decade of experience in science communication.
41:      - Diversity of thought and opinions.
42:      - Established network providing extra value to users.
43:      - User experience-first approach, ensuring ease of use and access to information.
44:      - Pioneering AI Copilot for astronomers and tailored AI-curated content.
45:    - **Differentiation:**
46:      - Comprehensive astronomy platform serving all user segments.
47:      - Unique combination of astronomy expertise and AI knowledge.
48:      - Established brand with significant experience and partnerships in the astronomy industry.
49:      - One-stop shop for astronomy, accessible to all levels of users.
50:      - Focus on sustainable development and conservation of the night sky.
```

## File: apps/admin-dashboard/content/bp/company-objectives.md
```markdown
 1: #### Company Objectives and Goals
 2: 
 3: 1. **Short-term Goals:**
 4: 
 5:    - **Objectives (1-2 years):**
 6:      - Expansive dataset of research papers, news articles, courses, textbooks, jobs, and company
 7:        information.
 8:      - User growth: 10k after 1 year, 50k after 2 years, with conversion rates improving from 3% to
 9:        6%.
10:      - Dominance in astronomy communication and community building.
11:      - Securing a globally known brand ambassador.
12:    - **Milestones:**
13:      - User growth milestones: 1k, 5k, 10k, 25k, 50k users.
14:      - Establishing a dark sky community.
15:      - Pioneering astronomy science communication curriculum.
16:      - Launching the AI Copilot.
17:      - Promoting AstroTourism in India.
18: 
19: 2. **Long-term Vision:**
20: 
21:    - **Vision (5-10 years):**
22:      - Global one-stop shop for astronomy.
23:      - Best AI system for astronomy research.
24:      - Platform for collective intelligence and recognition.
25:      - Acquisition target of over $10 billion USD.
26:      - Largest user base of astronomy professionals and enthusiasts.
27:      - Leading movement for dark sky conservation.
28:      - Reducing global light pollution.
29:      - Marketplace for astronomy products and services.
30:    - **Strategic Goals:**
31:      - Continued investment in AI systems and data quality.
32:      - Hiring top talent passionate about astronomy and technology.
33:      - Centralization of the science community for technical institutions.
34:      - Promoting light pollution reduction and dark sky conservation.
35:      - Targeting academic institutes and businesses for research and promotion.
36:      - Partnering with organisations around the globe for loacalised curated content/services.
37: 
38: 3. **KPIs and Metrics:**
39:    - **Key Performance Indicators:**
40:      - Growing user base and monthly recurring revenue.
41:      - Improved conversion rates and user engagement.
42:      - Increased social mentions and backlinks.
43:    - **Metrics:**
44:      - Monthly Active Users (MAU)
45:      - Customer Churn Rate (CCR)
46:      - Monthly Recurring Revenue (MRR)
47:      - Customer Acquisition Cost (CAC)
48:      - Website Bounce Rate
49:      - Organic Traffic
50:      - Paid Traffic
51:      - Virality Score
52:      - Social Mentions
53:      - Conversion Rate
54:      - Average User Engagement
55:      - Average Session Duration
56:      - Average Customer Lifetime Value (CLV)
```

## File: apps/admin-dashboard/content/bp/costs.md
```markdown
1: #### Supabase: $25 PM
2: 
3: - 100,000 monthly active users (then $0.00325 per MAU)
4: - 8 GB database space (then $0.125 per GB)
5: - 250 GB bandwidth (then $0.09 per GB)
6: - 100 GB file storage (then $0.021 per GB, $21 USD PM for 1TB s3)
7: - Email support
8: - Daily backups stored for 7 days
9: - 7-day log retention
```

## File: apps/admin-dashboard/content/bp/executive-summary.md
```markdown
  1: ---
  2: section: executive-summary
  3: ---
  4: 
  5: # Startup Budget Plan for AstronEra
  6: 
  7: ## Executive Summary
  8: 
  9: Our startup is developing a SaaS platform that provides a comprehensive Online Astronomy Hub for
 10: enthusiasts, professionals, students, and businesses. We're targeting a rapidly growing market with
 11: a current size of $630 billion and projected annual growth to reach $1.8 trillion by 2035.
 12: 
 13: Key highlights of our 12-month plan:
 14: 
 15: - Projected user growth from 100 to 40,000
 16: - Revenue growth to ₹1,19,19,800 by year-end
 17: - Profitability achieved in Month 6
 18: - Introduction of B2B offering with projected 4 enterprise clients by year-end
 19: - Net profit of ₹75,62,175 in the first year
 20: 
 21: We're seeking an investment of ₹10,00,000 to fuel our growth and achieve these projections. The
 22: repayment plan includes ₹12,00,000 to be repaid starting after 12 months.
 23: 
 24: ### Investor Payback
 25: 
 26: - **Initial Investment:** ₹10,00,000
 27: - **20% Interest:** ₹2,00,000
 28: - **Total Payback Due:** ₹12,00,000
 29: 
 30: ### Key Offerings
 31: 
 32: - News and content aggregation with AI-driven summarization
 33: - Company profiles and job listings
 34: - Social interaction features and community-driven events
 35: - Courses ranging from hobbyist to advanced levels
 36: - Custom AI search capabilities
 37: 
 38: **Pricing and Plan Distribution:**
 39: 
 40: - Basic Plan: ₹500/month (60% of paid users, starts Month 3)
 41: - Pro Plan: ₹2,000/month (30% of paid users, starts Month 5)
 42: - Expert Plan: ₹4,000/month (15% of paid users, starts Month 7)
 43: - B2B: ₹50,000/month (4 companies by end of year, starts Month 9)
 44: 
 45: ## Month 1: Setting Up and Initial Expenditures
 46: 
 47: - Office Rent: ₹30,000
 48: - Director Salary: ₹25,000
 49: - CTO Salary: ₹25,000
 50: - Operations Manager Salary: ₹25,000
 51: - Developer 1 Salary: ₹25,000
 52: - Developer 2 Salary: ₹25,000
 53: - DEV Operating Costs: ₹25,000
 54: - Marketing Costs: ₹10,000
 55: - Miscellaneous Expenses: ₹10,000
 56: 
 57: **Total Expenditure: ₹2,10,000**
 58: 
 59: **Remaining Funds: ₹7,90,000**
 60: 
 61: **Income: ₹0**
 62: 
 63: ## First Year Monthly Breakdown
 64: 
 65: | Month | Total Users | Paid Users (Conv. Rate) | Basic Plan      | Medium Plan      | Pro Plan        | B2B Plan     | Ad Revenue | Total Revenue | Expenses  | Monthly Profit/Loss | Capital    |
 66: | ----- | ----------- | ----------------------- | --------------- | ---------------- | --------------- | ------------ | ---------- | ------------- | --------- | ------------------- | ---------- |
 67: | 1     | 500         | 0                       | -               | -                | -               | -            | ₹0         | ₹0            | ₹2,00,000 | -₹2,00,000          | ₹7,90,000  |
 68: | 2     | 2,000       | 0                       | -               | -                | -               | -            | ₹10,000    | ₹10,000       | ₹2,00,000 | -₹1,90,000          | ₹6,10,000  |
 69: | 3     | 4,000       | 80 (2.0%)               | ₹40,000 (80)    | -                | -               | -            | ₹20,000    | ₹60,000       | ₹2,00,000 | -₹1,40,000          | ₹4,70,000  |
 70: | 4     | 7,000       | 154 (2.2%)              | ₹77,000 (154)   | -                | -               | -            | ₹35,000    | ₹1,12,000     | ₹3,20,000 | -₹2,08,000          | ₹2,62,000  |
 71: | 5     | 11,000      | 264 (2.4%)              | ₹79,200 (158)   | ₹2,12,000 (106)  | -               | -            | ₹55,000    | ₹3,46,200     | ₹3,20,000 | ₹26,200             | ₹2,88,200  |
 72: | 6     | 16,000      | 416 (2.6%)              | ₹1,24,800 (250) | ₹3,32,000 (166)  | -               | -            | ₹80,000    | ₹5,36,800     | ₹3,20,000 | ₹2,16,800           | ₹5,05,000  |
 73: | 7     | 21,000      | 630 (3.0%)              | ₹1,89,000 (378) | ₹5,04,000 (252)  | ₹3,78,000 (94)  | -            | ₹1,05,000  | ₹11,76,000    | ₹3,20,000 | ₹8,56,000           | ₹13,61,000 |
 74: | 8     | 26,000      | 806 (3.1%)              | ₹2,41,800 (484) | ₹6,44,000 (322)  | ₹4,84,000 (121) | -            | ₹1,30,000  | ₹14,99,800    | ₹3,20,000 | ₹11,79,800          | ₹25,40,800 |
 75: | 9     | 30,000      | 960 (3.2%)              | ₹2,88,000 (576) | ₹7,68,000 (384)  | ₹5,76,000 (144) | ₹50,000 (1)  | ₹1,50,000  | ₹18,32,000    | ₹3,20,000 | ₹15,12,000          | ₹40,52,800 |
 76: | 10    | 33,000      | 1,089 (3.3%)            | ₹3,26,700 (653) | ₹8,71,200 (436)  | ₹6,53,400 (163) | ₹100,000 (2) | ₹1,65,000  | ₹20,16,300    | ₹3,20,000 | ₹16,96,300          | ₹57,49,100 |
 77: | 11    | 36,000      | 1,224 (3.4%)            | ₹3,67,200 (734) | ₹9,79,200 (490)  | ₹7,34,400 (184) | ₹150,000 (3) | ₹1,80,000  | ₹22,60,800    | ₹3,20,000 | ₹19,40,800          | ₹76,89,900 |
 78: | 12    | 40,000      | 1,400 (3.5%)            | ₹4,20,000 (840) | ₹11,20,000 (560) | ₹8,40,000 (210) | ₹200,000 (4) | ₹2,00,000  | ₹26,00,000    | ₹3,20,000 | ₹22,80,000          | ₹99,69,900 |
 79: 
 80: ### Summary After 12 Months
 81: 
 82: - **Total Expenses:** ₹24,00,000
 83: - **Total Revenue:** ₹1,17,65,700
 84: - **Net Profit:** ₹93,65,700
 85: - **Ending Capital:** ₹1,03,65,700
 86: 
 87: ## Key Performance Indicators (KPIs) (Industry Standard)
 88: 
 89: 1. Monthly Recurring Revenue (MRR) (15% month-over-month growth)
 90: 2. User Growth Rate (20% month-over-month growth)
 91: 3. Conversion Rate (Free to Paid) (5-7%)
 92: 4. Customer Acquisition Cost (CAC) (1/3 of Customer Lifetime Value)
 93: 5. Customer Lifetime Value (CLV) (3x CAC)
 94: 6. Churn Rate (5.3% monthly)
 95: 7. Net Promoter Score (NPS) (30-50 for SaaS)
 96: 8. Feature Adoption Rate (50-60%)
 97: 9. B2B Client Acquisition Rate (10-20% annual growth)
 98: 10. Burn Rate and Runway (12-18 months runway)
 99: 
100: ## Risk Analysis and Mitigation Strategies
101: 
102: 1. **Market Risks:**
103: 
104:    - **Changes in Market Demand:**
105:      - **Risk:** Potential changes in public interest in astronomy and space-related content.
106:      - **Mitigation:** Regularly monitor trends and adjust content strategies accordingly.
107:    - **Competition:**
108:      - **Risk:** High competition from existing platforms offering similar content.
109:      - **Mitigation:** Differentiate through unique features, advanced AI-driven content, and a
110:        strong value proposition.
111: 
112: 2. **Financial Risks:**
113: 
114:    - **Funding and Cash Flow:**
115:      - **Risk:** Difficulty in securing initial and ongoing funding.
116:      - **Mitigation:** Build strong relationships with investors, present a clear and compelling
117:        business case.
118:    - **Economic Downturns:**
119:      - **Risk:** Impact of global or regional economic downturns on user subscriptions and
120:        advertising revenue.
121:      - **Mitigation:** Diversify revenue streams and maintain a financial buffer.
122: 
123: 3. **Operational Risks:**
124: 
125:    - **Scaling Operations:**
126:      - **Risk:** Challenges in scaling the platform to handle a growing user base.
127:      - **Mitigation:** Use scalable cloud infrastructure and plan for modular architecture.
128:    - **Data Security and Privacy:**
129:      - **Risk:** Potential data breaches or non-compliance with data protection regulations.
130:      - **Mitigation:** Adopt industry-standard security practices and conduct regular audits.
131: 
132: 4. **Technical Risks:**
133:    - **AI Integration:**
134:      - **Risk:** Challenges in integrating and maintaining AI technologies.
135:      - **Mitigation:** Use phased integration of AI features and continuous model updates.
136:    - **Accuracy and Performance:**
137:      - **Risk:** Ensuring the AI models provide accurate and relevant summaries and answers.
138:      - **Mitigation:** Continuous training and leveraging user feedback for improvements.
139: 
140: By addressing these potential risks and implementing robust mitigation strategies, AstronEra can
141: better navigate the challenges in the dynamic space industry and maintain a competitive edge.
```

## File: apps/admin-dashboard/content/bp/financials-break-even.md
```markdown
 1: #### Break-even Analysis
 2: 
 3: 1. **Break-even Point:**
 4: 
 5:    - Calculation of the break-even point in terms of revenue and time:
 6:      - **Break-even Revenue:** $324,010 (Year 1 expenses)
 7:      - **Break-even Time:** Achieved in the first year
 8:      - **Number of Users Needed:** Pro and Expert subscriptions to cover costs
 9: 
10: 2. **Break-even Analysis:**
11:    - Monthly and yearly analysis of how long it will take to reach the break-even point:
12:      - **Year 1:** Break-even achieved within the first year
13:      - **Year 2:** Significantly profitable
14:      - **Year 3:** Highly profitable
```

## File: apps/admin-dashboard/content/bp/financials-cashflow.md
```markdown
 1: #### Cash Flow Analysis
 2: 
 3: 1. **Cash Inflows:**
 4: 
 5:    - Expected cash inflows from subscriptions and other revenue streams:
 6:      - **Year 1:** $330,000
 7:      - **Year 2:** $1,725,000
 8:      - **Year 3:** $9,000,000
 9: 
10: 2. **Cash Outflows:**
11: 
12:    - Expected cash outflows for operational costs, development costs, and miscellaneous expenses:
13:      - **Year 1:** $324,010
14:      - **Year 2:** $595,510
15:      - **Year 3:** $1,573,510
16: 
17: 3. **Net Cash Flow:**
18:    - Difference between cash inflows and outflows over time:
19:      - **Year 1:** $5,990
20:      - **Year 2:** $1,129,490
21:      - **Year 3:** $7,426,490
```

## File: apps/admin-dashboard/content/bp/financials-expenses.md
```markdown
  1: #### Cost Structure and Budget
  2: 
  3: 1. **Operational Costs:**
  4: 
  5:    - **Salaries and Wages:**
  6:      - Management Team: 5 members \* ₹1 lakh/month = ₹5 lakh/month
  7:      - Other Employees: 10 members \* ₹50k/month = ₹5 lakh/month
  8:      - **Total Monthly Salaries:** ₹10 lakh/month
  9:    - **Infrastructure and Hosting Costs:**
 10:      - Supabase, Vercel, Digital Ocean: $2,000/month
 11:    - **Marketing and Advertising Expenses:**
 12:      - Suggested Budget: $5,000/month
 13:    - **AI and Data Processing Costs:**
 14:      - News Articles: 10,000 articles/month \* $0.02 = $200
 15:      - Research Papers: 2,000 papers/month \* $0.03 = $60
 16:      - Company Scraping: 1,000 companies \* $1 = $1,000
 17:      - Ongoing Company Monitoring: 1,000 companies \* $0.50/year = $500/year
 18:    - **Customer Support and Service Costs:**
 19:      - Year 1: 1 agent \* ₹40k/month = ₹40k/month
 20:      - Year 2: 10 agents \* ₹40k/month = ₹4 lakh/month
 21:      - Year 3: 20 agents \* ₹40k/month = ₹8 lakh/month
 22: 
 23: 2. **Development Costs:**
 24: 
 25:    - **Initial Development Costs:**
 26:      - Machine Learning Expert: ₹1 lakh/month
 27:      - Database Expert: ₹1 lakh/month
 28:      - Frontend/UI Developer: ₹1 lakh/month
 29:      - Fullstack Developer: ₹1 lakh/month
 30:      - DevOps Person: ₹1 lakh/month
 31:      - **Total Initial Development Costs:** ₹5 lakh/month
 32:    - **Ongoing Development and Maintenance Costs:**
 33:      - Triple the team size in Year 2 and again in Year 3
 34:      - **Year 2:** 15 developers \* ₹1 lakh/month = ₹15 lakh/month
 35:      - **Year 3:** 45 developers \* ₹1 lakh/month = ₹45 lakh/month
 36: 
 37: 3. **Miscellaneous Costs:**
 38:    - **Legal and Administrative Expenses:**
 39:      - Accounting: ₹30k/year
 40:      - Business Admin: ₹30k/year
 41:      - Legal Counsel: ₹30k/year
 42:    - **Office Space and Utilities:**
 43:      - Rent for Pune: ₹1 lakh/month for office space for 30 people
 44:      - Additional Setup Costs: ₹10 lakh (one-time)
 45:      - Leasing Apple M1 MacBooks: ₹1 lakh/month
 46:    - **Total Miscellaneous Costs:** ₹15 lakh/year + ₹10 lakh one-time setup
 47: 
 48: Sure, let's extend the projections to include years 6, 7, 8, and 9 and consolidate all the
 49: information into one comprehensive table.
 50: 
 51: ### Comprehensive Financial and Employee Projections (Years 1-10)
 52: 
 53: | **Year**           | **Role**                     | **Number of Employees** | **Annual Salary (USD)** | **Total Annual Salary** | **Total Revenue (USD)** | **Total Salary Expense (USD)** | **Other Operational Costs (USD)** | **Total Expenses (USD)** | **Net Revenue (USD)** |
 54: | ------------------ | ---------------------------- | ----------------------- | ----------------------- | ----------------------- | ----------------------- | ------------------------------ | --------------------------------- | ------------------------ | --------------------- |
 55: | **Year 1** (2024)  | CEO                          | 1                       | $16,000                 | $16,000                 | $16,780,000             | $113,000                       | $214,000                          | $327,000                 | $16,453,000           |
 56: |                    | CTO                          | 1                       | $16,000                 | $16,000                 |                         |                                |                                   |                          |                       |
 57: |                    | AI Engineers/Data Scientists | 3                       | $9,000 each             | $27,000                 |                         |                                |                                   |                          |                       |
 58: |                    | Platform Developers          | 2                       | $9,000 each             | $18,000                 |                         |                                |                                   |                          |                       |
 59: |                    | Customer Support             | 2                       | $9,000 each             | $18,000                 |                         |                                |                                   |                          |                       |
 60: |                    | Sales/Marketing              | 2                       | $9,000 each             | $18,000                 |                         |                                |                                   |                          |                       |
 61: |                    | **Total Employees**          | 10                      | -                       | **$113,000**            |                         |                                |                                   |                          |                       |
 62: | **Year 2** (2025)  | CEO                          | 1                       | $19,200                 | $19,200                 | $22,000,000             | $178,800                       | $350,000                          | $528,800                 | $21,471,200           |
 63: |                    | CTO                          | 1                       | $19,200                 | $19,200                 |                         |                                |                                   |                          |                       |
 64: |                    | AI Engineers/Data Scientists | 4                       | $10,800 each            | $43,200                 |                         |                                |                                   |                          |                       |
 65: |                    | Platform Developers          | 3                       | $10,800 each            | $32,400                 |                         |                                |                                   |                          |                       |
 66: |                    | Customer Support             | 3                       | $10,800 each            | $32,400                 |                         |                                |                                   |                          |                       |
 67: |                    | Sales/Marketing              | 3                       | $10,800 each            | $32,400                 |                         |                                |                                   |                          |                       |
 68: |                    | **Total Employees**          | 14                      | -                       | **$178,800**            |                         |                                |                                   |                          |                       |
 69: | **Year 3** (2026)  | CEO                          | 1                       | $28,800                 | $28,800                 | $30,000,000             | $394,200                       | $400,000                          | $794,200                 | $29,205,800           |
 70: |                    | CTO                          | 1                       | $28,800                 | $28,800                 |                         |                                |                                   |                          |                       |
 71: |                    | AI Engineers/Data Scientists | 6                       | $16,200 each            | $97,200                 |                         |                                |                                   |                          |                       |
 72: |                    | Platform Developers          | 4                       | $16,200 each            | $64,800                 |                         |                                |                                   |                          |                       |
 73: |                    | Customer Support             | 4                       | $16,200 each            | $64,800                 |                         |                                |                                   |                          |                       |
 74: |                    | Sales/Marketing              | 4                       | $16,200 each            | $64,800                 |                         |                                |                                   |                          |                       |
 75: |                    | Product Manager              | 1                       | $28,800                 | $28,800                 |                         |                                |                                   |                          |                       |
 76: |                    | Data Analyst                 | 1                       | $16,200                 | $16,200                 |                         |                                |                                   |                          |                       |
 77: |                    | **Total Employees**          | 21                      | -                       | **$394,200**            |                         |                                |                                   |                          |                       |
 78: | **Year 4** (2027)  | CEO                          | 1                       | $34,560                 | $34,560                 | $40,000,000             | $701,000                       | $500,000                          | $1,201,000               | $38,799,000           |
 79: |                    | CTO                          | 1                       | $34,560                 | $34,560                 |                         |                                |                                   |                          |                       |
 80: |                    | AI Engineers/Data Scientists | 8                       | $19,440 each            | $155,520                |                         |                                |                                   |                          |                       |
 81: |                    | Platform Developers          | 6                       | $19,440 each            | $116,640                |                         |                                |                                   |                          |                       |
 82: |                    | Customer Support             | 6                       | $19,440 each            | $116,640                |                         |                                |                                   |                          |                       |
 83: |                    | Sales/Marketing              | 6                       | $19,440 each            | $116,640                |                         |                                |                                   |                          |                       |
 84: |                    | Product Managers             | 2                       | $34,560 each            | $69,120                 |                         |                                |                                   |                          |                       |
 85: |                    | Data Analysts                | 2                       | $19,440 each            | $38,880                 |                         |                                |                                   |                          |                       |
 86: |                    | HR Manager                   | 1                       | $19,440                 | $19,440                 |                         |                                |                                   |                          |                       |
 87: |                    | **Total Employees**          | 32                      | -                       | **$701,000**            |                         |                                |                                   |                          |                       |
 88: | **Year 5** (2028)  | CEO                          | 1                       | $48,000                 | $48,000                 | $50,340,000             | $1,293,000                     | $620,000                          | $1,913,000               | $48,427,000           |
 89: |                    | CTO                          | 1                       | $48,000                 | $48,000                 |                         |                                |                                   |                          |                       |
 90: |                    | AI Engineers/Data Scientists | 10                      | $27,000 each            | $270,000                |                         |                                |                                   |                          |                       |
 91: |                    | Platform Developers          | 8                       | $27,000 each            | $216,000                |                         |                                |                                   |                          |                       |
 92: |                    | Customer Support             | 8                       | $27,000 each            | $216,000                |                         |                                |                                   |                          |                       |
 93: |                    | Sales/Marketing              | 8                       | $27,000 each            | $216,000                |                         |                                |                                   |                          |                       |
 94: |                    | Product Managers             | 3                       | $48,000 each            | $144,000                |                         |                                |                                   |                          |                       |
 95: |                    | Data Analysts                | 3                       | $27,000 each            | $81,000                 |                         |                                |                                   |                          |                       |
 96: |                    | HR Manager                   | 1                       | $27,000                 | $27,000                 |                         |                                |                                   |                          |                       |
 97: |                    | Finance Manager              | 1                       | $27,000                 | $27,000                 |                         |                                |                                   |                          |                       |
 98: |                    | **Total Employees**          | 43                      | -                       | **$1,293,000**          |                         |                                |                                   |                          |                       |
 99: | **Year 6** (2029)  | CEO                          | 1                       | $57,600                 | $57,600                 | $70,000,000             | $2,011,200                     | $800,000                          | $2,811,200               | $67,188,800           |
100: |                    | CTO                          | 1                       | $57,600                 | $57,600                 |                         |                                |                                   |                          |                       |
101: |                    | AI Engineers/Data Scientists | 12                      | $32,400 each            | $388,800                |                         |                                |                                   |                          |                       |
102: |                    | Platform Developers          | 10                      | $32,400 each            | $324,000                |                         |                                |                                   |                          |                       |
103: |                    | Customer Support             | 10                      | $32,400 each            | $324,000                |                         |                                |                                   |                          |                       |
104: |                    | Sales/Marketing              | 10                      | $32,400 each            | $324,000                |                         |                                |                                   |                          |                       |
105: |                    | Product Managers             | 4                       | $57,600 each            | $230,400                |                         |                                |                                   |                          |                       |
106: |                    | Data Analysts                | 4                       | $32,400 each            | $129,600                |                         |                                |                                   |                          |                       |
107: |                    | HR Manager                   | 2                       | $32,400 each            | $64,800                 |                         |                                |                                   |                          |                       |
108: |                    | Finance Manager              | 2                       | $32,400 each            | $64,800                 |                         |                                |                                   |                          |                       |
109: |                    | **Total Employees**          | 47                      | -                       | **$2,011,200**          |                         |                                |                                   |                          |                       |
110: | **Year 7** (2030)  | CEO                          | 1                       | $69,120                 | $69,120                 | $90,000,000             | $2,701,920                     | $1,000,000                        | $3,701,920               | $86,298,080           |
111: |                    | CTO                          | 1                       | $69,120                 | $69,120                 |                         |                                |                                   |                          |                       |
112: |                    | AI Engineers/Data Scientists | 14                      | $38,880 each            | $544,320                |                         |                                |                                   |                          |                       |
113: |                    | Platform Developers          | 12                      | $38,880 each            | $466,560                |                         |                                |                                   |                          |                       |
114: |                    | Customer Support             | 12                      | $38,880 each            | $466,560                |                         |                                |                                   |                          |                       |
115: |                    | Sales/Marketing              | 12                      | $38,880 each            | $466,560                |                         |                                |                                   |                          |                       |
116: |                    | Product Managers             | 5                       | $69,120 each            | $345,600                |                         |                                |                                   |                          |                       |
117: |                    | Data Analysts                | 5                       | $38,880 each            | $194,400                |                         |                                |                                   |                          |                       |
118: |                    | HR Manager                   | 2                       | $38,880 each            | $77,760                 |                         |                                |                                   |                          |                       |
119: |                    | Finance Manager              | 2                       | $38,880 each            | $77,760                 |                         |                                |                                   |                          |                       |
120: |                    | **Total Employees**          | 58                      | -                       | **$2,701,920**          |                         |                                |                                   |                          |                       |
121: | **Year 8** (2031)  | CEO                          | 1                       | $82,944                 | $82,944                 | $110,000,000            | $3,527,808                     | $1,200,000                        | $4,727,808               | $105,272,192          |
122: |                    | CTO                          | 1                       | $82,944                 | $82,944                 |                         |                                |                                   |                          |                       |
123: |                    | AI Engineers/Data Scientists | 16                      | $46,656 each            | $746,496                |                         |                                |                                   |                          |                       |
124: |                    | Platform Developers          | 14                      | $46,656 each            | $653,184                |                         |                                |                                   |                          |                       |
125: |                    | Customer Support             | 14                      | $46,656 each            | $653,184                |                         |                                |                                   |                          |                       |
126: |                    | Sales/Marketing              | 14                      | $46,656 each            | $653,184                |                         |                                |                                   |                          |                       |
127: |                    | Product Managers             | 5                       | $82,944 each            | $414,720                |                         |                                |                                   |                          |                       |
128: |                    | Data Analysts                | 5                       | $46,656 each            | $233,280                |                         |                                |                                   |                          |                       |
129: |                    | HR Manager                   | 2                       | $46,656 each            | $93,312                 |                         |                                |                                   |                          |                       |
130: |                    | Finance Manager              | 2                       | $46,656 each            | $93,312                 |                         |                                |                                   |                          |                       |
131: |                    | **Total Employees**          | 68                      | -                       | **$3,527,808**          |                         |                                |                                   |                          |                       |
132: | **Year 9** (2032)  | CEO                          | 1                       | $99,532.80              | $99,532.80              | $130,000,000            | $4,553,049.60                  | $1,350,000                        | $5,903,049.60            | $124,096,950.40       |
133: |                    | CTO                          | 1                       | $99,532.80              | $99,532.80              |                         |                                |                                   |                          |                       |
134: |                    | AI Engineers/Data Scientists | 18                      | $55,987.20 each         | $1,007,769.60           |                         |                                |                                   |                          |                       |
135: |                    | Platform Developers          | 16                      | $55,987.20 each         | $895,795.20             |                         |                                |                                   |                          |                       |
136: |                    | Customer Support             | 16                      | $55,987.20 each         | $895,795.20             |                         |                                |                                   |                          |                       |
137: |                    | Sales/Marketing              | 16                      | $55,987.20 each         | $895,795.20             |                         |                                |                                   |                          |                       |
138: |                    | Product Managers             | 6                       | $99,532.80 each         | $597,196.80             |                         |                                |                                   |                          |                       |
139: |                    | Data Analysts                | 6                       | $55,987.20 each         | $335,923.20             |                         |                                |                                   |                          |                       |
140: |                    | HR Manager                   | 2                       | $55,987.20 each         | $111,974.40             |                         |                                |                                   |                          |                       |
141: |                    | Finance Manager              | 2                       | $55,987.20 each         | $111,974.40             |                         |                                |                                   |                          |                       |
142: |                    | **Total Employees**          | 78                      | -                       | **$4,553,049.60**       |                         |                                |                                   |                          |                       |
143: | **Year 10** (2033) | CEO                          | 1                       | $600,000                | $600,000                | $167,800,000            | $7,440,000                     | $1,500,000                        | $8,940,000               | $158,860,000          |
144: |                    | CTO                          | 1                       | $600,000                | $600,000                |                         |                                |                                   |                          |                       |
145: |                    | COO                          | 1                       | $600,000                | $600,000                |                         |                                |                                   |                          |                       |
146: |                    | CFO                          | 1                       | $600,000                | $600,000                |                         |                                |                                   |                          |                       |
147: |                    | AI Engineers/Data Scientists | 20                      | $60,000 each            | $1,200,000              |                         |                                |                                   |                          |                       |
148: |                    | Platform Developers          | 15                      | $60,000 each            | $900,000                |                         |                                |                                   |                          |                       |
149: |                    | Customer Support             | 15                      | $60,000 each            | $900,000                |                         |                                |                                   |                          |                       |
150: |                    | Sales/Marketing              | 15                      | $60,000 each            | $900,000                |                         |                                |                                   |                          |                       |
151: |                    | Product Managers             | 5                       | $120,000 each           | $600,000                |                         |                                |                                   |                          |                       |
152: |                    | Data Analysts                | 5                       | $60,000 each            | $300,000                |                         |                                |                                   |                          |                       |
153: |                    | HR Managers                  | 2                       | $60,000 each            | $120,000                |                         |                                |                                   |                          |                       |
154: |                    | Finance Managers             | 2                       | $60,000 each            | $120,000                |                         |                                |                                   |                          |                       |
155: |                    | **Total Employees**          | 83                      | -                       | **$7,440,000**          |                         |                                |                                   |                          |                       |
156: 
157: ### Summary
158: 
159: **Projected Growth**: $1.8 trillion by 2035, from $630 billion in 2023, at 9% CAGR.
160: 
161: **Revenue Projections:**
162: 
163: - **Year 1 (2024)**: Total Revenue: $16,780,000; Total Expenses: $327,000; Net Revenue: $16,453,000
164: - **Year 2 (2025)**: Total Revenue: $22,000,000; Total Expenses: $528,800; Net Revenue: $21,471,200
165: - **Year 3 (2026)**: Total Revenue: $30,000,000; Total Expenses: $794,200; Net Revenue: $29,205,800
166: - **Year 4 (2027)**: Total Revenue: $40,000,000; Total Expenses: $1,201,000; Net Revenue:
167:   $38,799,000
168: - **Year 5 (2028)**: Total Revenue: $50,340,000; Total Expenses: $1,913,000; Net Revenue:
169:   $48,427,000
170: - **Year 6 (2029)**: Total Revenue: $70,000,000; Total Expenses: $2,811,200; Net Revenue:
171:   $67,188,800
172: - **Year 7 (2030)**: Total Revenue: $90,000,000; Total Expenses: $3,701,920; Net Revenue:
173:   $86,298,080
174: - **Year 8 (2031)**: Total Revenue: $110,000,000; Total Expenses: $4,727,808; Net Revenue:
175:   $105,272,192
176: - **Year 9 (2032)**: Total Revenue: $130,000,000; Total Expenses: $5,903,049.60; Net Revenue:
177:   $124,096,950.40
178: - **Year 10 (2033)**: Total Revenue: $167,800,000; Total Expenses: $8,940,000; Net Revenue:
179:   $158,860,000
180: 
181: **Employee Growth:**
182: 
183: - **Year 1**: 10 employees
184: - **Year 2**: 14 employees
185: - **Year 3**: 21 employees
186: - **Year 4**: 32 employees
187: - **Year 5**: 43 employees
188: - **Year 6**: 47 employees
189: - **Year 7**: 58 employees
190: - **Year 8**: 68 employees
191: - **Year 9**: 78 employees
192: - **Year 10**: 83 employees
193: 
194: This table provides a comprehensive year-by-year breakdown of financial projections and employee
195: growth, ensuring a clear roadmap for scaling the company while maintaining focus on core software
196: development and supporting roles.
```

## File: apps/admin-dashboard/content/bp/financials-funding-request.md
```markdown
 1: #### Funding Requirements and Use of Funds
 2: 
 3: 1. **Funding Needs:**
 4: 
 5:    - Total amount of funding required to cover initial and ongoing costs until break-even:
 6:      - **Estimated Funding Needs:** $300,000 (to cover initial costs and buffer for unforeseen
 7:        expenses)
 8: 
 9: 2. **Use of Funds:**
10:    - Detailed breakdown of how the funds will be used (e.g., development, marketing, hiring,
11:      infrastructure):
12:      - **Development:** $100,000
13:      - **Marketing:** $50,000
14:      - **Hiring:** $50,000
15:      - **Infrastructure:** $50,000
16:      - **Miscellaneous and Buffer:** $50,000
```

## File: apps/admin-dashboard/content/bp/financials-profit-loss.md
```markdown
 1: #### Profit and Loss Statements
 2: 
 3: 1. **Revenue:**
 4: 
 5:    - Total projected revenue from all sources:
 6:      - **Year 1:** $330,000
 7:      - **Year 2:** $1,725,000
 8:      - **Year 3:** $9,000,000
 9: 
10: 2. **Expenses:**
11: 
12:    - Breakdown of all expenses (operational, development, miscellaneous):
13: 
14:      - **Year 1:**
15: 
16:        - Operational Costs: ₹10 lakh/month \* 12 = ₹1.2 crore (~$150,000)
17:        - AI and Data Processing: $1,760
18:        - Marketing and Advertising: $5,000/month \* 12 = $60,000
19:        - Customer Support: ₹40k/month \* 12 = ₹4.8 lakh (~$6,000)
20:        - Development Costs: ₹5 lakh/month \* 12 = ₹60 lakh (~$75,000)
21:        - Miscellaneous Costs: ₹15 lakh/year + ₹10 lakh setup (~$31,250)
22:        - **Total Expenses Year 1:** $324,010
23: 
24:      - **Year 2:**
25: 
26:        - Operational Costs: ₹15 lakh/month \* 12 = ₹1.8 crore (~$225,000)
27:        - AI and Data Processing: $6,760
28:        - Marketing and Advertising: $5,000/month \* 12 = $60,000
29:        - Customer Support: ₹4 lakh/month \* 12 = ₹48 lakh (~$60,000)
30:        - Development Costs: ₹15 lakh/month \* 12 = ₹1.8 crore (~$225,000)
31:        - Miscellaneous Costs: ₹15 lakh/year (~$18,750)
32:        - **Total Expenses Year 2:** $595,510
33: 
34:      - **Year 3:**
35:        - Operational Costs: ₹45 lakh/month \* 12 = ₹5.4 crore (~$675,000)
36:        - AI and Data Processing: $24,760
37:        - Marketing and Advertising: $5,000/month \* 12 = $60,000
38:        - Customer Support: ₹8 lakh/month \* 12 = ₹96 lakh (~$120,000)
39:        - Development Costs: ₹45 lakh/month \* 12 = ₹5.4 crore (~$675,000)
40:        - Miscellaneous Costs: ₹15 lakh/year (~$18,750)
41:        - \*\*Total Expenses Year
42: 
43: 3:\*\* $1,573,510
44: 
45: 3. **Net Profit:**
46:    - Calculated by subtracting total expenses from total revenue:
47:      - **Year 1:** $330,000 - $324,010 = $5,990
48:      - **Year 2:** $1,725,000 - $595,510 = $1,129,490
49:      - **Year 3:** $9,000,000 - $1,573,510 = $7,426,490
```

## File: apps/admin-dashboard/content/bp/financials-projections.md
```markdown
 1: #### Revenue Model and Projections
 2: 
 3: 1. **Subscription Tiers:**
 4: 
 5:    - **Free Tier:**
 6: 
 7:      - **Features:**
 8:        - Access to all news summarization
 9:        - Basic AI questions and limited agents using free or low-cost LLMs
10:        - Access to all root content such as news, research, companies, events, courses, etc.
11:      - **Expected Conversion Rate to Paid Tiers:**
12:        - 3% initial conversions, growth to 6% after 2 years of operations
13:      - **User Projections:**
14:        - 10k free users after 1 year, 50k after 2 years, 200k after 3 years
15: 
16:    - **Pro Tier ($30/month):**
17: 
18:      - **Features:**
19:        - Advanced AI questions with more sophisticated AI models
20:        - Access to more AI agents
21:        - Enhanced content summarization
22:        - Access to all features in the free tier plus premium news, company insights, job listings,
23:          events, and social media integration
24:      - **User Projections:**
25:        - Year 1: 300 users
26:        - Year 2: 1,500 users
27:        - Year 3: 6,000 users
28: 
29:    - **Expert Tier ($50/month):**
30:      - **Features:**
31:        - Full AI capabilities with the latest models
32:        - Extensive AI agents for specialized queries
33:        - Comprehensive content summarization and advanced search capabilities
34:        - Access to all Pro tier features plus exclusive webinars, collaborative research tools,
35:          advanced data insights, and personalized content
36:      - **User Projections:**
37:        - Year 1: 300 users
38:        - Year 2: 1,500 users
39:        - Year 3: 6,000 users
40: 
41: 2. **Additional Revenue Streams:**
42: 
43:    - **Advertising:**
44: 
45:      - Premium advertisement position in highly trafficked newsfeed
46:      - **Estimated Impressions and Clicks:**
47:        - Year 1: 100k impressions/month, 10k clicks/month
48:        - Year 2: 500k impressions/month, 50k clicks/month
49:        - Year 3: 2M impressions/month, 200k clicks/month
50:      - **Suggested Pricing:**
51:        - $10 per 1,000 impressions (CPM), $1 per click (CPC)
52: 
53:    - **Affiliate Marketing:**
54:      - Affiliate links in human-generated content
55:      - **Estimated Clicks and Conversion Rate:**
56:        - Conversion rate: 5%
57:        - Year 1: 10k clicks/month _ 5% conversion _ $50 average sale _ 12 months _ 10% commission =
58:          $30,000
59:        - Year 2: 50k clicks/month _ 5% conversion _ $50 average sale _ 12 months _ 15% commission =
60:          $225,000
61:        - Year 3: 200k clicks/month _ 5% conversion _ $50 average sale _ 12 months _ 20% commission =
62:          $3,000,000
63: 
64: 3. **Revenue Projections:**
65: 
66:    - **Year 1:**
67: 
68:      - Pro Tier: 300 users _ $30/month _ 12 months = $108,000
69:      - Expert Tier: 300 users _ $50/month _ 12 months = $180,000
70:      - Advertising: 100k impressions/month _ $10/CPM _ 12 months = $12,000
71:      - Affiliate Marketing: $30,000
72:      - **Total Revenue Year 1:** $330,000
73: 
74:    - **Year 2:**
75: 
76:      - Pro Tier: 1,500 users _ $30/month _ 12 months = $540,000
77:      - Expert Tier: 1,500 users _ $50/month _ 12 months = $900,000
78:      - Advertising: 500k impressions/month _ $10/CPM _ 12 months = $60,000
79:      - Affiliate Marketing: $225,000
80:      - **Total Revenue Year 2:** $1,725,000
81: 
82:    - **Year 3:**
83:      - Pro Tier: 6,000 users _ $30/month _ 12 months = $2,160,000
84:      - Expert Tier: 6,000 users _ $50/month _ 12 months = $3,600,000
85:      - Advertising: 2M impressions/month _ $10/CPM _ 12 months = $240,000
86:      - Affiliate Marketing: $3,000,000
87:      - **Total Revenue Year 3:** $9,000,000
```

## File: apps/admin-dashboard/content/bp/management-customer-support.md
```markdown
 1: #### Customer Support and Service
 2: 
 3: 1. **Support Channels:**
 4: 
 5:    - Expand support channels to include live chat and social media support. Use a comprehensive
 6:      knowledge base to address common inquiries.
 7: 
 8: 2. **Response Time:**
 9: 
10:    - **Email:** 24 working hours
11:    - **AI:** Immediate response
12:    - **Human:** Aim for a 1-hour response time in the first 12 months; beyond that, with a scaled
13:      customer service team, aim for < 5 minute response times.
14: 
15: 3. **Support Team:**
16: 
17:    - **Structure:** Support agents, technical specialists, and additional roles as needed. Provide
18:      continuous training to improve customer service skills.
19: 
20: 4. **Service Levels:**
21:    - Priority support for Pro and Expert users, with different service levels based on subscription
22:      tiers. Implement a tiered support structure to provide efficient and effective customer
23:      service.
```

## File: apps/admin-dashboard/content/bp/management-executives.md
```markdown
  1: #### Executive Team
  2: 
  3: 1. **Chief Executive Officer (CEO)**
  4: 
  5:    - Role: Overall strategic direction and leadership of the company.
  6:    - Responsibilities: Vision and mission alignment, stakeholder management, overall company
  7:      performance, key decision-making.
  8: 
  9: 2. **Chief Technology Officer (CTO)**
 10: 
 11:    - Role: Leading the technology and development teams.
 12:    - Responsibilities: Technology strategy, development oversight, infrastructure management,
 13:      innovation and R&D.
 14: 
 15: 3. **Chief Operations Officer (COO)**
 16: 
 17:    - Role: Overseeing daily operations and workflow.
 18:    - Responsibilities: Process optimization, operations management, scaling operations,
 19:      cross-departmental coordination.
 20: 
 21: 4. **Chief Marketing Officer (CMO)**
 22: 
 23:    - Role: Leading marketing and customer acquisition efforts.
 24:    - Responsibilities: Marketing strategy, customer acquisition, brand management, market research.
 25: 
 26: 5. **Chief Financial Officer (CFO)**
 27: 
 28:    - Role: Managing financial planning and analysis.
 29:    - Responsibilities: Financial strategy, budgeting, accounting, investor relations.
 30: 
 31: 6. **Chief Customer Officer (CCO)**
 32:    - Role: Overseeing customer support and service.
 33:    - Responsibilities: Customer satisfaction, support operations, customer feedback, retention
 34:      strategies.
 35: 
 36: #### Department Heads and Key Roles
 37: 
 38: 1. **Development Team**
 39: 
 40:    - **Head of Development (CTO)**
 41:      - **Frontend Developers**
 42:        - Responsibilities: Building and maintaining user interfaces, ensuring responsive design,
 43:          connecting backend data to frontend code, creating responsive features, fixing bugs,
 44:          writing tests.
 45:      - **Backend Developers**
 46:        - Responsibilities: Server-side logic, PostgreSQL database design and optimization,
 47:          connecting server to third-party services (e.g., payment gateways), API development handled
 48:          by Supabase.
 49:      - **DevOps Engineers**
 50:        - Responsibilities: Managing deployments, infrastructure, system reliability, scalability
 51:          using CI/CD pipelines, and Digital Ocean App platform for scraping server.
 52: 
 53: 2. **AI and Data Team**
 54: 
 55:    - **Head of AI and Data (CTO)**
 56:      - **AI Specialists**
 57:        - Responsibilities: Developing and maintaining AI models, integrating AI features, enhancing
 58:          AI performance based on user feedback.
 59:      - **Data Processors/QA**
 60:        - Responsibilities: Ensuring data quality, processing data for AI models, conducting quality
 61:          assurance, automating data quality checks.
 62: 
 63: 3. **Marketing Team**
 64: 
 65:    - **Head of Marketing (CMO)**
 66:      - **Content Writers**
 67:        - Responsibilities: Creating and editing articles, blog posts, social media content. Content
 68:          goes through an automation process with AI agents.
 69:      - **Social Media Managers**
 70:        - Responsibilities: Managing social media engagement, posting, and monitoring. Initially
 71:          through platform-specific UI, with potential to adopt third-party software or develop an
 72:          in-house solution.
 73:      - **SEO Specialists**
 74:        - Responsibilities: Keyword optimization, backlink building, content strategy.
 75: 
 76: 4. **Operations Team**
 77: 
 78:    - **Head of Operations (COO)**
 79:      - **UI/UX Developers**
 80:        - Responsibilities: Designing user interfaces, improving user experience, conducting user
 81:          research, usability testing, and implementing design systems.
 82:      - **Customer Support Agents**
 83:        - Responsibilities: Assisting users with inquiries, troubleshooting issues, using an in-house
 84:          ticketing system.
 85: 
 86: 5. **Sales Team**
 87: 
 88:    - **Head of Sales (CCO)**
 89:      - **Sales Representatives**
 90:        - Responsibilities: Generating leads, converting prospects, managing customer relationships
 91:          with a focus on customer acquisition. Use a CRM system like HubSpot for managing leads.
 92: 
 93: 6. **Finance Team**
 94:    - **Head of Finance (CFO)**
 95:      - **Accountants**
 96:        - Responsibilities: Financial planning, budgeting, accounting, financial reporting.
 97: 
 98: #### Advisory Board and Consultants
 99: 
100: 1. **Advisory Board Members**
101:    - Responsibilities: Providing strategic guidance, industry insights, and networking
102:      opportunities.
103: 2. **Consultants**
104:    - Responsibilities: Offering specialized expertise in areas like technology, marketing, finance,
105:      and operations.
```

## File: apps/admin-dashboard/content/bp/market-competitors.md
```markdown
  1: ### Competitive Analysis and Positioning
  2: 
  3: 1. **Competitor Identification:**
  4: 
  5:    - **Direct Competitors:**
  6: 
  7:      - Online platforms offering astronomy news, courses, companies, research, events, and community
  8:        interaction.'
  9: 
 10:      Here is a table with 20 organizations that dominate in the space of online platforms offering
 11:      astronomy news, courses, companies, research, events, and community interaction:
 12: 
 13: | Company Name                           | Website                     | Industry        | Description                                                                                      |
 14: | -------------------------------------- | --------------------------- | --------------- | ------------------------------------------------------------------------------------------------ |
 15: | Sky & Telescope                        | www.skyandtelescope.com     | Astronomy News  | Leading source of news, observing tips, and celestial event information for amateur astronomers. |
 16: | Slooh                                  | www.slooh.com               | Astronomy       | Provides live, online viewing of celestial objects using robotic telescopes.                     |
 17: | Astronomy.com                          | www.astronomy.com           | Astronomy News  | Offers news, feature articles, and observing tips for astronomy enthusiasts.                     |
 18: | Space.com                              | www.space.com               | Space News      | Comprehensive source for space and astronomy news, and space science topics.                     |
 19: | CosmoQuest                             | www.cosmoquest.org          | Citizen Science | Engages the public in citizen science projects related to space and astronomy.                   |
 20: | Universe Today                         | www.universetoday.com       | Space News      | Provides space and astronomy news, including updates on missions and discoveries.                |
 21: | Coursera                               | www.coursera.org            | Online Courses  | Offers online courses in astronomy and space science from top universities.                      |
 22: | edX                                    | www.edx.org                 | Online Courses  | Provides free online courses in astronomy from universities like Harvard and MIT.                |
 23: | FutureLearn                            | www.futurelearn.com         | Online Courses  | Offers online courses in astronomy and space science from various educational institutions.      |
 24: | International Astronomical Union (IAU) | www.iau.org                 | Research        | Professional organization of astronomers promoting and safeguarding the science of astronomy.    |
 25: | NASA                                   | www.nasa.gov                | Space Agency    | Provides extensive resources on space exploration, missions, and educational content.            |
 26: | European Space Agency (ESA)            | www.esa.int                 | Space Agency    | Offers comprehensive information on European space missions and astronomy research.              |
 27: | American Astronomical Society (AAS)    | www.aas.org                 | Research        | Professional association of astronomers, supporting research and education in astronomy.         |
 28: | AstroBin                               | www.astrobin.com            | Community       | Online platform for sharing astrophotography images and connecting with other astronomers.       |
 29: | Stellarium                             | www.stellarium.org          | Software        | Open-source planetarium software that shows a realistic sky in 3D.                               |
 30: | Astronomy Stack Exchange               | astronomy.stackexchange.com | Community       | Q&A community for astronomers and astronomy enthusiasts to share knowledge and advice.           |
 31: | Zooniverse                             | www.zooniverse.org          | Citizen Science | Platform for citizen science projects, including astronomy and space research.                   |
 32: | SpaceWeather.com                       | www.spaceweather.com        | Space News      | Tracks and reports on solar and space weather events affecting Earth.                            |
 33: | Astrobiology Magazine                  | www.astrobio.net            | Space News      | Provides news and research articles on astrobiology and the search for life beyond Earth.        |
 34: | The Planetary Society                  | www.planetary.org           | Community       | Non-profit organization promoting space exploration and science education.                       |
 35: 
 36: - **Indirect Competitors:**
 37: 
 38:   - General science education platforms.
 39:   - AI-driven summarization and news aggregation tools.
 40: 
 41:   Here is a table with 20 organizations that dominate in the space of general science education
 42:   platforms and AI-driven summarization and news aggregation tools:
 43: 
 44: | Company Name      | Website                   | Industry                | Description                                                                                       |
 45: | ----------------- | ------------------------- | ----------------------- | ------------------------------------------------------------------------------------------------- |
 46: | Coursera          | www.coursera.org          | Online Courses          | Offers a wide range of science courses from top universities and institutions.                    |
 47: | edX               | www.edx.org               | Online Courses          | Provides online courses in various scientific disciplines from renowned universities.             |
 48: | Khan Academy      | www.khanacademy.org       | Online Education        | Offers free online courses and educational resources across multiple subjects, including science. |
 49: | Udemy             | www.udemy.com             | Online Courses          | Hosts a wide array of courses in science and technology topics.                                   |
 50: | LinkedIn Learning | www.linkedin.com/learning | Professional Education  | Provides online courses, including science and technology training.                               |
 51: | FutureLearn       | www.futurelearn.com       | Online Courses          | Offers science and technology courses from various educational institutions.                      |
 52: | MasterClass       | www.masterclass.com       | Online Education        | Provides courses taught by experts across various fields, including science.                      |
 53: | Brilliant         | www.brilliant.org         | Online Learning         | Focuses on interactive learning in science and mathematics.                                       |
 54: | Skillshare        | www.skillshare.com        | Online Courses          | Offers courses on a wide range of topics, including science and technology.                       |
 55: | Codecademy        | www.codecademy.com        | Online Coding Education | Provides coding education, including data science and programming.                                |
 56: | DeepL             | www.deepl.com             | AI-driven Translation   | AI-powered translation service that can be used for summarizing text in multiple languages.       |
 57: | QuillBot          | www.quillbot.com          | AI-driven Summarization | AI tool for paraphrasing and summarizing text content.                                            |
 58: | Grammarly         | www.grammarly.com         | AI-driven Writing       | AI-powered writing assistant that includes summarization features.                                |
 59: | Feedly            | www.feedly.com            | News Aggregation        | AI-powered news aggregation tool for personalized content.                                        |
 60: | Inoreader         | www.inoreader.com         | News Aggregation        | Aggregates news and content from various sources, offering AI-powered filtering.                  |
 61: | Flipboard         | www.flipboard.com         | News Aggregation        | Curates and summarizes news articles from a variety of sources.                                   |
 62: | Pocket            | www.getpocket.com         | News Aggregation        | Saves and summarizes articles for later reading, with AI-driven recommendations.                  |
 63: | SmartNews         | www.smartnews.com         | News Aggregation        | AI-driven news app that aggregates and curates top news stories.                                  |
 64: | Google News       | news.google.com           | News Aggregation        | Aggregates news from multiple sources, offering personalized content through AI.                  |
 65: | Yahoo News        | www.news.yahoo.com        | News Aggregation        | Aggregates and summarizes news articles from a variety of sources.                                |
 66: 
 67: ### Competitive Landscape:
 68: 
 69: #### Strengths of Competitors:
 70: 
 71: - **Established Brand Presence:**
 72:   - Competitors have been in the market for a longer time, allowing them to build a trusted and
 73:     recognizable brand.
 74: - **Comprehensive, Established Content Libraries:**
 75:   - Extensive collections of content built over years, providing a vast resource for users.
 76:   - Variety in content types, including articles, videos, interactive tools, and forums.
 77: - **Strong Community Engagement:**
 78:   - Large and active user communities that foster interaction, knowledge sharing, and user-generated
 79:     content.
 80:   - Regular events, webinars, and community-driven projects that keep users engaged and loyal.
 81: 
 82: #### Weaknesses of Competitors:
 83: 
 84: - **Outdated User Interfaces:**
 85:   - Some platforms may have outdated or less intuitive user interfaces, affecting user experience.
 86: - **Limited Use of AI and Automation:**
 87:   - Traditional platforms may not leverage the latest AI and automation technologies for content
 88:     personalization and summarization.
 89: - **Fragmented Services:**
 90:   - Many competitors offer specialized services (e.g., only news, only courses) rather than an
 91:     integrated solution.
 92: 
 93: ## Additional Links
 94: 
 95: | **Source**                                       | **Description**                                                                                         | **Link**                                                                                |
 96: | ------------------------------------------------ | ------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
 97: | **NASA**                                         | Research, market reports, and industry analysis on space exploration and technology                     | [NASA](https://www.nasa.gov)                                                            |
 98: | **NOAA**                                         | Data on space weather and satellite operations                                                          | [NOAA](https://www.noaa.gov)                                                            |
 99: | **ESA**                                          | Reports and market studies on space missions and technology in Europe                                   | [ESA](https://www.esa.int)                                                              |
100: | **USGS**                                         | Satellite data and earth observation resources                                                          | [USGS](https://www.usgs.gov)                                                            |
101: | **Space Foundation**                             | Annual reports on the space economy, industry trends, and forecasts                                     | [Space Foundation](https://www.spacefoundation.org)                                     |
102: | **AIAA**                                         | Industry analysis, white papers, and technical publications                                             | [AIAA](https://www.aiaa.org)                                                            |
103: | **Commercial Spaceflight Federation**            | Insights on commercial spaceflight companies                                                            | [Commercial Spaceflight Federation](https://www.commercialspaceflight.org)              |
104: | **Frost & Sullivan**                             | Market research reports and analysis specific to the space industry                                     | [Frost & Sullivan](https://www.frost.com)                                               |
105: | **Allied Market Research**                       | Reports on various aspects of the space sector, including satellite services and exploration            | [Allied Market Research](https://www.alliedmarketresearch.com)                          |
106: | **NSR (Northern Sky Research)**                  | Market research and consulting services focused on the satellite and space sectors                      | [NSR](https://www.nsr.com)                                                              |
107: | **Bloomberg**                                    | Financial news and data analytics specific to publicly traded companies in the space sector             | [Bloomberg](https://www.bloomberg.com)                                                  |
108: | **Morningstar**                                  | Investment research and financial data on space-related companies                                       | [Morningstar](https://www.morningstar.com)                                              |
109: | **Space Capital**                                | Quarterly reports on venture capital investments in the space economy                                   | [Space Capital](https://www.spacecapital.com)                                           |
110: | **MIT Media Lab's Space Exploration Initiative** | Research and publications on space exploration technologies                                             | [MIT Media Lab](https://www.media.mit.edu/groups/space-exploration-initiative/overview) |
111: | **Caltech’s Jet Propulsion Laboratory (JPL)**    | Research papers and data on space missions and technology                                               | [JPL](https://www.jpl.nasa.gov)                                                         |
112: | **University Space Research Association (USRA)** | Academic research and industry studies                                                                  | [USRA](https://www.usra.edu)                                                            |
113: | **ProQuest**                                     | Access to dissertations, theses, and industry reports related to space technology and exploration       | [ProQuest](https://www.proquest.com)                                                    |
114: | **JSTOR**                                        | Access to academic journals and research studies specific to astronomy and space sciences               | [JSTOR](https://www.jstor.org)                                                          |
115: | **Library of Congress**                          | Extensive resources, including access to space-related publications and reports                         | [Library of Congress](https://www.loc.gov)                                              |
116: | **SpaceNews**                                    | News, analysis, and market data on the global space industry                                            | [SpaceNews](https://spacenews.com)                                                      |
117: | **Aerospace America**                            | Insights into the aerospace and space sectors, including technological advancements and industry trends | [Aerospace America](https://aerospaceamerica.aiaa.org)                                  |
118: | **The Space Review**                             | In-depth analysis and commentary on space policy, industry developments, and exploration                | [The Space Review](http://www.thespacereview.com)                                       |
```

## File: apps/admin-dashboard/content/bp/market-opportunities.md
```markdown
 1: #### Opportunities for AstronEra:
 2: 
 3: - **AI and Automation Integration:**
 4:   - Leveraging AI for content curation, summarization, and personalization to provide a superior
 5:     user experience.
 6: - **Holistic Platform Offering:**
 7:   - Combining news aggregation, courses, social interaction, job listings, and research tools into
 8:     one integrated platform.
 9: - **Scalable Content Updates:**
10:   - Using AI agents to automate the process of content updates, ensuring timely and relevant
11:     information.
12: - **Market Expansion:**
13: 
14:   - Targeting emerging markets and underrepresented user segments with tailored offerings.
15: 
16:   #### Market Needs and How AstronEra Addresses Them
17: 
18: 1. **Market Pain Points:**
19: 
20:    - **Problems:**
21:      - Lack of a centralized platform for all aspects of astronomy.
22:      - Need for simplified, streamlined, and auditable research processes.
23:      - Desire for credible information from a variety of sources.
24:      - Demand for knowledge communicated at different expertise levels.
25:      - Requirement for awareness of opportunities like jobs, courses, internships.
26:      - Need to foster scientific temperament and reduce superstitions.
27:    - **Significance:** These problems are critical for the future of astronomy and space
28:      exploration, fostering the next generation of curious minds and bridging the gap between the
29:      industry and the general population.
30: 
31: 2. **Solutions Offered:**
32:    - **Features:**
33:      - AI chatbots programmed for specific roles like Physics Tutor, Science Communicator, Astronaut
34:        Trainer, guide for study and career.
35:      - Live global summarized news from reliable sources.
36:      - E-learning courses.
37:      - Diverse network of people.
38:      - Access to opportunities and career guidance.
39:      - Tools to connect startups with investment opportunities.
40:      - Access to dedicated astronomical audiance for relevant businesses to promote themselves on
41:        AstronEra.
```

## File: apps/admin-dashboard/content/bp/market-research.md
```markdown
  1: ### Global Space Sector Market Research Summary
  2: 
  3: #### Technological Advances
  4: 
  5: - **Reusable Launch Vehicles**: Significant cost reduction.
  6: - **SmallSats and CubeSats**: Accounted for 95% of spacecraft launched in 2022.
  7: - **Satellite Constellations**: Enable global coverage.
  8: 
  9: #### Private Sector Investment
 10: 
 11: - **Investment**: $272 billion since 2013 in 1,791 companies.
 12: - **U.S. National Security Space Budget**: $20.8 billion in FY23, a 19.5% increase.
 13: - **LEO Satellites**: Over 5,000 by end of 2023, potentially 40,000-50,000 by 2030.
 14: 
 15: #### Demand for Space Data
 16: 
 17: - **Growth**: Data transfer to exceed 500 exabytes by 2030.
 18: - **Applications**: Military communications, environmental monitoring, emergency response.
 19: - **Technologies**: AI and edge computing.
 20: 
 21: #### Challenges
 22: 
 23: - **Supply Chain**: Developing competitive space-grade products.
 24: - **Regulations**: Complex and overlapping from multiple agencies.
 25: - **Environmental**: Space debris, congestion, greenhouse gas emissions.
 26: - **Technical**: High cost of launch, lack of in-space manufacturing infrastructure.
 27: 
 28: #### Opportunities
 29: 
 30: - **In-Space Manufacturing**: Utilizes microgravity and vacuum conditions.
 31: - **Additive Manufacturing**: 3D printing to create complex objects.
 32: - **Robotics**: For exploration, maintenance, and assembly.
 33: - **Sustainability**: Active debris removal and end-of-life disposal.
 34: 
 35: #### Industry Growth
 36: 
 37: - **Public-Private Collaboration**: Essential for leveraging investments.
 38: - **Emerging Trends**: Expansion of private companies, space data services, in-space manufacturing.
 39: - **Future Business Models**: Higher volume, lower cost, standardized offerings.
 40: 
 41: #### Key Statistics
 42: 
 43: - **Rocket Launches**: 186 in 2022, 41 more than in 2021.
 44: - **SmallSats**: 95% of spacecraft launched in 2022.
 45: - **Private Equity Investment**: $272 billion since 2013.
 46: - **U.S. Space Budget**: $20.8 billion in FY23.
 47: - **LEO Satellites**: Over 5,000 by end of 2023.
 48: - **Space Data**: Expected to grow to over 500 exabytes by 2030.
 49: - **Executive Belief**: 98% foresee increased demand for space data and private company expansion.
 50: 
 51: ### Global Space Technology Market
 52: 
 53: - **Market Size (2023)**: $443.20 billion.
 54: - **Projected Size (2033)**: $916.85 billion.
 55: - **CAGR (2024-2033)**: 7.54%.
 56: 
 57: #### Key Drivers
 58: 
 59: - **Technological Advancements**: Reusable rockets, SmallSats, CubeSats.
 60: - **Private Sector Investment**: SpaceX, Blue Origin.
 61: - **Satellite Data Demand**: Navigation, Earth observation.
 62: 
 63: #### Market Breakdown
 64: 
 65: - **North America Market Share (2023)**: >55%.
 66: - **Asia Pacific CAGR (2024-2033)**: 9.05%.
 67: - **Space Vehicles Market Share (2023)**: 67%.
 68: - **Commercial Segment Market Share (2023)**: 62%.
 69: - **Navigation & Mapping Segment Market Share (2023)**: 21%.
 70: - **U.S. Market Size (2023)**: $170.63 billion, projected $355.51 billion by 2033.
 71: 
 72: ### Space Exploration Market
 73: 
 74: - **Market Size (2022)**: $486 billion.
 75: - **Projected Size (2032)**: $1879 billion.
 76: - **CAGR (2022-2032)**: 16.21%.
 77: 
 78: This Chart showing the projected growth of the space industry from 2023 to 2035 based on three
 79: different annual growth rates (9%, 7.5%, and 16%). The initial value in 2023 is taken as the median
 80: of 440 and 630 billion USD.
 81: 
 82: ## ::financial-chart
 83: 
 84: title: Projected Global Market Growth chartType: line chartDataKey: globalMarket
 85: 
 86: ---
 87: 
 88: ::
 89: 
 90: #### Segments & Regions
 91: 
 92: - **Space Technology**: Largest segment in satellites (34.9%).
 93: - **Mission Type**: Unmanned missions growing significantly.
 94: - **Exploration Type**: Moon exploration (57.2%).
 95: - **End-Use**: Commercial sector (47.8%).
 96: - **Regional Insights**: North America dominates (38.7% share), Asia Pacific fastest growth.
 97: 
 98: #### Key Players & Factors
 99: 
100: - **Key Players**: SpaceX, NASA, Blue Origin, Lockheed Martin, Airbus Defense & Space.
101: - **Drivers**: Technological advancements, private investment, demand for space data.
102: - **Challenges**: High costs, space debris management, regulatory complexities.
103: 
104: ### Space Economy Growth
105: 
106: - **Projected Growth**: $1.8 trillion by 2035, from $630 billion in 2023, at 9% CAGR.
107: - **Technological Impact**: Innovations in satellites and rockets.
108: - **Industry Influence**: Enhances agriculture, disaster mitigation, digital communications.
109: - **Investment Growth**: Over $70 billion in 2021-2022.
110: 
111: #### Main Drivers
112: 
113: 1. **Launch Cost Decrease**: 10-fold reduction over 20 years.
114: 2. **Commercial Innovation**: Smaller, capable satellites.
115: 3. **Diversified Investment**: Significant private investments.
116: 4. **Cultural Awareness**: Increased global interest in space.
117: 
118: #### Metrics & Industry Impact
119: 
120: - **Commercial Communications**: From $133 billion to $218 billion by 2035.
121: - **PNT**: From $40 billion to $95 billion by 2035.
122: - **Earth Observation**: From $2 billion to $9 billion by 2035.
123: - **Supply Chain & Transportation**: Enhanced logistics and tracking.
124: - **Food & Beverage**: Improved delivery systems.
125: - **Retail & Consumer Goods**: Satellite-enabled devices.
126: - **Media & Entertainment**: Satellite internet platforms.
127: - **State-Sponsored Applications**: National security and research.
128: 
129: #### Global Participation
130: 
131: - **Established Nations**: Increased investments (e.g., India, Japan).
132: - **Emerging Nations**: New investments (e.g., Saudi Arabia, Thailand).
133: - **Geopolitical Conflicts**: Space capabilities in modern warfare.
134: 
135: ---
136: 
137: ### Overview of the Indian Space Market
138: 
139: #### Current Status and Growth Projections
140: 
141: The Indian space sector, currently valued between $8.4 billion in 2023, is experiencing rapid
142: growth. Driven by significant achievements by the Indian Space Research Organisation (ISRO) and
143: increasing private sector participation, the market is projected to grow to $44 billion by 2035. Key
144: drivers include cost-effective satellite launches, international collaborations, and innovative
145: missions like the Mars Orbiter Mission and upcoming Gaganyaan human spaceflight mission.
146: 
147: #### Key Metrics and Achievements
148: 
149: - **Satellite Launches**: India has successfully launched over 400 foreign satellites, earning $279
150:   million in revenue.
151: - **ISRO's Success**: Notable missions include the Mars Orbiter Mission, Chandrayaan-2, and
152:   PSLV-C37's world record of 104 satellites in a single launch.
153: - **Private Sector Involvement**: From just one startup in 2012 to 189 in 2023, private investment
154:   reached $124.7 million in 2023.
155: - **Policy Initiatives**: The Space Policy 2023 aims to enhance private sector involvement, with the
156:   creation of IN-SPACe to facilitate and regulate activities.
157: 
158: #### Growth Projections
159: 
160: Projections show the Indian space economy growing at varying annual rates:
161: 
162: - **7.5% YOY Growth**: Reaching approximately $20 billion by 2035.
163: - **9% YOY Growth**: Reaching approximately $23.6 billion by 2035.
164: - **16% YOY Growth**: Reaching approximately $49.8 billion by 2035.
165: 
166: ## ::financial-chart
167: 
168: title: Projected Indian Market Growth chartType: line chartDataKey: indianMarket
169: 
170: ---
171: 
172: ::
173: 
174: #### Strategic Focus
175: 
176: - **Satellite Applications**: Expanding into remote sensing, navigation, and Earth observation.
177: - **Human Spaceflight**: Gaganyaan mission to send Indian astronauts into space.
178: - **International Collaboration**: Agreements with foreign space agencies and participation in
179:   global missions.
180: 
181: India's space sector is poised for significant growth, driven by a blend of government support,
182: technological innovation, and private sector participation. This dynamic ecosystem is expected to
183: substantially increase India's share of the global space economy by 2035.
184: 
185: **See Appendix for references**
```

## File: apps/admin-dashboard/content/bp/market-size.md
```markdown
  1: ### Customer Market Size
  2: 
  3: ### Summary of Global Space Sector Workforce (2024) and Projections for 2035
  4: 
  5: #### Current Workforce (2024):
  6: 
  7: Based on various sources, the current global space sector workforce in 2024 is estimated to be
  8: between **400,000 to 1 million** employees. This includes roles in government space agencies,
  9: private sector companies, and related industries such as manufacturing, research, and services.
 10: 
 11: #### Projected Workforce (2035):
 12: 
 13: By 2035, the global space sector workforce is projected to grow significantly, potentially reaching
 14: between **1.5 million to 2.5 million** employees. This growth is driven by expanding commercial
 15: activities, increased private investment, and government initiatives.
 16: 
 17: #### Key Factors Influencing Workforce Growth:
 18: 
 19: | **Key Factor**                           | **Description**                                                                                                      | **Impact on Workforce**                                                                                              |
 20: | ---------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
 21: | **Technological Advances**               | Innovations such as reusable launch vehicles, SmallSats, CubeSats, and satellite constellations.                     | Lower costs and increased demand for technical expertise in manufacturing and operations.                            |
 22: | **Private Sector Investment**            | Significant venture capital and private equity investments driving commercial space ventures.                        | Job creation in startups and established companies focusing on space infrastructure, services, and new applications. |
 23: | **Public-Private Partnerships**          | Collaboration between government agencies and private companies to share costs and risks.                            | Enhanced sustainability and affordability of space missions, leading to steady job growth.                           |
 24: | **Rising Demand for Space Data**         | Increasing use of space data in various sectors including defense, environmental monitoring, and telecommunications. | Growth in jobs related to data analysis, satellite operations, and software development.                             |
 25: | **Space Infrastructure and Services**    | Expansion of satellite communication, Earth observation, and space tourism.                                          | Creation of new jobs in satellite manufacturing, ground services, and customer support.                              |
 26: | **Global Strategic Importance**          | Space activities becoming crucial for national defense, climate monitoring, and connectivity.                        | Increased government spending on space programs, boosting employment in public agencies and defense contractors.     |
 27: | **Educational and Training Initiatives** | Programs to address the skills gap and promote STEM education.                                                       | More qualified professionals entering the space sector, supporting workforce expansion.                              |
 28: 
 29: #### Key Statistics:
 30: 
 31: - **U.S. Space Economy (2021)**: 360,000 private industry jobs, significant compensation levels, and
 32:   strong growth in manufacturing and government sectors .
 33: - **Global Space Sector (2023)**: Approximately 400,000 jobs, with projections to reach 1.5 million
 34:   by 2035 due to private investment and new applications .
 35: - **Government Space Agencies**: Employ tens of thousands globally, with significant representation
 36:   in the U.S., Russia, and Europe .
 37: 
 38: ### Conclusion
 39: 
 40: The global space sector is experiencing robust growth, driven by technological innovations,
 41: increased private investment, and strategic government initiatives. This expansion is expected to
 42: significantly increase the workforce by 2035, creating diverse opportunities across various domains
 43: within the space industry. The collaboration between public and private entities, coupled with
 44: advancements in space technology, will be pivotal in shaping the future job market in this sector.
 45: 
 46: ---
 47: 
 48: ### Researchers
 49: 
 50: 2. **Professional and Educational Sectors:**
 51: 
 52:    - **Professional Use:** The space sector's professional use includes applications in agriculture,
 53:      construction, insurance, and climate change mitigation. Earth observation satellites provide
 54:      critical data for environmental monitoring, disaster response, and resource management.
 55:    - **Educational Initiatives:** Governments and private entities are increasingly investing in
 56:      space education, recognizing its strategic importance. This is fostering a new generation of
 57:      space professionals and enthusiasts, with programs aimed at students from various educational
 58:      levels.
 59: 
 60: To estimate the total number of active PhDs in astronomy, we'll use the following steps:
 61: 
 62: 1. **Determine the average length of a professional career.**
 63: 2. **Use the annual number of PhDs awarded to calculate the cumulative number of active PhDs.**
 64: 3. **Apply the growth rate to account for yearly increases.**
 65: 
 66: ### Data Recap
 67: 
 68: - **Total degrees awarded in Astronomy & Astrophysics in the US (2022):** 1,396
 69: - **Growth rate in degrees awarded:** 1.53%
 70: - **Average length of a professional career:** Typically around 35-40 years.
 71: 
 72: ### Assumptions
 73: 
 74: 1. **Average career length:** We'll use 37.5 years as the midpoint of the average professional
 75:    career span.
 76: 2. **Annual growth:** We'll apply the growth rate annually to account for increases in the number of
 77:    PhDs awarded.
 78: 
 79: ### Calculation Steps
 80: 
 81: 1. **Calculate the cumulative number of active PhDs over 37.5 years.**
 82: 2. **Account for the annual growth rate.**
 83: 
 84: ### Step-by-Step Calculation
 85: 
 86: 1. **Cumulative sum without growth:**
 87: 
 88: \[ \text{Total Active PhDs} = \text{Annual PhDs awarded} \times \text{Average career length} \]
 89: 
 90: Without accounting for growth:
 91: 
 92: \[ \text{Total Active PhDs} = 1,396 \times 37.5 = 52,350 \]
 93: 
 94: 2. **Account for growth rate:**
 95: 
 96: To account for the annual growth rate, we need to sum the geometric series of PhDs awarded over the
 97: career span. The formula for the sum of a geometric series is:
 98: 
 99: \[ S_n = a \frac{(1 - r^n)}{1 - r} \]
100: 
101: Where:
102: 
103: - \(a\) is the initial number of PhDs awarded annually.
104: - \(r\) is the growth rate per year.
105: - \(n\) is the number of years (37.5).
106: 
107: Here, \(a = 1,396\), \(r = 1 + 0.0153 = 1.0153\), and \(n = 37.5\).
108: 
109: \[ S\_{37.5} = 1,396 \frac{(1 - 1.0153^{37.5})}{1 - 1.0153} \]
110: 
111: Calculating the exponent:
112: 
113: \[ 1.0153^{37.5} \approx 1.765 \]
114: 
115: Now, substituting back into the formula:
116: 
117: \[ S\_{37.5} = 1,396 \frac{(1 - 1.765)}{1 - 1.0153} = 1,396 \frac{(-0.765)}{-0.0153} \approx 1,396
118: \times 50 = 69,800 \]
119: 
120: ### Summary
121: 
122: Based on the data provided and assumptions made, the estimated total number of active PhDs in
123: Astronomy & Astrophysics fields globally, considering an average professional career length of 37.5
124: years and a growth rate of 1.53%, is approximately **69,800**.
125: [Estimates based on data from datausa.com](https://datausa.io/profile/cip/astrophysics)
126: 
127: ## Amateur Astronomers:
128: 
129: 3. **Enthusiast Market:**
130:    - **Consumer Applications:** The space sector also targets enthusiasts through applications such
131:      as space tourism, amateur astronomy, and educational content. The decreasing cost of space
132:      technology is making these activities more accessible to a broader audience.
133: 
134: ### Globally
135: 
136: To estimate the global number of amateur astronomers, we can use data from various sources and
137: extrapolate based on known figures from specific countries. Here's a step-by-step approach to create
138: an estimation range:
139: 
140: 1. **United States Data**:
141: 
142:    - The U.S. has approximately 100,000 active amateur astronomers【32†source】【33†source】.
143:    - The U.S. population is around 332 million.
144: 
145: 2. **Proportion of Amateurs in the U.S.**:
146: 
147:    - Proportion of amateur astronomers in the U.S. = 100,000 / 332,000,000 ≈ 0.03%.
148: 
149: 3. **Extrapolation to Other Developed Countries**:
150: 
151:    - Assuming a similar proportion in other developed countries (e.g., Europe, Japan, Australia):
152:    - Total population of developed countries (approximate): 1.2 billion.
153:    - Estimated number of amateur astronomers: 1,200,000,000 \* 0.03% = 360,000.
154: 
155: 4. **Adjusting for Global Population**:
156: 
157:    - Global population is approximately 7.8 billion.
158:    - Developing countries may have lower participation rates due to different socio-economic
159:      factors. Let's estimate a lower rate (e.g., 0.01%).
160: 
161: 5. **Estimations**:
162:    - Developed countries: 360,000 amateur astronomers.
163:    - Developing countries: 6.6 billion \* 0.01% = 660,000 amateur astronomers.
164:    - Total estimated range: 360,000 (developed) + 660,000 (developing) = 1,020,000 amateur
165:      astronomers globally.
166: 
167: ### Estimation Range
168: 
169: Given the variability and uncertainty in participation rates and the broader definitions of what
170: constitutes an amateur astronomer, it's reasonable to consider a range:
171: 
172: - **Lower Estimate**: 800,000 amateur astronomers globally.
173: - **Upper Estimate**: 1,500,000 amateur astronomers globally.
174: 
175: ### Sources and Considerations:
176: 
177: - **Cloudy Nights Forum Discussions**: Provides anecdotal evidence and estimates based on
178:   participation in astronomy clubs and societies.
179: - **Astronomy Clubs and Societies**: Membership numbers can give a snapshot but are often
180:   underrepresented.
181: - **Magazine Circulations and Telescope Sales**: Proxy indicators of interest and participation in
182:   amateur astronomy.
183: 
184: These estimates provide a rough range and should be interpreted with caution due to the diverse and
185: often informal nature of amateur astronomy communities worldwide.
186: 
187: ### India
188: 
189: Based on the global estimation of amateur astronomers, we can use this to estimate the number of
190: amateur astronomers in India.
191: 
192: ### Global Estimation Recap
193: 
194: - **Lower Estimate**: 800,000 amateur astronomers globally.
195: - **Upper Estimate**: 1,500,000 amateur astronomers globally.
196: 
197: ### India's Population Proportion
198: 
199: India accounts for approximately 17.7% of the world's population. We can use this proportion to
200: estimate the number of amateur astronomers in India.
201: 
202: ### Calculation
203: 
204: - **Lower Estimate**:
205: 
206:   - Global estimate: 800,000 amateur astronomers
207:   - India's share (17.7%): 800,000 \* 0.177 ≈ 141,600
208: 
209: - **Upper Estimate**:
210:   - Global estimate: 1,500,000 amateur astronomers
211:   - India's share (17.7%): 1,500,000 \* 0.177 ≈ 265,500
212: 
213: ### Final Estimation Range for India
214: 
215: Therefore, based on global proportions, the estimated number of amateur astronomers in India would
216: range from approximately **141,600 to 265,500**.
217: 
218: This estimation provides a reasonable range, considering India's significant population and growing
219: interest in astronomy, further supported by active astronomy clubs and educational outreach
220: programs.
221: 
222: ## Companies
223: 
224: 1. **Commercial Space Sector:**
225: 
226:    - **Private Investment:** The commercial space sector has seen a surge in private investments,
227:      with entrepreneurs like Elon Musk and Jeff Bezos driving innovation through companies like
228:      SpaceX and Blue Origin. This influx of capital has led to advancements in reusable rocket
229:      systems, satellite miniaturization, and autonomous systems, significantly reducing launch costs
230:      and increasing accessibility.
231:    - **Satellite Communications:** This segment is expected to grow at a significant CAGR, driven by
232:      the need for global connectivity, including internet access and data transfer in remote areas.
233:      Satellite communications support various industries, including telecommunications,
234:      broadcasting, and disaster communication.
235: 
236: ### Market Size and Growth Potential
237: 
238: 1. **Market Size:**
239: 
240:    - **Astronomy-related SaaS Products:**
241:      - The global market for SaaS is projected to grow significantly, with industries like education
242:        technology seeing a compound annual growth rate (CAGR) of around 20%.
243:      - The astronomy market although perceived as niche, is expanding rapidly as more institutions,
244:        professionals, and enthusiasts enter the industry each year. This growth will only increase
245:        as we see humans return to the Moon, walk on Mars for the first time, events which will
246:        likely be live streamed to the globe. Not since we went to to the Moon will there be as much
247:        excitement.
248:      - Increased demand for reliable, realitime, quality data in this AI world we are moving into.
249:      - The demoratization of knowledge through AI, and rapidly expanding global connectivity to fast
250:        reliable internet will bring online the remaining regions of earth, increasing the globally
251:        accesable market to all of humanity.
252: 
253: 2. **Growth Potential:**
254:    - Factors driving growth include the increasing affordability of telescopes and other astronomy
255:      equipment, the proliferation of online educational platforms, and the growing interest in STEM
256:      (science, technology, engineering, and mathematics) education. Advancement in AI, creating
257:      personalisable tutors in any disipline. Space exploration targets like the Moon, Mars, and
258:      Asteroids will foster interest.
```

## File: apps/admin-dashboard/content/bp/market-swot.md
```markdown
 1: ### SWOT Analysis (Example)
 2: 
 3: 1. **Strengths:**
 4: 
 5:    - Innovative use of AI for summarization and content curation.
 6:    - Comprehensive service offering combining multiple features into one platform.
 7:    - Subscription-based model with tiered pricing, providing flexibility for different user needs.
 8:    - Domain expertise
 9:    - Affordable Access to and Indian talent pool
10:    - Established Brand and network for growth
11:    - Focus on automation to reduce manpower needs
12:    - Unique dataset that enhances the capabilities of LLMs like ChatGPT
13: 
14: 2. **Weaknesses:**
15: 
16:    - Limited initial market presence / awareness.
17:    - No previous experience scaling a company to a global level.
18:    - Lack of manpower.
19:    - Lack of experience with largescale software
20: 
21: 3. **Opportunities:**
22: 
23:    - Expanding interest in astronomy and space exploration.
24:    - Growing market for online presence and SaaS solutions.
25:    - Potential partnerships with educational institutions, research organizations, private
26:      companies, government organizations, public figures, and expert individuals.
27:      - **Weaknesses of Competitors:**
28: 
29: - Limited use of AI for personalized content.
30: - Often focused on a single aspect (e.g., news or courses) rather than an integrated approach.
31: - Astronomy is often not their primary focus
32: - Singular domain of expertise, no cross disiplanairy knowledge such as Astronomy, Education,
33:   Entreprenuership etc.
34: 
35: 4. **Threats:**
36: 
37:    - Competitive pressure from established platforms.
38:    - DDoS attacks and other online security concerns.
39:    - Rapid technological changes requiring constant innovation.
40:    - The pace of AI advancements
41:    - Access to open source data in a world where data is becoming more and more valuable.
42:    - Regulatory changes affecting data privacy and AI usage.
43:    - Cost of computation / scaling our systems
44:    - Security of our network and data
45:    - **Intense Competition:**
46: 
47: - Strong competition from well-established brands with significant market share.
48: - **Rapid Technological Changes:**
49:   - The need to continuously innovate and adapt to new technologies and user expectations.
50: - **Regulatory and Privacy Concerns:**
51:   - Compliance with data protection regulations and ensuring user privacy and security.
52: - **Dependence on External Content Sources:**
53: 
54:   - Reliance on external sources for content, which may affect the consistency and availability of
55:     information.
```

## File: apps/admin-dashboard/content/bp/market-trends.md
```markdown
 1: #### Key Trends and Opportunities
 2: 
 3: 1. **Technological Advancements:**
 4: 
 5:    - **Reusable Rockets:** Innovations in reusable rocket technology have drastically reduced the
 6:      cost of access to space, enabling more frequent and affordable launches.
 7:    - **Data and AI Integration:** Advances in data processing and AI are enhancing the capabilities
 8:      of Earth observation and navigation applications, driving growth in geospatial analytics and
 9:      other data-intensive sectors.
10: 
11: 2. **Economic Impact:**
12: 
13:    - **Diverse Applications:** Space technologies are increasingly being used in non-traditional
14:      sectors such as retail, consumer goods, and transportation, contributing significantly to the
15:      space economy's growth​.
16:    - **Cost Reduction:** Ongoing commercial innovations and the decrease in launch costs are making
17:      space-based services more affordable and accessible, fostering growth across various
18:      industries.
19: 
20: 3. **Current Trends:**
21: 
22:    - **Astronomy Sector:**
23: 
24:      - Increasing public interest in space exploration driven by missions from agencies like NASA
25:        and private companies like SpaceX.
26:      - Growth in online astronomy communities and educational content.
27:      - Advancements in AI and machine learning for data analysis in astronomy.
28:      - We need specific growth numbers here.
29: 
30:    - **SaaS Sector:**
31:      - Rapid adoption of cloud-based services across various industries.
32:      - Rapid growth and improvement of AI.
33:      - Emphasis on AI and automation through AI agents to enhance and customize a unique user
34:        experience.
35:      - Growing acceptance of AI and understanding of it's value.
36:      - Democratization of skills through AI.
37:      - Reduction in manpower needs due to automation.
38:      - Reduction in cost of AI / Cloud based systems.
39:      - Increasing importance of data security and privacy.
```

## File: apps/admin-dashboard/content/bp/marketing-collaborations.md
```markdown
 1: #### Partnerships and Collaborations
 2: 
 3: 1. **Potential Partners:**
 4: 
 5:    - Influencers
 6:    - Sponsoring local organizations
 7:    - Educational institutions
 8:    - Non-profits
 9:    - Environmentalist organizations
10: 
11: 2. **Collaboration Opportunities:**
12: 
13:    - Co-branded content
14:    - Sponsored advertising
15:    - Connecting universities to companies for internships
16: 
17: 3. **Benefits of Partnerships:**
18:    - Expanded reach
19:    - Enhanced credibility
20:    - Additional resources
21: 
22: ---
23: 
24: ## Version 2
25: 
26: #### Partnerships and Collaborations
27: 
28: 1. **Potential Partners:**
29: 
30:    - Expand potential partner list to include tech companies, online learning platforms, and content
31:      creators in related fields.
32: 
33: 2. **Collaboration Opportunities:**
34: 
35:    - Develop joint ventures with educational institutions to offer exclusive content or
36:      certifications.
37:    - Explore co-hosted events and webinars with industry partners to expand reach and authority.
38: 
39: 3. **Benefits of Partnerships:**
40:    - Highlight specific benefits such as shared marketing efforts, increased customer trust, and
41:      access to new market segments.
```

## File: apps/admin-dashboard/content/bp/marketing-customer-aquisition.md
```markdown
 1: #### Customer Acquisition Strategies
 2: 
 3: - **Astronomy Professionals:** Direct outreach to networks and on linkedin.
 4: - **Students:** Direct outreach through UCLan portal, Shweta is a student there so has direct
 5:   access.
 6: - **Science Communicators/Influencers:** Influence network on Instagram
 7: - **Astronomy Businesses:** Use our database and scraped contacts / social profiles for founders to
 8:   reach out directly.
 9: - **Enthusiasts:** Social media marketing, AstronEra existing email list. Organization
10:   collaborations, partnerships with companies we have onboarded.
11: 
12: 2. **Acquisition Channels:**
13: 
14:    - Social media promotion (Twitter, LinkedIn, Instagram, YouTube)
15:    - Networks: Conferences, IAU OAD network, RAS network, Dark Sky Network, New Space India Network,
16:      Linkedin hunt, Institutions websites, UCLan.
17:    - Influencer marketing
18:    - Organic traffic via blog
19:    - Paid social media advertising
20:    - Our company database
21:    - Email marketing (list building, converting free users to paying users)
22:    - Direct contact via social or email using sourced user data from astronomy-related websites
23: 
24: 3. **Incentives:**
25:    - 14-day free trial
26:    - Offer discount coupons to select people
27:    - Refer-a-friend program
28:    - Affilaite prizes for top referrers
29:    - Limited number of premium users initially
30: 
31: ---
32: 
33: ## Version 2
34: 
35: #### Customer Acquisition Strategies
36: 
37: 1. **Target Segments:**
38: 
39:    - **Astronomy Professionals:** Engage through LinkedIn outreach, industry-specific forums, and
40:      direct emails.
41:    - **Students:** Leverage UCLan portal and other educational platforms to promote the product.
42:    - **Science Communicators/Influencers:** Partner with influencers on Instagram and YouTube to
43:      reach a broader audience.
44:    - **Astronomy Businesses:** Utilize existing databases and social profiles for direct outreach.
45:    - **Enthusiasts:** Implement targeted social media campaigns and collaborate with organizations
46:      already onboarded.
47: 
48: 2. **Acquisition Channels:**
49: 
50:    - Prioritize high-impact channels like LinkedIn, Instagram, YouTube, and direct outreach at
51:      industry conferences. Maintain a balanced approach between organic and paid traffic.
52: 
53: 3. **Incentives:**
54:    - Enhance incentive programs by adding personalized onboarding sessions, loyalty rewards, and
55:      limited-time offers to create urgency and exclusivity.
```

## File: apps/admin-dashboard/content/bp/marketing-funnel.md
```markdown
 1: #### Sales Funnel and Conversion Strategy
 2: 
 3: 1. **Sales Funnel Stages:**
 4:    - Driving traffic to the landing page
 5:    - Converting visitors to users
 6:    - Upselling through software use and email marketing
 7:    - Notifications and direct messages on the website
 8: 2. **Conversion Tactics:**
 9:    - Tracking specific pipelines on the website using events
10:    - Affiliates
11:    - Enhanced features to encourage upgrades
12:    - Popups, content teases (e.g., blurred out premium content)
13:    - **Retention:**
14:      - Value offering, gamification, daily quizzes, competitions
15: 
16: ---
17: 
18: ## Version 2
19: 
20: #### Sales Funnel and Conversion Strategy
21: 
22: 1. **Sales Funnel Stages:**
23: 
24:    - Streamline the funnel by focusing on high-impact touchpoints and optimizing the user journey
25:      with personalized experiences.
26:    - Utilize data analytics to identify drop-off points and implement strategies to mitigate them.
27: 
28: 2. **Conversion Tactics:**
29: 
30:    - Introduce dynamic pricing models based on user behavior and preferences.
31:    - Enhance the website with interactive elements like quizzes and product demos to engage
32:      visitors.
33: 
34: 3. **Retention:**
35:    - Develop a loyalty program with tiered rewards to incentivize long-term engagement.
36:    - Use customer feedback to continuously improve the product and customer experience.
```

## File: apps/admin-dashboard/content/bp/marketing-objectives.md
```markdown
 1: #### Marketing Objectives and Goals
 2: 
 3: 1. **Initial User Acquisition:**
 4:    - Primary focus on acquiring initial users through social media, email marketing etc. and
 5:      converting them to paying customers.
 6: 2. **Customer Conversion:**
 7:    - Converting free users to paying customers through targeted email marketing and website
 8:      notifications / pop ups / push notifications
 9: 3. **Key Performance Indicators (KPIs):**
10: 
11:    - Monthly Active Users (MAU)
12:    - Customer Churn Rate (CCR)
13:    - Monthly Recurring Revenue (MRR)
14:    - Customer Acquisition Cost (CAC)
15:    - Website Bounce Rate
16:    - Organic Traffic
17:    - Paid Traffic
18:    - Virality Score
19:    - Backlinks
20:    - Social Mentions
21:    - Conversion Rate
22:    - Average User Engagement
23:    - Average Session Duration
24:    - Average Customer Lifetime Value
25: 
26:    ***
27: 
28:    ## Version 2
29: 
30:    #### Marketing Objectives and Goals
31: 
32: 4. **Initial User Acquisition:**
33: 
34:    - Focus on acquiring initial users through a mix of social media campaigns, email marketing,
35:      influencer partnerships, and SEO efforts to drive organic traffic.
36: 
37: 5. **Customer Conversion:**
38: 
39:    - Utilize personalized email marketing campaigns, targeted website notifications, pop-ups, and
40:      push notifications to convert free users into paying customers. Incorporate A/B testing to
41:      optimize these strategies.
42: 
43: 6. **Key Performance Indicators (KPIs):**
44:    - Simplify the list to focus on the most impactful KPIs: Monthly Active Users (MAU), Customer
45:      Acquisition Cost (CAC), Customer Lifetime Value (CLV), Conversion Rate, and Monthly Recurring
46:      Revenue (MRR). This will allow for more focused and actionable insights.
```

## File: apps/admin-dashboard/content/bp/marketing-plan.md
```markdown
 1: #### Digital Marketing and SEO Plans
 2: 
 3: 1. **Content Strategy:**
 4: 
 5:    - Increase the diversity of content types by including webinars, whitepapers, and user-generated
 6:      content.
 7:    - Adjust publishing frequency to ensure quality over quantity, especially for blog posts and
 8:      guest blogs.
 9: 
10: 2. **SEO Strategy:**
11: 
12:    - Focus on long-tail keywords and create cornerstone content to improve organic search rankings.
13:      Regularly update older content to keep it relevant.
14:    - Establish a robust internal linking strategy to improve user experience and SEO performance.
15: 
16: 3. **Online Advertising:**
17:    - Expand advertising to include search engine marketing (SEM) and consider retargeting campaigns
18:      to re-engage visitors who did not convert initially.
19:    - Implement a test-and-learn approach to continuously optimize ad spend and targeting.
20: 
21: #### Social Media and Community Engagement
22: 
23: 1. **Engagement Strategies:**
24: 
25:    - Incorporate user-generated content to foster a sense of community and authenticity.
26:    - Use social media analytics to refine and personalize engagement strategies based on user
27:      behavior and preferences.
28: 
29: 2. **Community Building:**
30:    - Launch a dedicated online community or forum for users to share experiences, ask questions, and
31:      network.
32:    - Host regular virtual events, such as webinars and Q&A sessions, to maintain high engagement
33:      levels.
```

## File: apps/admin-dashboard/content/bp/operations-automation.md
```markdown
 1: #### AI Agents for Content Updates and Automation
 2: 
 3: 1. **AI Capabilities:**
 4: 
 5:    - **Content Curation/Rating/Cleaning:** Automate the process to ensure consistent quality.
 6:    - **Markdown to Structured JSON Conversion:** Streamline data extraction for better usability.
 7:    - **Summarization:** Enhance AI models to improve the accuracy and relevance of summaries.
 8: 
 9: 2. **Automation Processes:**
10: 
11:    - **Content Summarization:** Continuously improve AI models based on user feedback.
12:    - **Behind-the-Scenes Work:** Implement robust moderation tools to ensure content quality and
13:      compliance.
14: 
15: 3. **Maintenance:**
16:    - **Quality Control:** Regularly update AI models and perform manual reviews to ensure
17:      high-quality output.
18: 
19: #### Content Sourcing and Quality Control
20: 
21: 1. **Content Sources:**
22: 
23:    - Diversify content sources to include reputable news sites, industry blogs, and academic
24:      publications. Encourage user-generated content with moderation to maintain quality.
25: 
26: 2. **Quality Control:**
27: 
28:    - Implement a multi-layered review process, combining AI checks, manual reviews, and user
29:      feedback.
30: 
31: 3. **Content Updates:**
32:    - Increase frequency of updates and use AI to identify and prioritize trending topics for content
33:      creation.
```

## File: apps/admin-dashboard/content/bp/operations-growth-1.md
```markdown
 1: #### Phase 1: Enhancements and Immediate Expansions (Year 1)
 2: 
 3: 1. **AI and Content Enhancement:**
 4: 
 5:    - **AI Model Upgrades:** Continuously improve the accuracy and capabilities of our AI models by
 6:      integrating advanced machine learning techniques and user feedback.
 7:    - **Content Diversification:** Expand the range of content to include more interactive and
 8:      multimedia elements, such as videos, webinars, and interactive simulations.
 9: 
10: 2. **User Engagement and Retention:**
11: 
12:    - **Gamification:** Introduce gamification elements to enhance user engagement, such as quizzes,
13:      badges, and leaderboards.
14:    - **Loyalty Programs:** Implement loyalty programs to reward long-term users and incentivize
15:      frequent usage.
16: 
17: 3. **Platform Optimization:**
18: 
19:    - **Scalability Enhancements:** Optimize our cloud infrastructure to handle increased traffic and
20:      ensure smooth performance.
21:    - **User Interface Improvements:** Regularly update the user interface to enhance usability and
22:      user experience.
23:    - **Progressive Web App (PWA):** Develop and launch a PWA to provide a seamless mobile experience
24:      without the need for native app development.
25: 
26: 4. **Market Expansion:**
27: 
28:    - **Educational Partnerships:** Partner with educational institutions to provide exclusive
29:      content and promote our platform among students.
30:    - **Community Building:** Foster a strong community through forums, social media groups, and
31:      user-generated content initiatives.
32: 
33: 5. **Data Sourcing and Processing:**
34:    - **Data Quality Improvements:** Focus on sourcing high-quality data, improving data processing,
35:      and cleaning mechanisms. Implement robust labeling and scoring systems for better data accuracy
36:      and relevance.
```

## File: apps/admin-dashboard/content/bp/operations-growth-2.md
```markdown
 1: #### Phase 2: Advanced Features and Market Penetration (Years 2-3)
 2: 
 3: 1. **Advanced AI Capabilities:**
 4: 
 5:    - **AI Personalization:** Develop AI-driven personalization features to provide tailored content
 6:      and recommendations based on user behavior and preferences.
 7:    - **Enhanced AI Agents:** Introduce more sophisticated AI agents capable of handling complex
 8:      queries and providing in-depth analysis.
 9: 
10: 2. **New Revenue Streams:**
11: 
12:    - **Consulting Services:** Offer consulting services to businesses and educational institutions
13:      leveraging our AI and data insights.
14:    - **Premium Content:** Expand premium content offerings, such as exclusive webinars, research
15:      reports, and advanced data insights.
16: 
17: 3. **Global Expansion:**
18:    - **Multilingual Support:** Add support for multiple languages to cater to a global audience.
19:    - **International Partnerships:** Form partnerships with international space agencies,
20:      educational institutions, and businesses to expand our reach.
```

## File: apps/admin-dashboard/content/bp/operations-growth-3.md
```markdown
 1: #### Phase 3: Innovation and Long-term Growth (Years 4-5)
 2: 
 3: 1. **Cutting-Edge Technology Integration:**
 4: 
 5:    - **Augmented Reality (AR) and Virtual Reality (VR):** Integrate AR and VR technologies to
 6:      provide immersive learning experiences and interactive content.
 7: 
 8: 2. **User-Generated Content:**
 9: 
10:    - **UGC Platform:** Develop a platform for users to create and share their content, fostering
11:      community engagement and diversifying our content offerings.
12:    - **Incentive Programs:** Implement incentive programs to encourage high-quality user-generated
13:      content.
14: 
15: 3. **Sustainability and Social Impact:**
16: 
17:    - **Educational Initiatives:** Launch initiatives aimed at promoting space education in
18:      underprivileged communities, enhancing our social impact.
19:    - **Sustainability Projects:** Partner with organizations to use space technology for
20:      sustainability projects, such as climate monitoring and disaster management.
21: 
22: 4. **Continuous Improvement:**
23:    - **Feedback Loops:** Establish continuous feedback loops with users to regularly gather insights
24:      and improve our services.
25:    - **Data-Driven Decision Making:** Utilize data analytics to make informed decisions about
26:      feature rollouts and market strategies.
```

## File: apps/admin-dashboard/content/bp/operations-growth-extra.md
```markdown
 1: #### Additional Growth Areas
 2: 
 3: 1. **Dark Sky Certification - C Tier:**
 4: 
 5:    - **Strategy:** Create content around dark sky certification to build traction. Collaborate with
 6:      Sonam Wangchuk and HIAL to potentially declare villages in Ladakh as dark sky reserves, setting
 7:      up our own criteria for certification.
 8: 
 9: 2. **AstroTribe Training Courses - B Tier:**
10: 
11:    - **Collaboration:** Continue collaborating with HIAL in Ladakh to teach a course on astronomy
12:      and train astro-guides. Finalize a digital version of the curriculum by 2025 for beta testing,
13:      with a full launch in 2026, including potential final examinations conducted via Zoom.
14:    - **Licensing:** License the training to third parties, translating it into multiple languages
15:      over time to reach a global audience.
16: 
17: 3. **Resource Licensing - C Tier:**
18: 
19:    - **Development:** Collate business documents, education templates, and courses for licensing.
20:      Allow users to create and post their own resources on our platform, taking a commission on each
21:      sale.
22: 
23: 4. **Proposal Vetting/Refining - C Tier:**
24: 
25:    - **Service:** Accept applications with proposals, refine them, and connect with relevant
26:      agencies or investors for funding. Target startups, non-profits, and research projects,
27:      facilitating connections with organizations like IAU and private investors.
28: 
29: 5. **Integrate Chatbot for Companies - B Tier:**
30:    - **Integration:** Allow companies to use our data for their website visitors to ask questions,
31:      providing answers based on our comprehensive data sets, including news, business documents, and
32:      more.
```

## File: apps/admin-dashboard/content/bp/operations-tech.md
```markdown
 1: #### Technology Stack and Infrastructure
 2: 
 3: 1. **Core Technologies:**
 4: 
 5:    - **Frontend:** Vue 3, Nuxt 3, TypeScript
 6:    - **Backend:** Nitro for Nuxt Server, Dockerized TypeScript Node server for scraping and AI
 7:      agents
 8:    - **Scraping:** Playwright, Cheerio, Node.js
 9:    - **AI:** ChatGPT, OpenAI embeddings, Llama 3 through GroqAPI, OpenAI small-text-embeddings model
10:    - **Database:** PostgreSQL hosted by Supabase, PG Vector for storing embeddings
11:    - **Authentication:** Supabase Auth
12:    - **Storage:** Supabase storage via S3
13:    - **User Queries:** Supabase edge functions for embedding queries
14:    - **Future Plans:** Relational Graph Database for scaling RAG system, LlamaParse for PDF to
15:      Markdown extraction, Python for scaling scraping server and AI agents.
16: 
17: 2. **Infrastructure:**
18: 
19:    - **Database/File Storage/Auth:** Supabase
20:    - **Hosting:** Vercel
21:    - **Logging and Monitoring:** Logtail
22:    - **Metrics and Event Capture:** PostHog (already implemented, with plans to expand events and
23:      pipelines tracked)
24:    - **Scraping Server:** Digital Ocean App platform
25: 
26: 3. **Scalability:**
27:    - The platform is designed to scale past 1 million users. Infrastructure elements like Supabase,
28:      Vercel, and Logtail are inherently scalable. Implementing limits to prevent unexpected bills
29:      due to cyber attacks or massive unexpected virality overnight. In-house scaling for scraping
30:      and data ingestion will be developed as needed.
```

## File: apps/admin-dashboard/content/bp/operations-workflow.md
```markdown
 1: ### Business Operations and Workflow
 2: 
 3: 1. **Day-to-Day Operations:**
 4: 
 5:    - **Content Writing:** Content will go through an automation process where an AI agent takes the
 6:      content title, performs research on target keywords, aggregates top search results, formulates
 7:      a draft post using SEO best practices and company-specific instructions, generates a featured
 8:      image, and publishes it as a draft for review and finishing touches by our content team.
 9:    - **Social Media Management:** Initially managed through platform-specific UI, with the potential
10:      to adopt third-party software or develop an in-house solution in the future.
11:    - **Customer Support:** Implement a ticketing system using our own database to track and
12:      prioritize inquiries.
13:    - **DevOps:** Automate infrastructure management and deployments using CI/CD pipelines.
14:    - **Technical Operations:** Use GitHub and GitHub Projects for project management, monitor
15:      feedback and metrics, and create prioritized tasks for development.
16:    - **Management:** Schedule regular strategy and performance review meetings to align operations
17:      with business goals.
18: 
19: 2. **Workflow Processes:**
20: 
21:    - **Managing Content:** Implement a content management system (CMS) to streamline content
22:      creation, approval, and publishing. Include a rich text editor for users to manage content
23:      easily, changing status from Draft to Published when required.
24:    - **User Interaction:** Use analytics tools (e.g., PostHog) to track user behavior and feedback.
25:      Implement user feedback loops for continuous improvement.
26:    - **Technical Operations:** Use GitHub and GitHub Projects for project management, monitor
27:      feedback and metrics, and create prioritized tasks for development.
28: 
29: 3. **Operational Goals:**
30:    - Achieve 10k Monthly Active Users (MAU) after 1 year, 50k MAU after 2 years.
31:    - End-to-end team support.
32:    - Scale operations by 50% Year Over Year (YOY).
33:    - Improve user-to-customer conversion rate by 100% from starting metrics.
34:    - Improve data processing rates and reduce technical and financial costs by 100%.
```

## File: apps/admin-dashboard/content/bp/products-companies.md
```markdown
 1: ### Company Profiles
 2: 
 3: 1. **Content:**
 4: 
 5:    - **Included Information:**
 6:      - Founding date
 7:      - Company name
 8:      - Short description
 9:      - Vision
10:      - Founding team
11:      - Funding
12:      - Employee count
13:      - Job opportunities
14:      - Events/public engagement
15:      - Products/services
16:      - Social media links
17:      - Industry category
18:    - **Selection Criteria:**
19:      - Must be a registered company with a website.
20:      - Must be in the space/astronomy domain.
21:      - No defense contractors or political companies.
22:      - Website review for inclusion.
23: 
24: 2. **Features:**
25:    - **Interactive Features:**
26:      - News updates from company blogs/newsrooms.
27:      - Social media content scraping and display (paid feature, free for space agencies).
28:      - Job listings from company websites/LinkedIn.
29:      - Event and product scraping if available.
30: 
31: ### Company Profiles
32: 
33: Detailed profiles of space and astronomy companies are available on AstronEra, featuring information
34: such as founding date, company name, vision, team, funding, employee count, job opportunities, and
35: social media links. Only registered companies in the space/astronomy domain are included, ensuring a
36: focus on relevant and credible organizations. Interactive features keep users updated on news,
37: events, and job listings from these companies.
```

## File: apps/admin-dashboard/content/bp/products-courses.md
```markdown
 1: ### Courses
 2: 
 3: 1. **Course Content:**
 4: 
 5:    - **Types of Courses:**
 6:      - Hobbyist
 7:      - Academic
 8:      - Prerequisite-based
 9:      - Beginner, intermediate, and advanced levels
10: 
11: 2. **Development and Sourcing:**
12: 
13:    - Sourced from universities, experts, and course hosting platforms.
14:    - AstronEra-generated content.
15: 
16: 3. **Learning Experience:**
17:    - Interactive modules, quizzes, certificates.
18:    - Varies based on course hosting (online, in-person).
19: 
20: ### Courses
21: 
22: The AstronEra platform offers a range of courses for hobbyists, students, and professionals. Courses
23: are sourced from universities, experts, and course hosting platforms, with some content generated by
24: AstronEra. The learning experience includes interactive modules, quizzes, and certificates, tailored
25: to different levels of expertise and learning preferences.
```

## File: apps/admin-dashboard/content/bp/products-jobs.md
```markdown
 1: ### Jobs Portal
 2: 
 3: 1. **Job Listings:**
 4: 
 5:    - **Types of Jobs:**
 6:      - Science communication
 7:        - Content writing
 8:        - Graphic designing
 9:      - Engineers/computer science experts
10:      - Startup opportunities
11:      - Academic/non-academic positions
12:      - Citizen science
13:    - **Sourcing and Updates:**
14:      - LinkedIn
15:      - Company websites
16:      - Future consideration for direct posting
17: 
18: 2. **Features:**
19:    - Bookmarking
20:    - Displaying most relevant listings
21:    - Search by location/type/salary
22: 
23: ### MVP
24: 
25: - Listing card for each job will have to have displaying the: position / location / published_at /
26:   link
27: -
28: 
29: ### Jobs Portal
30: 
31: AstronEra’s dedicated jobs portal lists a variety of opportunities in science communication,
32: engineering, startups, academia, and citizen science. Sourced from LinkedIn and company websites,
33: the portal allows users to bookmark listings and search by location, type, and salary, ensuring they
34: can find the most relevant job opportunities.
```

## File: apps/admin-dashboard/content/bp/products-misc.md
```markdown
 1: ### Space Policies by Country (start with India)
 2: 
 3: #### Satellites:
 4: 
 5: - https://www.heavens-above.com/Satellites.aspx
 6: 
 7: #### History
 8: 
 9: - History of space agency by companies http://www.astronautix.com/index.html
10: 
11: #### Astronomy Calendar
12: 
13: - http://www.seasky.org/astronomy/astronomy-calendar-2024.html
```

## File: apps/admin-dashboard/content/bp/products-news.md
```markdown
  1: ## Basic Product
  2: 
  3: 1. Scrape News from various sources:
  4: 
  5: - IAU: https://iau.org/news/pressreleases/ & https://iau.org/news/announcements/
  6: - OAD: https://www.astro4dev.org/category/2024/ (change the year for all news)
  7: - OAE: https://www.astro4edu.org/news/ (?page=7 for pagination)
  8: - OAO: Nothing yet, PDFs.
  9: - IUCAA: https://www.iucaa.in/en/about/news (all on one page)
 10: - Space Generation: https://spacegeneration.org/news/page/2 (just 2 pages)
 11: - International Astronomical Federation ASTRO: https://www.iafastro.org/news (?page=2 for
 12:   pagination), website will be good for events and other info in the future, lots of PDFs
 13: 
 14: #### Agencies
 15: 
 16: - ISRO: https://www.isro.gov.in/Archives.html (Archive of all press releases, already scraping)
 17: - ESA: news archive from all categories https://www.esa.int/Space_Safety/(archive)/0,
 18: - https://www.spacedaily.com/reports/  
 19:   https://www.esa.int/Science_Exploration/(archive)/0, https://www.esa.int/Applications/(archive)/0,
 20:   https://www.esa.int/Enabling_Support/(archive)/0,
 21: - NASA: https://www.nasa.gov/news/all-news/ (all news from all nasa websites, JPL etc.)
 22: - JAXA: https://global.jaxa.jp/press/2024/
 23: - ROSCOSMOS: https://tass.com/space-programs (not official link, banned in India)
 24: - CSA: https://www.asc-csa.gc.ca/eng/news/articles/
 25: - CNSA: https://www.cnsa.gov.cn/english/n6465652/n6465653/index.html
 26: 
 27: #### News
 28: 
 29: - https://ras.ac.uk/news-and-press/latest-news?page=10 (110 articles)
 30: - https://phys.org/space-news/sort/date/all/page2.html (400 articles)
 31: <!--  -->
 32: - https://www.spacefoundation.org/news/page/2/ ??
 33: 
 34: <!-- working on -->
 35: 
 36: - Dark Skies.org: https://darksky.org/news/ 670 articles - (page/2/ for pagination, archive of all
 37:   news)
 38: - https://astronomynow.com/category/news/page/2/ (2k articles)
 39: - SETI: https://www.seti.org/news (?page=1 for pagination)
 40: 
 41: <!-- done -->
 42: 
 43: - Universe Today: https://www.universetoday.com/ 27k articles (page/2/ for pagination)
 44: - Space.com https://www.space.com 10K + articles (/space-exploration/ for category, archive/2024/06
 45:   for pagination)
 46: - Planetary.org: https://www.planetary.org/articles 6k articles (/p2#list for pagination)
 47: - https://www.astronomy.com/ 12k + (science/stars/page/2/ cat/sub-cat/pagi)
 48: - https://spaceq.ca/category/news 3k (/page/2/ pagination) good for canadian news
 49: - https://earthsky.org/space/ 4.5k (/page/2/ pagi)
 50: - https://skyandtelescope.org/astronomy-news/page/2/ (6k articles)
 51: - https://spacenews.com/section/news-archive/page/2/ (26k articles)
 52:   https://www.kaggle.com/datasets/patrickfleith/space-news-dataset
 53: - https://spaceflightnow.com/category/news-archive/page/2/ (6k articles)
 54: - https://spaceref.com/2023/page/3/ 3k+
 55: - http://www.collectspace.com/news/ (3k articles)
 56: 
 57: ## What will the user see NOW
 58: 
 59: - **Layout**
 60:   - Ability to quickly switch between categories (or set their preferences)
 61:   - A newsfeed with all the news, filtered by categories
 62:   - Searchbar to search for article
 63:   - Switch between a listview and gridview
 64: - **Card**
 65:   - Category
 66:   - Tags
 67:   - Title
 68:   - Description (or summary of article)
 69:   - Published Date
 70:   - Bookmark
 71:   - NEW if < 24 hours old
 72: 
 73: ## What will user see in future
 74: 
 75: - **Card**
 76:   - Comments
 77:   - Like / Dislike
 78:   - Share
 79:   - Wordcount / Readtime
 80:   - Credability Score
 81:   - Links to sources (multiple sources)
 82: - **Layout**
 83:   - Summary Newsletter in the left panel
 84:   - Discussions / Activity in the right panel (active comment threads / trending articles)
 85: 
 86: ## Technical Improvements
 87: 
 88: - Use Dalle 3 to generate images on the fly ($0.080-0.120 USD per image)
 89: - Add article merging for news about the same thing, use K-nearest neighbour, this will be needed to
 90:   show multiple sources for the same article.
 91: -
 92: 
 93: ## Basic Plan
 94: 
 95: ## Pro Plan
 96: 
 97: ## Expert Plan
 98: 
 99: ## Data Storage
100: 
101: ## Scraping Requirements
102: 
103: ## Our USP
```

## File: apps/admin-dashboard/content/bp/products-personalization.md
```markdown
1: - Users can select categories of interest to customize their newsfeed and summaries.
2:   - Customized AI agents can answer questions about specific news articles, research papers,
3:     companies, courses, etc.
```

## File: apps/admin-dashboard/content/bp/products-research.md
```markdown
  1: ## Sources:
  2: 
  3: - Indian Academy of Sciences - JOURNAL OF ASTROPHYSICS AND ASTRONOMY
  4:   https://www.ias.ac.in/listing/articles/joaa/045
  5: 
  6: ## Basic Product
  7: 
  8: - Access all abstracts for scraped papers
  9: - Store them in DB
 10: - Create embeddings for all Research Abstracts, store in new table
 11: - Connect Frontend searchbox to Supabase openai endpoint
 12: - Create as postgres function to join the research table with research_embeddings results.
 13: - Display the results to the user
 14: - enable user interaction with data
 15: 
 16: ## What will the user see NOW
 17: 
 18: #### General UI
 19: 
 20: - Search Box
 21: - Have a group of buttons to configure the output. eg. Research, Direct, Summary to determine if the
 22:   search responds with only the related content, or if it feeds it into the LLM for summarization.
 23: - Example searches, to help them get started (clicking on this should send the query)
 24: - Show copy button, downvote etc. (copy what chatGPT has at bottom of message), also allow users to
 25:   star / bookmark messages to save them.
 26: - inline LaTeX converted to equations
 27: - Search History
 28: 
 29: #### Research Search
 30: 
 31: - User searches, and gets back N structured responses in a grid or table. No summary.
 32: - Allow users to set their preference for grid / table
 33: 
 34: #### Direct Search
 35: 
 36: - Allow Search Filters For:
 37:   - Dates
 38:   - Author
 39:   - Keywords
 40:   - Category
 41:   - DOI
 42: 
 43: #### Search Result (Direct & Research)
 44: 
 45: - Paper titles
 46: - Authors (name and link)
 47: - Figure / Page / Table # counts (as tags)
 48: - Abstract (full or summarized)
 49: - Link to PDF document
 50: - Link to Arxiv (potentially)
 51: - Published In (journal etc)
 52: - Category
 53: 
 54: ## Summary Search
 55: 
 56: - User asks a question
 57: - N related abstracts are returned
 58: - user should be able to configure the LLM base prompt (use presets)
 59:   - You are a science communicator
 60:   - You are a research writer
 61: - The response is displayed in a chat interface
 62: - If flagged the question / N related docs / LLM Response are stored in a table for review.
 63: 
 64: **consider creating script to extract published in from comment**
 65: 
 66: ## What will user see in future
 67: 
 68: - PDF fully extracted, show full paper as HTML with LaTeX inline
 69: - Full List of Citations, users can choose Citation Type
 70: - Search can respond with segments of the full paper
 71: - Extracted Keywords are displayed
 72: - Bookmark icon for bookmarking / adding to bookmark group
 73: - Show sources
 74: - Show References to Tools / Institutions / Tables / Figures etc
 75: - Ability to switch between table and grid display
 76: - Share button for search
 77: - Share collections of papers
 78: - add comments under papers
 79: - Button to "Cite"
 80: - Ability to upload and interact with papers
 81: 
 82: ## Technical Improvements
 83: 
 84: - Save all users searches (this can be used to provide recommendations to the user)
 85: - Save flagged papers to
 86: - Additional sources, other than ARXIV.
 87: - Create AI agent that ranks papers based on a number of factors such as # of citations, author
 88:   credability, published_in etc.
 89: - Allow users to upvote
 90: - Integrate translations API, allow users to translate N articles per month (store translations to
 91:   benefit other users as time goes on)
 92:   - Hire professional translators to review
 93: 
 94: ## Basic Plan
 95: 
 96: - How many responses per search (can have different tiers)
 97: 
 98: ## Pro Plan
 99: 
100: ## Expert Plan
101: 
102: ## Data Storage
103: 
104: - Message history is temporarily stored, only starred messages are saved.
105: - Flagged messages are stored for review
106: - All questions are stored, as they will have to be vectorized, so we can save cost by storing the
107:   embedding for common questions.
108: - Storage of 300k PDFs will be approx. 1.2TB, this can be done in supabase for ~$30 a month ($25 per
109:   1TB)
110: -
111: 
112: ## Scraping Requirements
113: 
114: - We may be able to use the arxiv api to get the latest articles once per day
115: - if not we will start by scraping the arxiv archive pages once a month or week depending on
116:   difficulty
117: 
118: ## Our USP
119: 
120: - User Preferences (most websites cator to one type of user, researchers mostly)
121: - Summarization using configurable AI
122: - Accessablility / Saving Time
123: - Improved results over time using AI ranking / user feedback
```

## File: apps/admin-dashboard/content/bp/products-search.md
```markdown
 1: ### AI RAG Search for Scraped Content
 2: 
 3: 1. **Search Functionality:**
 4: 
 5:    - **How It Works:**
 6:      - Find credible sources of research papers, journals, news, etc.
 7:      - Fetch web pages or PDFs, convert to Markdown, and store in the database.
 8:      - Chunk content into similar-sized pieces, extracting and replacing authors, citations,
 9:        figures, equations, tables, etc.
10:      - Create embeddings from chunks using OpenAI's small-embeddings API.
11:      - Free users get 10 related documents; paid users get more, with placeholders converted to
12:        extracted content.
13:      - Queries, related documents, references, and responses are stored for quality control.
14: 
15: 2. **Types of Content Searchable:**
16: 
17:    - Research papers
18:    - News (recent and historical for expert plans)
19:    - Launch updates
20:    - Conferences
21:    - Events
22:    - Companies
23:    - Funding opportunities
24:    - Job opportunities
25:    - Astronomy facts and history
26:    - Textbooks
27:    - Social media posts
28:    - User-generated content, including profiles
29:    - Tools/software
30:    - Rocket launches/missions
31:    - Astronomy figures (researchers, astrophysicists, astronauts)
32:    - Dark sky reserves/observatories
33:    - Astrotourism destinations/packages
34:    - Products and trusted dealers
35:    - Pop culture references to astronomy
36:    - Courses/institutions
37: 
38: 3. **User Benefits:**
39:    - Filtered search for relevant content.
40:    - Attached relevant sources for comprehensive understanding.
41: 
42: ### AI RAG Search for Scraped Content
43: 
44: AstronEra’s advanced search functionality leverages AI to find credible sources of research papers,
45: journals, news, and more. Content is meticulously scraped, converted to a standardized format, and
46: indexed for efficient retrieval. This feature provides users with filtered search results and
47: comprehensive understanding through attached references, enhancing their research and learning
48: experience.
```

## File: apps/admin-dashboard/content/bp/products-social.md
```markdown
 1: ### Social Interaction with Content
 2: 
 3: 1. **User Interaction:**
 4: 
 5:    - **Types of Interactions:**
 6:      - Comments, likes, shares, discussions under articles, research papers, etc.
 7:      - Pro+ users can automatically share posts to linked social profiles.
 8:      - User-generated posts (images, written content, polls, Q&A, videos).
 9:    - **Moderation and Management:**
10:      - Combination of automated moderation tools and human oversight to ensure quality and
11:        relevance.
12: 
13: 2. **Community Features:**
14:    - **Community-driven Events/Projects:**
15:      - Collaborative real-time writing of research papers.
16:      - User-proposed projects, potentially funded by the community or private investors.
17:      - Onsite stargazing events.
18:      - Live webinars with experts.
19:      - Conferences and fostering company collaboration.
20:      - Astrotourism and institutional visits to dark sky reserves and observatories.
21: 
22: ### Social Interaction with Content
23: 
24: AstronEra users can engage with content through comments, likes, shares, and discussions under
25: articles and research papers. Pro+ users have the added ability to share posts automatically to
26: their linked social profiles. The platform supports user-generated posts, including images, written
27: content, polls, Q&A, and videos, fostering a vibrant and interactive community. A combination of
28: automated moderation tools and human oversight ensures the quality and relevance of interactions.
```

## File: apps/admin-dashboard/content/bp/products-subscription.md
```markdown
 1: ### Tiered Subscription Model (Free, Pro, Expert)
 2: 
 3: 1. **Features:**
 4: 
 5:    - **Free Tier:**
 6:      - Basic news summarization, basic AI questions, limited agents, access to root content.
 7:    - **Pro Tier ($30/month):**
 8:      - Advanced AI questions, enhanced content summarization, premium news, company insights, job
 9:        listings, events, and social media integration.
10:    - **Expert Tier ($50/month):**
11:      - Full AI capabilities, extensive AI agents, comprehensive content summarization, advanced
12:        search capabilities, exclusive webinars, collaborative research tools, advanced data
13:        insights, personalized content.
14: 
15: 2. **User Segmentation:**
16: 
17:    - **Target Users:**
18:      - **Free Tier:** Hobbyists, casual enthusiasts.
19:      - **Pro Tier:** Students, intermediate learners, professionals seeking advanced tools.
20:      - **Expert Tier:** Professionals, researchers, institutions requiring comprehensive tools and
21:        insights.
22: 
23: 3. **Conversion Strategies:**
24:    - Limited access to functionalities/features for different tiers.
25:    - Limited access to information for different tiers.
26:    - Networking abilities for different tiers.
27:    - Targeted marketing.
28:    - Free trial periods.
29: 
30: ### Tiered Subscription Model
31: 
32: AstronEra offers a tiered subscription model to cater to different user needs:
33: 
34: - **Free Tier:** Basic news summarization, AI questions, and limited agents.
35: - **Pro Tier ($30/month):** Advanced AI features, premium content, job listings, events, and social
36:   media integration.
37: - **Expert Tier ($50/month):** Full AI capabilities, comprehensive content summarization, advanced
38:   search, exclusive webinars, and collaborative research tools.
```

## File: apps/admin-dashboard/content/bp/products-summaries.md
```markdown
 1: ### AI-driven Summarization
 2: 
 3: 1. **Functionality:**
 4: 
 5:    - **How It Works:**
 6:      - Free versions use the best available free algorithm; paid versions use the latest version of
 7:        ChatGPT.
 8:      - Retrieval-augmented search algorithm to retrieve specific context from the user's question.
 9:      - Summarizes content at beginner, intermediate, and expert levels based on the user's
10:        subscription plan.
11:      - K-nearest neighbors search algorithm returns related documents based on the user's plan.
12:      - References within documents are displayed for paid plans to speed up the research process.
13:      - References are rated/reviewed by users and AI agents, allowing sorting based on helpfulness.
14: 
15: 2. **Types of Content Summarized:**
16: 
17:    - News articles
18:    - Research papers
19: 
20: 3. **User Benefits:**
21:    - Saves time by summarizing large amounts of information.
22:    - Distills complex concepts for general understanding.
23:    - Increases content consumption efficiency.
24:    - Allows bookmarking and saving of necessary information.
25:    - Provides a unique combination of specific information tailored to the user's level of
26:      understanding.
27:    - Converts information into knowledge through user interaction and curated content.
28: 
29: ### Summarised Content
30: 
31: The AstronEra platform is a comprehensive online hub designed to democratize access to astronomy
32: knowledge and resources, empowering users to deepen their understanding of the universe. With a
33: mission to enhance humanity’s grasp of cosmic phenomena, AstronEra offers a seamless user journey
34: where individuals can sign up, select their interests, and receive personalized newsfeeds,
35: summaries, and updates. Customized AI agents are available to answer specific queries, and users can
36: actively participate in community-driven events, discussions, and projects.
37: 
38: ### AI-driven Summarization
39: 
40: AstronEra employs cutting-edge AI to summarize vast amounts of information, making complex concepts
41: accessible at beginner, intermediate, and expert levels. This feature is tailored to save time,
42: increase content consumption efficiency, and convert information into actionable knowledge. Users
43: can bookmark and save essential information, with paid plans offering advanced summarization and
44: document references for enhanced research capabilities.
```

## File: apps/admin-dashboard/content/bp/products-why-us.md
```markdown
 1: ### Unique Value Proposition and Features
 2: 
 3: 1. **Differentiation:**
 4: 
 5:    - **Unique Features:**
 6:      - Comprehensive astronomy platform serving diverse user segments.
 7:      - Unique combination of astronomy expertise and AI knowledge.
 8:      - Established brand with significant experience and partnerships in the astronomy industry.
 9:      - One-stop shop for astronomy, accessible to all levels of users.
10:      - Focus on sustainable development and conservation of the night sky.
11:    - **Addressing Specific Needs:**
12:      - Centralized access to all aspects of astronomy.
13:      - Simplified, streamlined, and auditable research processes.
14:      - Credible information from diverse sources.
15:      - Knowledge communicated at different expertise levels.
16:      - Awareness of opportunities like jobs, courses, internships.
17:      - Promotion of scientific temperament and reduction of superstitions.
18: 
19: 2. **Innovation:**
20:    - **Technologies/Approaches:**
21:      - AI Copilot for astronomy tasks.
22:      - Curated content based on user needs.
23:      - Comprehensive platform integrating various astronomy-related resources.
24:    - **Staying Ahead:**
25:      - Continuous updates with advancing technologies.
26:      - Hiring fresh talent driven by passion and innovation.
27:      - Connecting technology and information to everyday life.
```

## File: apps/admin-dashboard/content/bp/risk-customer.md
```markdown
 1: 6. **Customer Risks:**
 2: 
 3:    - **User Adoption and Retention:**
 4:      - **Risk:** Difficulty in attracting and retaining users.
 5:      - **Mitigation:** Implement high engagement features and user feedback mechanisms.
 6:      - **Assumption:** High churn rates in the initial stages.
 7:    - **Negative Feedback:**
 8: 
 9:      - **Risk:** Handling negative feedback or dissatisfaction.
10:      - **Mitigation:** Proactively engage with users and address issues promptly.
11:      - **Assumption:** User expectations might not align with the initial offering.
12: 
13:      #### Mitigation Strategies
14: 
15: 7. **Customer Risks:**
16:    - **User Engagement:**
17:      - Implementing user feedback mechanisms and improving user experience.
18:    - **Handling Feedback:**
19:      - Having a dedicated customer support team to address issues.
20: 
21: #### Contingency Plans
22: 
23: 6. **Customer Risks:**
24:    - **Adoption Drops:**
25:      - Introducing new features and improvements to attract users.
26:    - **Negative Feedback:**
27:      - Proactively managing feedback and making necessary changes.
```

## File: apps/admin-dashboard/content/bp/risk-financial.md
```markdown
 1: 2. **Financial Risks:**
 2: 
 3:    - **Funding and Cash Flow:**
 4:      - **Risk:** Difficulty in securing initial and ongoing funding.
 5:      - **Mitigation:** Build strong relationships with investors, present a clear and compelling
 6:        business case.
 7:      - **Assumption:** Initial funding rounds might be challenging due to market competition and
 8:        investor skepticism.
 9:    - **Economic Downturns:**
10:      - **Risk:** Impact of global or regional economic downturns on user subscriptions and
11:        advertising revenue.
12:      - **Mitigation:** Diversify revenue streams and maintain a financial buffer.
13:      - **Assumption:** Economic instability could reduce discretionary spending on subscription
14:        services.
15: 
16: #### Mitigation Strategies
17: 
18: 2. **Financial Risks:**
19: 
20:    - **Securing Funding:**
21:      - Building a solid business case and engaging with multiple investor channels.
22:    - **Financial Management:**
23:      - Implementing strict budget controls and financial monitoring.
24:      - Regular financial reviews to ensure cash flow stability.
25: 
26: #### Contingency Plans
27: 
28: 2. **Financial Risks:**
29: 
30:    - **Backup Funding:**
31:      - Maintaining relationships with multiple funding sources.
32:    - **Cost Management:**
33:      - Reducing non-essential expenses during financial constraints.
```

## File: apps/admin-dashboard/content/bp/risk-market.md
```markdown
 1: 1. **Market Risks:**
 2: 
 3:    - **Changes in Market Demand:**
 4:      - **Risk:** Potential changes in public interest in astronomy and space-related content.
 5:      - **Mitigation:** Regularly monitor trends and adjust content strategies accordingly.
 6:      - **Assumption:** The increasing interest in space exploration (e.g., SpaceX, NASA missions)
 7:        will continue to drive demand.
 8:    - **Competition:**
 9:      - **Risk:** High competition from existing platforms offering similar content (e.g., Sky &
10:        Telescope, Universe Today).
11:      - **Mitigation:** Differentiate through unique features, advanced AI-driven content, and a
12:        strong value proposition.
13:      - **Assumption:** Competitors have established user bases and content libraries.
14:    - **Emerging Technologies:**
15:      - **Risk:** New technologies (e.g., advanced AI, alternative content platforms) could disrupt
16:        the market.
17:      - **Mitigation:** Stay abreast of technological advancements and incorporate relevant
18:        innovations.
19:      - **Assumption:** Continuous advancements in AI and machine learning could create more
20:        sophisticated content aggregation and summarization tools.
21: 
22: #### Mitigation Strategies
23: 
24: 1. **Market Risks:**
25: 
26:    - **Staying Competitive:**
27:      - Continuous innovation and feature improvements.
28:      - Regular market research to stay ahead of trends.
29:    - **Differentiation:**
30:      - Unique value propositions such as advanced AI-driven features and comprehensive content
31:        aggregation.
32: 
33: #### Contingency Plans
34: 
35: 1. **Market Risks:**
36: 
37:    - **Alternative Strategies:**
38:      - Diversifying content and services to appeal to a broader audience.
39:    - **Adaptation:**
40:      - Quick adaptation to market changes and emerging technologies.
```

## File: apps/admin-dashboard/content/bp/risk-operational.md
```markdown
 1: 3. **Operational Risks:**
 2: 
 3:    - **Scaling Operations:**
 4:      - **Risk:** Challenges in scaling the platform to handle a growing user base.
 5:      - **Mitigation:** Use scalable cloud infrastructure and plan for modular architecture.
 6:      - **Assumption:** Infrastructure needs to be robust and scalable from the start.
 7:    - **Platform Reliability:**
 8:      - **Risk:** Ensuring uptime and performance of the platform.
 9:      - **Mitigation:** Implement robust monitoring, alert systems, and redundancy.
10:      - **Assumption:** Dependence on third-party services (e.g., Supabase, Vercel) could introduce
11:        risks.
12:    - **Data Security and Privacy:**
13:      - **Risk:** Potential data breaches or non-compliance with data protection regulations.
14:      - **Mitigation:** Adopt industry-standard security practices and conduct regular audits.
15:      - **Assumption:** Handling sensitive user data and compliance with global regulations.
16: 
17: #### Mitigation Strategies
18: 
19: 3. **Operational Risks:**
20: 
21:    - **Scalability:**
22:      - Using scalable cloud infrastructure and modular architecture.
23:    - **Reliability:**
24:      - Implementing robust monitoring and alert systems.
25:    - **Data Security:**
26:      - Adopting industry-standard security practices and regular audits.
27: 
28: #### Contingency Plans
29: 
30: 3. **Operational Risks:**
31: 
32:    - **Operational Failures:**
33:      - Having backup systems and disaster recovery plans.
34:    - **Business Continuity:**
35:      - Ensuring critical operations can continue during disruptions.
```

## File: apps/admin-dashboard/content/bp/risk-regulatory.md
```markdown
 1: 5. **Regulatory Risks:**
 2: 
 3:    - **Compliance:**
 4:      - **Risk:** Navigating global and regional data protection and privacy regulations.
 5:      - **Mitigation:** Regularly review and update compliance policies.
 6:      - **Assumption:** Regulations like GDPR, CCPA, and others will impact operations.
 7:    - **Changes in Regulations:**
 8:      - **Risk:** New regulations could be introduced, requiring changes in operations.
 9:      - **Mitigation:** Build flexibility into operations to quickly adapt.
10:      - **Assumption:** Regulatory landscape is constantly evolving, necessitating agile responses.
11: 
12: #### Mitigation Strategies
13: 
14: 5. **Regulatory Risks:**
15: 
16:    - **Compliance Measures:**
17:      - Regularly reviewing and updating compliance policies.
18:    - **Agility:**
19:      - Building flexibility into operations to quickly adapt to regulatory changes.
20: 
21: #### Contingency Plans
22: 
23: 5. **Regulatory Risks:**
24: 
25:    - **Regulatory Changes:**
26:      - Staying informed about potential changes and preparing accordingly.
27:    - **Non-compliance:**
28:      - Immediate action plans to address non-compliance issues.
```

## File: apps/admin-dashboard/content/bp/risk-technical.md
```markdown
 1: 4. **Technical Risks:**
 2: 
 3:    - **AI Integration:**
 4:      - **Risk:** Challenges in integrating and maintaining AI technologies.
 5:      - **Mitigation:** Use phased integration of AI features and continuous model updates.
 6:      - **Assumption:** AI models need constant updates and improvements.
 7:    - **Accuracy and Performance:**
 8:      - **Risk:** Ensuring the AI models provide accurate and relevant summaries and answers.
 9:      - **Mitigation:** Continuous training and leveraging user feedback for improvements.
10:      - **Assumption:** Initial models might have lower accuracy that improves over time with more
11:        data.
12: 
13: #### Mitigation Strategies
14: 
15: 4. **Technical Risks:**
16: 
17:    - **AI Accuracy:**
18:      - Continuous training and updating of AI models.
19:    - **Integration:**
20:      - Phased integration of AI features to manage risks.
21: 
22: #### Contingency Plans
23: 
24: 4. **Technical Risks:**
25: 
26:    - **Technical Issues:**
27:      - Having a dedicated technical support team to address major issues.
28:    - **Continuous Improvement:**
29:      - Regular updates and improvements to AI models and infrastructure.
```

## File: apps/admin-dashboard/content/bp/summary-financials.md
```markdown
 1: #### Summary of Financial Projections and Funding Requirements
 2: 
 3: - **Revenue Model:**
 4: 
 5:   - Free Tier: Access to basic features.
 6:   - Pro Tier ($30/month): Advanced AI features, extra context for AI search, premium content access.
 7:   - Expert Tier ($50/month): Comprehensive AI capabilities, exclusive content, and tools.
 8: 
 9: - **Financial Projections:**
10: 
11:   - **Year 1:** Revenue - $330,000 | Expenses - $324,010 | Net Profit - $5,990
12:   - **Year 2:** Revenue - $1,725,000 | Expenses - $595,510 | Net Profit - $1,129,490
13:   - **Year 3:** Revenue - $9,000,000 | Expenses - $1,573,510 | Net Profit - $7,426,490
14: 
15: - **Funding Requirements:**
16:   - Estimated funding needs: $300,000 to cover initial costs and provide a buffer for unforeseen
17:     expenses.
18:   - **Use of Funds:** Allocation for product development, marketing, operations, and key hires to
19:     support growth.
```

## File: apps/admin-dashboard/content/bp/summary-market.md
```markdown
 1: #### Market Opportunity
 2: 
 3: The global space economy is projected to reach $1.8 trillion by 2035, driven by advancements in
 4: space-enabled technologies and increasing interest in astronomy. AstronEra is well-positioned to
 5: capture a significant share of this growing market by providing a comprehensive and innovative
 6: platform for astronomy enthusiasts and professionals.
 7: 
 8: #### Competitive Landscape
 9: 
10: Key competitors include platforms like Sky & Telescope and Universe Today. AstronEra’s competitive
11: advantage lies in its integrated approach, combining news aggregation, AI-driven tools, and
12: community engagement in a single platform.
```

## File: apps/admin-dashboard/content/bp/summary-milestones.md
```markdown
 1: #### Traction
 2: 
 3: - Early achievements include partnerships with leading universities and space agencies.
 4: - Positive user testimonials and growing community engagement.
 5: - Successful pilot programs demonstrating the platform’s value and effectiveness.
 6: 
 7: #### Key Highlights and Milestones
 8: 
 9: - **User Growth:**
10: 
11:   - Year 1: 10k free users, 600 paid users (Pro and Expert 50/50).
12:   - Year 2: 50k free users, 3,000 paid users.
13:   - Year 3: 200k free users, 12,000 paid users.
14: 
15: - **Product Development:**
16: 
17:   - Launched initial platform with core features.
18:   - Continuous enhancement of AI-driven tools and content offerings.
19:   - Increasing dataset size, so AI has a large pool to draw from.
20:   - Integration of advanced search capabilities and community features.
21: 
22: - **Market Position:**
23: 
24:   - Established as a comprehensive platform for astronomy content and tools.
25:   - Differentiated by innovative AI applications and a broad range of services.
26: 
27: - **Operational Excellence:**
28:   - Scalable infrastructure and robust data security measures.
29:   - Strong customer support and community engagement strategies.
```

## File: apps/admin-dashboard/content/bp/summary-problem-solution.md
```markdown
 1: #### Problem Statement
 2: 
 3: Many astronomy enthusiasts and professionals face difficulties in accessing consolidated and
 4: high-quality astronomy content, tools, and opportunities. The fragmented nature of current resources
 5: hinders efficient learning, research, and community building.
 6: 
 7: #### Solution Explanation
 8: 
 9: AstronEra solves this problem by offering an integrated platform that consolidates news, research,
10: company profiles, social interactions, and educational resources. Our AI-driven tools enhance
11: content accessibility and comprehension, providing tailored summaries and advanced search
12: capabilities to support various user needs.
```

## File: apps/admin-dashboard/content/bp/summary-products.md
```markdown
 1: #### Overview of Services and Product Offerings
 2: 
 3: - **News and Research Aggregation:** Daily updates from scientific journals, research papers, space
 4:   company blogs, news agencies, social media of major space agencies, research institutions, and
 5:   events.
 6: - **Company Profiles:** Detailed profiles of space-related companies including founding date,
 7:   vision, team, funding, job opportunities, events, products, and more.
 8: - **Social Interaction:** Features for commenting, liking, sharing content, and creating user posts,
 9:   with community-driven events like webinars, stargazing, and collaborative research projects.
10: - **AI-driven Summarization:** Summarization of news articles and research papers, providing
11:   beginner, intermediate, and expert level summaries.
12: - **Jobs Portal:** Listings for academic positions, industry roles, startup opportunities, and
13:   citizen science projects.
14: - **Courses:** A wide range of courses sourced from universities, experts, and course hosting
15:   platforms, covering levels from hobbyist to advanced.
16: - **Custom AI Search:** Advanced search capabilities leveraging AI to retrieve and summarize content
17:   from our dataset to enhance research and learning.
```

## File: apps/admin-dashboard/content/bp/summary-usp.md
```markdown
1: #### Unique Selling Proposition (USP)
2: 
3: AstronEra differentiates itself through its innovative use of AI for content summarization and
4: search, a comprehensive range of services, and a focus on community building. Our platform combines
5: expert curation with cutting-edge technology to deliver unparalleled value to users.
```

## File: apps/admin-dashboard/content/bp/summary-vision.md
```markdown
1: #### Vision and Mission Statement
2: 
3: **Vision:** To accelerate sustainable development through astronomy via our premier global platform,
4: and to foster a deeper understanding and appreciation of the universe, and dark skies.
5: 
6: **Mission:** To aggregate and curate high-quality astronomy content, provide innovative AI-driven
7: tools, and build a vibrant community that connects users with the latest developments,
8: opportunities, and resources in the field of astronomy.
```

## File: apps/admin-dashboard/financials/analytics.ts
```typescript
  1: import { USD2INR } from './helpers'
  2: 
  3: export interface AnalyticsResult {
  4:   total: number
  5:   events: {
  6:     usage: number
  7:     cost: number
  8:   }
  9:   recordings: {
 10:     usage: number
 11:     cost: number
 12:   }
 13:   featureRequests: {
 14:     usage: number
 15:     cost: number
 16:   }
 17:   surveyResponses: {
 18:     usage: number
 19:     cost: number
 20:   }
 21: }
 22: 
 23: function calculateTieredCost(quantity: number, tiers: { limit: number, price: number }[]) {
 24:   let cost = 0
 25:   let remainingQuantity = quantity
 26: 
 27:   for (const tier of tiers) {
 28:     const applicableQuantity = Math.min(remainingQuantity, tier.limit)
 29:     cost += applicableQuantity * tier.price
 30:     remainingQuantity -= applicableQuantity
 31:     if (remainingQuantity <= 0) break
 32:   }
 33: 
 34:   return cost
 35: }
 36: 
 37: const POSTHOG_ANALYTICS_TIERS = [
 38:   { limit: 1000000, price: 0 },
 39:   { limit: 1000000, price: 0.00005 },
 40:   { limit: 13000000, price: 0.0000343 },
 41:   { limit: 35000000, price: 0.0000295 },
 42:   { limit: 50000000, price: 0.0000218 },
 43:   { limit: 150000000, price: 0.000015 },
 44:   { limit: Infinity, price: 0.000009 },
 45: ]
 46: 
 47: function calculateProductAnalyticsCost(events: number) {
 48:   return calculateTieredCost(events, POSTHOG_ANALYTICS_TIERS)
 49: }
 50: 
 51: const POSTHOG_REPLAY_TIERS = [
 52:   { limit: 5000, price: 0 },
 53:   { limit: 10000, price: 0.04 },
 54:   { limit: 35000, price: 0.003 },
 55:   { limit: 100000, price: 0.0027 },
 56:   { limit: 350000, price: 0.0025 },
 57:   { limit: Infinity, price: 0.002 },
 58: ]
 59: 
 60: function calculateSessionReplayCost(recordings: number) {
 61:   return calculateTieredCost(recordings, POSTHOG_REPLAY_TIERS)
 62: }
 63: 
 64: const POSTHOG_FEAT_FLAG_TIERS = [
 65:   { limit: 1000000, price: 0 },
 66:   { limit: 1000000, price: 0.0001 },
 67:   { limit: 8000000, price: 0.000045 },
 68:   { limit: 40000000, price: 0.000025 },
 69:   { limit: Infinity, price: 0.00001 },
 70: ]
 71: 
 72: function calculateFeatureFlagsCost(requests: number) {
 73:   return calculateTieredCost(requests, POSTHOG_FEAT_FLAG_TIERS)
 74: }
 75: 
 76: const POSTHOG_SURVEY_TIERS = [
 77:   { limit: 250, price: 0 },
 78:   { limit: 250, price: 0.2 },
 79:   { limit: 500, price: 0.1 },
 80:   { limit: 9000, price: 0.035 },
 81:   { limit: 10000, price: 0.015 },
 82:   { limit: Infinity, price: 0.01 },
 83: ]
 84: 
 85: function calculateSurveysCost(responses: number) {
 86:   return calculateTieredCost(responses, POSTHOG_SURVEY_TIERS)
 87: }
 88: 
 89: export function calculateAnalyticsCost({
 90:   MAU,
 91:   month,
 92:   avgMauUsage,
 93: }: UsageEstimationParams): AnalyticsResult {
 94:   const { events, recordings, featureRequests, surveyResponses } = estimateUsage({
 95:     MAU,
 96:     month,
 97:     avgMauUsage,
 98:   })
 99: 
100:   const eventsCost = calculateProductAnalyticsCost(events)
101:   const recordingsCost = calculateSessionReplayCost(recordings)
102:   const featureRequestsCost = calculateFeatureFlagsCost(featureRequests)
103:   const surveysCost = calculateSurveysCost(surveyResponses)
104: 
105:   console.log(
106:     'Calculate Analytics Cost:',
107:     MAU,
108:     eventsCost,
109:     recordingsCost,
110:     featureRequestsCost,
111:     surveysCost,
112:   )
113: 
114:   const totalCost = eventsCost + recordingsCost + featureRequestsCost + surveysCost
115:   console.log(
116:     'Calculate Analytics Cost:',
117:     MAU,
118:     eventsCost,
119:     recordingsCost,
120:     featureRequestsCost,
121:     surveysCost,
122:     totalCost,
123:     USD2INR(totalCost),
124:   )
125: 
126:   return {
127:     total: USD2INR(totalCost),
128:     events: {
129:       cost: USD2INR(eventsCost),
130:       usage: events,
131:     },
132:     recordings: {
133:       cost: USD2INR(recordingsCost),
134:       usage: recordings,
135:     },
136:     featureRequests: {
137:       cost: USD2INR(featureRequestsCost),
138:       usage: featureRequests,
139:     },
140:     surveyResponses: {
141:       cost: USD2INR(surveysCost),
142:       usage: surveyResponses,
143:     },
144:   }
145: }
146: 
147: type UsageEstimationParams = {
148:   MAU: number
149:   month: number
150:   avgMauUsage: number
151: }
152: 
153: const FREE_TIER_MONTHS = 4
154: 
155: function estimateUsage({ MAU, month, avgMauUsage }: UsageEstimationParams): EstimatedUsage {
156:   const isFreeTier = month < FREE_TIER_MONTHS
157:   const scaleFactor = isFreeTier ? 0.1 : 1
158: 
159:   const events = Math.min(MAU * avgMauUsage * scaleFactor, 1000000 * (month + 1)) || 0
160:   const recordings = Math.min(MAU * 0.1 * scaleFactor, 5000 * (month + 1)) || 0
161:   const featureRequests = Math.min(MAU * 0.05 * scaleFactor, 100000 * (month + 1)) || 0
162:   const surveyResponses = Math.min(MAU * 0.08 * scaleFactor, 1000 * (month + 1)) || 0
163: 
164:   console.log('Estimate Usage:', MAU, events, recordings, featureRequests, surveyResponses)
165:   return {
166:     total: Math.round(events + recordings + featureRequests + surveyResponses),
167:     events: Math.round(events),
168:     recordings: Math.round(recordings),
169:     featureRequests: Math.round(featureRequests),
170:     surveyResponses: Math.round(surveyResponses),
171:   }
172: }
173: 
174: type EstimatedUsage = {
175:   total: number
176:   events: number
177:   recordings: number
178:   featureRequests: number
179:   surveyResponses: number
180: }
```

## File: apps/admin-dashboard/financials/capital.ts
```typescript
  1: import { ROUND0 } from './helpers'
  2: 
  3: interface InitialLoanParams {
  4:   loan: number
  5:   annualInterestRate: number
  6:   termInYears: number
  7: }
  8: 
  9: export interface LoanResult {
 10:   principal: number
 11:   termInYears: number
 12:   annualInterestRate: number
 13:   monthlyInterestOnlyPayment: number
 14:   monthlyTotalPayment: number
 15:   monthlyPrincipalPayment: number
 16: }
 17: 
 18: export function calculateInitialLoan({
 19:   loan,
 20:   annualInterestRate,
 21:   termInYears,
 22: }: InitialLoanParams): LoanResult {
 23:   const interestRateDecimal = annualInterestRate > 1 ? annualInterestRate / 100 : annualInterestRate
 24: 
 25:   // Convert annual interest rate to monthly rate
 26:   const monthlyInterestRate = interestRateDecimal / 12
 27: 
 28:   // Convert loan term from years to months
 29:   const numberOfPayments = termInYears * 12
 30: 
 31:   // Calculate monthly interest-only payment
 32:   const monthlyInterestOnlyPayment = loan * monthlyInterestRate
 33: 
 34:   // Calculate total monthly payment using the loan amortization formula
 35:   const monthlyTotalPayment
 36:     = (loan * (monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numberOfPayments)))
 37:     / (Math.pow(1 + monthlyInterestRate, numberOfPayments) - 1)
 38: 
 39:   // Calculate the principal payment
 40:   const monthlyPrincipalPayment = monthlyTotalPayment - monthlyInterestOnlyPayment
 41: 
 42:   return {
 43:     principal: loan,
 44:     termInYears,
 45:     annualInterestRate,
 46:     monthlyInterestOnlyPayment: Math.round(monthlyInterestOnlyPayment * 100) / 100,
 47:     monthlyTotalPayment: Math.round(monthlyTotalPayment * 100) / 100,
 48:     monthlyPrincipalPayment: Math.round(monthlyPrincipalPayment * 100) / 100,
 49:   }
 50: }
 51: 
 52: function calculateBurnRate(totalExpenses: number, MRR: number) {
 53:   return ROUND0(totalExpenses - MRR)
 54: }
 55: 
 56: function calculateRunway(currentBalance: number, burnRate: number): number {
 57:   if (burnRate === 0) {
 58:     return Infinity // or a large number to indicate no burn
 59:   }
 60:   return parseInt((currentBalance / Math.abs(burnRate)).toFixed(0))
 61: }
 62: 
 63: export interface CapitalResult {
 64:   loan: LoanResult
 65:   runway: number
 66:   burnRate: number
 67:   balance: {
 68:     start: number
 69:     end: number
 70:   }
 71: }
 72: 
 73: interface LoanRepaymentParams {
 74:   month: number
 75:   loan: {
 76:     AMOUNT: number
 77:     ANNUAL_INTEREST_RATE: number
 78:     TERM_IN_YEARS: number
 79:   }
 80:   expenses: number
 81:   income: number
 82:   bootstrapMonths: number
 83:   initialCapital: number
 84: }
 85: 
 86: let balanceRemaining = 0
 87: let loanStarted = {
 88:   principal: 0,
 89:   termInYears: 0,
 90:   annualInterestRate: 0,
 91:   monthlyInterestOnlyPayment: 0,
 92:   monthlyTotalPayment: 0,
 93:   monthlyPrincipalPayment: 0,
 94: }
 95: 
 96: export function calculateRemainingBalance({
 97:   month,
 98:   expenses,
 99:   income,
100:   bootstrapMonths,
101:   initialCapital,
102:   loan,
103: }: LoanRepaymentParams): CapitalResult {
104:   if (month === 1) {
105:     balanceRemaining = initialCapital
106:   }
107: 
108:   if (month === bootstrapMonths) {
109:     balanceRemaining += loan.AMOUNT
110:     loanStarted = calculateInitialLoan({
111:       loan: loan.AMOUNT,
112:       annualInterestRate: loan.ANNUAL_INTEREST_RATE,
113:       termInYears: loan.TERM_IN_YEARS,
114:     })
115:   }
116: 
117:   const burnRate = calculateBurnRate(expenses, income)
118:   balanceRemaining -= burnRate
119: 
120:   const adjustedBurn = burnRate < 0 ? 0 : burnRate
121:   const runway = calculateRunway(balanceRemaining, adjustedBurn)
122: 
123:   return {
124:     loan: loanStarted,
125:     runway,
126:     burnRate,
127:     balance: {
128:       start: balanceRemaining + burnRate,
129:       end: balanceRemaining,
130:     },
131:   }
132: }
```

## File: apps/admin-dashboard/financials/customers.ts
```typescript
  1: import { USD2INR, ROUND0, EFFICIENCY_FACTOR } from './helpers'
  2: import { metricConfig } from './totals'
  3: 
  4: export const INCOME_STREAMS = {
  5:   subscription: {
  6:     pro: {
  7:       price: 20, // USD
  8:       conversion: {
  9:         current: 0,
 10:         pessimistic: 0.018,
 11:         optimistic: 0.05,
 12:       },
 13:       refund: {
 14:         yearly: {
 15:           pessimistic: 0.12, // Yearly refund rate
 16:           optimistic: 0.06,
 17:         },
 18:       },
 19:     },
 20:     expert: {
 21:       price: 50, // USD
 22:       conversion: {
 23:         current: 0,
 24:         pessimistic: 0.005,
 25:         optimistic: 0.025,
 26:       },
 27:       refund: {
 28:         yearly: {
 29:           pessimistic: 0.12, // Yearly refund rate
 30:           optimistic: 0.06,
 31:         },
 32:       },
 33:     },
 34:   },
 35:   advertising: 0.04, // USD per MAU
 36:   promotion: 0.03, // USD per MAU
 37:   affiliate: 0.02, // USD per MAU
 38: }
 39: 
 40: function adjustConversionRates(MAU: number) {
 41:   const { subscription } = INCOME_STREAMS
 42:   subscription.pro.conversion.current = Math.min(
 43:     subscription.pro.conversion.pessimistic
 44:     + (MAU / 150000)
 45:     * (subscription.pro.conversion.optimistic - subscription.pro.conversion.pessimistic),
 46:     subscription.pro.conversion.optimistic,
 47:   )
 48: 
 49:   subscription.expert.conversion.current
 50:     = MAU >= 5000
 51:       ? Math.min(
 52:         subscription.expert.conversion.pessimistic
 53:         + (MAU / 100000)
 54:         * (subscription.expert.conversion.optimistic
 55:           - subscription.expert.conversion.pessimistic),
 56:         subscription.expert.conversion.optimistic,
 57:       )
 58:       : 0
 59: }
 60: 
 61: function newMauToCustomers(MAU: number) {
 62:   const { subscription } = INCOME_STREAMS
 63:   let proCustomers = ROUND0(MAU * subscription.pro.conversion.current)
 64:   const expertFromMau = ROUND0(MAU * subscription.expert.conversion.current) // Small percentage directly from MAU
 65:   const proUpgrades = ROUND0(proCustomers * subscription.expert.conversion.current) // Small percentage from Pro users upgrading
 66:   const expertCustomers = expertFromMau + proUpgrades
 67:   proCustomers = proCustomers - proUpgrades
 68:   return { proCustomers, expertCustomers }
 69: }
 70: 
 71: function subscriptionRevenueFromCustomers(proCustomers: number, expertCustomers: number) {
 72:   const { subscription } = INCOME_STREAMS
 73:   const proRevenue = proCustomers * subscription.pro.price
 74:   const expertRevenue = expertCustomers * subscription.expert.price
 75:   return { proRevenue, expertRevenue }
 76: }
 77: 
 78: function calculateAdditionalRevenue(users: { free: number, pro: number, expert: number }) {
 79:   const totalUsers = users.free + users.pro + users.expert
 80:   return {
 81:     advertisingRevenue: {
 82:       total: totalUsers * INCOME_STREAMS.advertising,
 83:       free: users.free * INCOME_STREAMS.advertising,
 84:       pro: users.pro * INCOME_STREAMS.advertising,
 85:       expert: users.expert * INCOME_STREAMS.advertising,
 86:     },
 87:     affiliateRevenue: {
 88:       total: totalUsers * INCOME_STREAMS.affiliate,
 89:       free: users.free * INCOME_STREAMS.affiliate,
 90:       pro: users.pro * INCOME_STREAMS.affiliate,
 91:       expert: users.expert * INCOME_STREAMS.affiliate,
 92:     },
 93:     promotionRevenue: {
 94:       total: totalUsers * INCOME_STREAMS.promotion,
 95:       free: users.free * INCOME_STREAMS.promotion,
 96:       pro: users.pro * INCOME_STREAMS.promotion,
 97:       expert: users.expert * INCOME_STREAMS.promotion,
 98:     },
 99:   }
100: }
101: 
102: interface RevenueParams {
103:   mau: {
104:     total: number
105:     new: number
106:   }
107:   customers: {
108:     pro: number
109:     expert: number
110:   }
111: }
112: 
113: export function calculateRevenue({ mau, customers }: RevenueParams): RevenueResult {
114:   adjustConversionRates(mau.total)
115:   const { subscription } = INCOME_STREAMS
116: 
117:   const { proCustomers, expertCustomers } = newMauToCustomers(mau.new)
118: 
119:   const totalPro = proCustomers + customers.pro
120:   const totalExpert = expertCustomers + customers.expert
121: 
122:   const { proRevenue, expertRevenue } = subscriptionRevenueFromCustomers(totalPro, totalExpert)
123: 
124:   const { advertisingRevenue, affiliateRevenue, promotionRevenue } = calculateAdditionalRevenue({
125:     free: mau.total - totalPro - totalExpert,
126:     pro: totalPro,
127:     expert: totalExpert,
128:   })
129: 
130:   const proExtraRevenue = affiliateRevenue.pro + promotionRevenue.pro + advertisingRevenue.pro
131:   const expertExtraRevenue
132:     = affiliateRevenue.expert + promotionRevenue.expert + advertisingRevenue.expert
133:   const freeExtraRevenue = affiliateRevenue.free + promotionRevenue.free + advertisingRevenue.free
134: 
135:   const proTotalRevenue = proRevenue + proExtraRevenue
136:   const expertTotalRevenue = expertRevenue + expertExtraRevenue
137:   const totalAdditionalRevenue
138:     = advertisingRevenue.total + affiliateRevenue.total + promotionRevenue.total
139:   const totalRevenue = proRevenue + expertRevenue + totalAdditionalRevenue
140: 
141:   return {
142:     total: {
143:       revenue: USD2INR(totalRevenue),
144:       free: USD2INR(freeExtraRevenue),
145:       pro: USD2INR(proTotalRevenue),
146:       expert: USD2INR(expertTotalRevenue),
147:       advertising: USD2INR(advertisingRevenue.total),
148:       affiliate: USD2INR(affiliateRevenue.total),
149:       promotion: USD2INR(promotionRevenue.total),
150:     },
151:     customers: {
152:       free: {
153:         revenue: USD2INR(freeExtraRevenue),
154:         advertising: USD2INR(advertisingRevenue.free),
155:         affiliate: USD2INR(affiliateRevenue.free),
156:         promotion: USD2INR(promotionRevenue.free),
157:       },
158:       pro: {
159:         count: totalPro,
160:         new: proCustomers,
161:         revenue: USD2INR(proRevenue),
162:         price: subscription.pro.price,
163:         conversion: parseFloat((subscription.pro.conversion.current * 100).toFixed(2)),
164:         affiliate: USD2INR(affiliateRevenue.pro),
165:         advertising: USD2INR(advertisingRevenue.pro),
166:         promotion: USD2INR(promotionRevenue.pro),
167:       },
168:       expert: {
169:         count: totalExpert,
170:         new: expertCustomers,
171:         revenue: USD2INR(expertRevenue),
172:         price: subscription.expert.price,
173:         conversion: parseFloat((subscription.expert.conversion.current * 100).toFixed(2)),
174:         advertising: USD2INR(advertisingRevenue.expert),
175:         affiliate: USD2INR(affiliateRevenue.expert),
176:         promotion: USD2INR(promotionRevenue.expert),
177:       },
178:     },
179:   }
180: }
181: 
182: export interface RevenueResult {
183:   total: {
184:     revenue: number
185:     free: number
186:     pro: number
187:     expert: number
188:     advertising: number
189:     affiliate: number
190:     promotion: number
191:   }
192:   customers: {
193:     free: {
194:       revenue: number
195:       advertising: number
196:       affiliate: number
197:       promotion: number
198:     }
199:     pro: {
200:       count: number
201:       new: number
202:       revenue: number
203:       price: number
204:       conversion: number
205:       advertising: number
206:       affiliate: number
207:       promotion: number
208:     }
209:     expert: {
210:       count: number
211:       new: number
212:       revenue: number
213:       price: number
214:       conversion: number
215:       advertising: number
216:       affiliate: number
217:       promotion: number
218:     }
219:   }
220: }
```

## File: apps/admin-dashboard/financials/dev-ops.ts
```typescript
  1: import { USD2INR, ROUND2 } from './helpers'
  2: import { metricConfig } from './totals'
  3: 
  4: const DEVOPS = {
  5:   HOURS_PER_MONTH: 730, // 24 hours * 30 days
  6:   AWS_EC2_COST_PER_HOUR: 0.24, // $0.24 per hour per instance
  7:   AWS_S3_COST_PER_GB: 0.021, // $0.021 per GB
  8:   AWS_DATA_TRANSFER_COST_PER_GB: 0.07, // $0.07 per GB
  9:   EKS_CLUSTER_COST_PER_HOUR: 0.2, // $0.20 per hour for EKS cluster
 10:   PROMETHEUS_GRAFANA_COST_PER_MONTH: 7000, // $7,000 per month
 11:   CLOUD_FLARE_COST_PER_GB: 0.015, // $0.015 per GB
 12: }
 13: 
 14: function calculateEC2Cost(mau: number): number {
 15:   const instancesNeeded = Math.ceil(mau / 5000) // More instances for redundancy
 16:   return instancesNeeded * DEVOPS.AWS_EC2_COST_PER_HOUR * DEVOPS.HOURS_PER_MONTH
 17: }
 18: 
 19: function calculateS3Cost(storageGB: number): number {
 20:   return storageGB * DEVOPS.AWS_S3_COST_PER_GB
 21: }
 22: 
 23: function calculateDataTransferCost(dataTransferGB: number): number {
 24:   return dataTransferGB * DEVOPS.AWS_DATA_TRANSFER_COST_PER_GB
 25: }
 26: 
 27: function calculateEKSCost(mau: number): number {
 28:   const clustersNeeded = Math.ceil(mau / 25000) // More clusters for redundancy
 29:   return clustersNeeded * DEVOPS.EKS_CLUSTER_COST_PER_HOUR * DEVOPS.HOURS_PER_MONTH
 30: }
 31: 
 32: function calculateCloudflareCDNCost(dataTransferGB: number): number {
 33:   return dataTransferGB * DEVOPS.CLOUD_FLARE_COST_PER_GB
 34: }
 35: 
 36: interface DevopsInhouseResult {
 37:   total: number
 38:   efficiencyFactor: number
 39:   ec2Cost: number
 40:   s3Cost: number
 41:   dataTransferCost: number
 42:   eksCost: number
 43:   prometheusGrafanaCost: number
 44:   cloudflareCost: number
 45: }
 46: 
 47: function calculateInHouseCosts(
 48:   mau: number,
 49:   storageGB: number,
 50:   dataTransferGB: number,
 51: ): DevopsInhouseResult {
 52:   const efficiencyFactor = calculateEfficiencyFactor(mau)
 53: 
 54:   const ec2Cost = calculateEC2Cost(mau)
 55:   const s3Cost = calculateS3Cost(storageGB)
 56:   const dataTransferCost = calculateDataTransferCost(dataTransferGB)
 57:   const eksCost = calculateEKSCost(mau)
 58:   const prometheusGrafanaCost = DEVOPS.PROMETHEUS_GRAFANA_COST_PER_MONTH
 59:   const cloudflareCost = calculateCloudflareCDNCost(dataTransferGB)
 60: 
 61:   const total
 62:     = ec2Cost
 63:     + s3Cost
 64:     + dataTransferCost
 65:     + eksCost
 66:     + prometheusGrafanaCost
 67:     + cloudflareCost * efficiencyFactor
 68: 
 69:   return {
 70:     total: USD2INR(total),
 71:     efficiencyFactor: ROUND2(efficiencyFactor),
 72:     ec2Cost: USD2INR(ec2Cost * efficiencyFactor),
 73:     s3Cost: USD2INR(s3Cost * efficiencyFactor),
 74:     dataTransferCost: USD2INR(dataTransferCost * efficiencyFactor),
 75:     eksCost: USD2INR(eksCost * efficiencyFactor),
 76:     prometheusGrafanaCost: USD2INR(prometheusGrafanaCost * efficiencyFactor),
 77:     cloudflareCost: USD2INR(cloudflareCost * efficiencyFactor),
 78:   }
 79: }
 80: 
 81: // extract to main file
 82: function calculateUsageByMAU(mau: number) {
 83:   const avgUserMonthlyHours = calculateDailyUsagePerUser(mau) // Use the previously defined function
 84:   const dataTransferGB = usageByHour.dataTransferGB * avgUserMonthlyHours * mau
 85:   const storageGB = 0.1 * mau // Assume 100 MB per user
 86:   return { avgUserMonthlyHours, dataTransferGB, storageGB }
 87: }
 88: 
 89: // Last Updated 6th July 2024
 90: export const vercelConfig = {
 91:   basePrice: 20,
 92:   dataTransfer: {
 93:     includedGB: 1000, // 1 TB
 94:     pricePerGB: 0.15,
 95:   },
 96:   originTransfer: {
 97:     includedGB: 100,
 98:     pricePerGB: 0.06,
 99:   },
100:   edgeRequests: {
101:     includedRequests: 10_000_000,
102:     pricePerMillion: 2,
103:   },
104:   middlewareInvocations: {
105:     includedInvocations: 1_000_000,
106:     pricePerMillion: 0.65,
107:   },
108:   sourceImages: {
109:     includedImages: 5000,
110:     pricePerThousand: 5,
111:   },
112:   functionInvocations: {
113:     includedInvocations: 1_000_000,
114:     pricePerMillion: 0.6,
115:   },
116:   functionDuration: {
117:     includedGBHours: 1000,
118:     pricePerGBHour: 0.18,
119:   },
120:   edgeFunctionExecutions: {
121:     includedExecutions: 1_000_000,
122:     pricePerMillion: 2,
123:   },
124:   dataCacheReads: {
125:     includedReads: 10_000_000,
126:     pricePerMillion: 0.4,
127:   },
128:   dataCacheWrites: {
129:     includedWrites: 2_000_000,
130:     pricePerMillion: 4,
131:   },
132:   edgeConfigReads: {
133:     includedReads: 1_000_000,
134:     pricePerMillion: 3,
135:   },
136:   edgeConfigWrites: {
137:     includedWrites: 1000,
138:     pricePer500Writes: 5,
139:   },
140:   monitoring: {
141:     baseFee: 10,
142:     pricePerMillionEvents: 9,
143:   },
144:   speedInsights: {
145:     includedDataPoints: 10_000,
146:     pricePer10kEvents: 0.65,
147:   },
148:   webAnalytics: {
149:     includedEvents: 25_000,
150:     pricePer100kEvents: 14,
151:   },
152: }
153: 
154: /**
155:  * Calculate the cost for serverless function executions.
156:  *
157:  * @param {number} memoryInMB - The memory allocated to the function in MB.
158:  * @param {number} invocations - Number of times the function is invoked.
159:  * @param {number} durationInSeconds - Duration of each invocation in seconds.
160:  * @param {number} pricePerGBHour - Cost per GB-hour as specified by the provider.
161:  * @returns {number} - The cost of executions in USD.
162:  */
163: function calculateFunctionCost(
164:   memoryInMB: number,
165:   invocations: number,
166:   durationInSeconds: number,
167:   pricePerGBHour: number,
168: ): number {
169:   // Convert memory from MB to GB
170:   const memoryInGB = memoryInMB / 1024
171: 
172:   // Calculate total seconds of execution
173:   const totalSeconds = invocations * durationInSeconds
174: 
175:   // Convert total execution time to GB-seconds
176:   const totalGBSeconds = memoryInGB * totalSeconds
177: 
178:   // Convert GB-seconds to GB-hours
179:   const totalGBHours = totalGBSeconds / 3600
180: 
181:   // Calculate the cost
182:   const cost = totalGBHours * pricePerGBHour
183: 
184:   return cost
185: }
186: 
187: const usageByHour = {
188:   dataTransferGB: 0.015, // 15 MB per hour per user
189:   originTransferGB: 0.001, // 1 MB per hour per user
190:   edgeRequests: 150, // 150 requests per hour per user
191:   middlewareInvocations: 75, // 75 middleware invocations per hour per user
192:   sourceImages: 0, // Assume no usage, handled by supabase
193:   functionInvocations: 75, // 75 function invocations per hour per user
194:   functionDurationGBHours: 0.025596, // Assuming 360 calls/hour of a 256MB Ram Function (1 every 10 seconds per user)
195:   edgeFunctionExecutions: 75, // 75 edge function executions per hour per user
196:   dataCacheReads: 800, // Adjusted to 800 data cache reads per hour per user
197:   dataCacheWrites: 75, // 75 data cache writes per hour per user
198:   edgeConfigReads: 50, // Adjusted to 50 edge config reads per hour per user
199:   edgeConfigWrites: 0.1, // Adjusted to 0.1 edge config writes per hour per user
200:   monitoringEvents: 0, // Use posthog instead
201:   speedInsightsDataPoints: 0, // Not using
202:   webAnalyticsEvents: 0, // Not using
203: }
204: 
205: type VercelUsageParams = {
206:   efficiencyFactor: number
207:   avgUserMonthlyHours: number
208:   dataTransferGB: number
209:   originTransferGB: number
210:   edgeRequests: number
211:   middlewareInvocations: number
212:   sourceImages: number
213:   functionInvocations: number
214:   functionDurationGBHours: number
215:   edgeFunctionExecutions: number
216:   dataCacheReads: number
217:   dataCacheWrites: number
218:   edgeConfigReads: number
219:   edgeConfigWrites: number
220:   monitoringEvents: number
221:   speedInsightsDataPoints: number
222:   webAnalyticsEvents: number
223: }
224: 
225: interface VercelResult {
226:   total: number
227:   efficiencyFactor: number
228:   avgUserMonthlyHours: number
229:   breakdown: {
230:     base: number
231:     dataTransfer: number
232:     originTransfer: number
233:     edgeRequests: number
234:     middlewareInvocations: number
235:     sourceImages: number
236:     functionInvocations: number
237:     functionDuration: number
238:     edgeFunctionExecutions: number
239:     dataCacheReads: number
240:     dataCacheWrites: number
241:     edgeConfigReads: number
242:     edgeConfigWrites: number
243:     monitoring: number
244:     speedInsights: number
245:     webAnalytics: number
246:   }
247: }
248: 
249: function calculateEfficiencyFactor(mau: number) {
250:   const baseMAU = 1000
251:   const logBase10 = Math.log(10)
252:   const efficiencyLog = Math.log(mau / baseMAU) / logBase10
253:   const efficiencyFactor = 1 - 0.1 * efficiencyLog // Adjust 0.1 to fine-tune efficiency improvement
254: 
255:   return efficiencyFactor
256: }
257: 
258: function calculateDailyUsagePerUser(mau: number) {
259:   const additionalHours = (mau / 5000) * metricConfig.PROJECTION.USAGE_GROWTH_FACTOR
260:   const dailyUsage = metricConfig.PROJECTION.USAGE_HOURS_PER_DAY + additionalHours
261:   return Math.min(dailyUsage, metricConfig.PROJECTION.MAX_DAILY_USAGE) * 30
262: }
263: 
264: function calculateVercelUsage(mau: number): VercelUsageParams {
265:   const efficiencyFactor = calculateEfficiencyFactor(mau)
266:   const avgUserMonthlyHours = calculateDailyUsagePerUser(mau)
267: 
268:   const calcTotal = (usage: number) => usage * avgUserMonthlyHours * mau * efficiencyFactor
269: 
270:   const invocationsPerMonthPerUser = (0.08 * avgUserMonthlyHours * 3600) / (0.256 * 1)
271:   console.log(
272:     `Estimated Function Invocations per Month per User: ${invocationsPerMonthPerUser} in Hours: ${avgUserMonthlyHours}`,
273:   )
274: 
275:   return {
276:     efficiencyFactor: ROUND2(efficiencyFactor),
277:     avgUserMonthlyHours,
278:     dataTransferGB: calcTotal(usageByHour.dataTransferGB),
279:     originTransferGB: calcTotal(usageByHour.originTransferGB),
280:     edgeRequests: calcTotal(usageByHour.edgeRequests),
281:     middlewareInvocations: calcTotal(usageByHour.middlewareInvocations),
282:     sourceImages: calcTotal(usageByHour.sourceImages),
283:     functionInvocations: calcTotal(usageByHour.functionInvocations),
284:     functionDurationGBHours: calcTotal(usageByHour.functionDurationGBHours),
285:     edgeFunctionExecutions: calcTotal(usageByHour.edgeFunctionExecutions),
286:     dataCacheReads: calcTotal(usageByHour.dataCacheReads),
287:     dataCacheWrites: calcTotal(usageByHour.dataCacheWrites),
288:     edgeConfigReads: calcTotal(usageByHour.edgeConfigReads),
289:     edgeConfigWrites: calcTotal(usageByHour.edgeConfigWrites),
290:     monitoringEvents: calcTotal(usageByHour.monitoringEvents),
291:     speedInsightsDataPoints: calcTotal(usageByHour.speedInsightsDataPoints),
292:     webAnalyticsEvents: calcTotal(usageByHour.webAnalyticsEvents),
293:   }
294: }
295: 
296: function calculateVercelCost(params: VercelUsageParams): VercelResult {
297:   const {
298:     efficiencyFactor,
299:     avgUserMonthlyHours,
300:     dataTransferGB,
301:     originTransferGB,
302:     edgeRequests,
303:     middlewareInvocations,
304:     sourceImages,
305:     functionInvocations,
306:     functionDurationGBHours,
307:     edgeFunctionExecutions,
308:     dataCacheReads,
309:     dataCacheWrites,
310:     edgeConfigReads,
311:     edgeConfigWrites,
312:     monitoringEvents,
313:     speedInsightsDataPoints,
314:     webAnalyticsEvents,
315:   } = params
316: 
317:   const {
318:     basePrice,
319:     dataTransfer,
320:     originTransfer,
321:     edgeRequests: edgeReq,
322:     middlewareInvocations: midInvocations,
323:     sourceImages: srcImages,
324:     functionInvocations: funcInvocations,
325:     functionDuration: funcDuration,
326:     edgeFunctionExecutions: edgeExec,
327:     dataCacheReads: cacheReads,
328:     dataCacheWrites: cacheWrites,
329:     edgeConfigReads: configReads,
330:     edgeConfigWrites: configWrites,
331:     monitoring,
332:     speedInsights,
333:     webAnalytics,
334:   } = vercelConfig
335: 
336:   const dataTransferCost
337:     = dataTransferGB > dataTransfer.includedGB
338:       ? (dataTransferGB - dataTransfer.includedGB) * dataTransfer.pricePerGB
339:       : 0
340: 
341:   const originTransferCost
342:     = originTransferGB > originTransfer.includedGB
343:       ? (originTransferGB - originTransfer.includedGB) * originTransfer.pricePerGB
344:       : 0
345: 
346:   const edgeRequestsCost
347:     = edgeRequests > edgeReq.includedRequests
348:       ? ((edgeRequests - edgeReq.includedRequests) / 1_000_000) * edgeReq.pricePerMillion
349:       : 0
350: 
351:   const middlewareInvocationsCost
352:     = middlewareInvocations > midInvocations.includedInvocations
353:       ? ((middlewareInvocations - midInvocations.includedInvocations) / 1_000_000)
354:       * midInvocations.pricePerMillion
355:       : 0
356: 
357:   const sourceImagesCost
358:     = sourceImages > srcImages.includedImages
359:       ? ((sourceImages - srcImages.includedImages) / 1_000) * srcImages.pricePerThousand
360:       : 0
361: 
362:   const functionInvocationsCost
363:     = functionInvocations > funcInvocations.includedInvocations
364:       ? ((functionInvocations - funcInvocations.includedInvocations) / 1_000_000)
365:       * funcInvocations.pricePerMillion
366:       : 0
367: 
368:   const functionDurationCost
369:     = functionDurationGBHours > funcDuration.includedGBHours
370:       ? (functionDurationGBHours - funcDuration.includedGBHours) * funcDuration.pricePerGBHour
371:       : 0
372: 
373:   const edgeFunctionExecutionsCost
374:     = edgeFunctionExecutions > edgeExec.includedExecutions
375:       ? ((edgeFunctionExecutions - edgeExec.includedExecutions) / 1_000_000)
376:       * edgeExec.pricePerMillion
377:       : 0
378: 
379:   const dataCacheReadsCost
380:     = dataCacheReads > cacheReads.includedReads
381:       ? ((dataCacheReads - cacheReads.includedReads) / 1_000_000) * cacheReads.pricePerMillion
382:       : 0
383: 
384:   const dataCacheWritesCost
385:     = dataCacheWrites > cacheWrites.includedWrites
386:       ? ((dataCacheWrites - cacheWrites.includedWrites) / 1_000_000) * cacheWrites.pricePerMillion
387:       : 0
388: 
389:   const edgeConfigReadsCost
390:     = edgeConfigReads > configReads.includedReads
391:       ? ((edgeConfigReads - configReads.includedReads) / 1_000_000) * configReads.pricePerMillion
392:       : 0
393: 
394:   const edgeConfigWritesCost
395:     = edgeConfigWrites > configWrites.includedWrites
396:       ? ((edgeConfigWrites - configWrites.includedWrites) / 500) * configWrites.pricePer500Writes
397:       : 0
398: 
399:   const monitoringCost
400:     = monitoringEvents > 0
401:       ? monitoring.baseFee + (monitoringEvents / 1_000_000) * monitoring.pricePerMillionEvents
402:       : 0
403: 
404:   const speedInsightsCost
405:     = speedInsightsDataPoints > speedInsights.includedDataPoints
406:       ? ((speedInsightsDataPoints - speedInsights.includedDataPoints) / 10_000)
407:       * speedInsights.pricePer10kEvents
408:       : 0
409: 
410:   const webAnalyticsCost
411:     = webAnalyticsEvents > webAnalytics.includedEvents
412:       ? ((webAnalyticsEvents - webAnalytics.includedEvents) / 100_000)
413:       * webAnalytics.pricePer100kEvents
414:       : 0
415: 
416:   const totalCost
417:     = basePrice
418:     + dataTransferCost
419:     + originTransferCost
420:     + edgeRequestsCost
421:     + middlewareInvocationsCost
422:     + sourceImagesCost
423:     + functionInvocationsCost
424:     + functionDurationCost
425:     + edgeFunctionExecutionsCost
426:     + dataCacheReadsCost
427:     + dataCacheWritesCost
428:     + edgeConfigReadsCost
429:     + edgeConfigWritesCost
430:     + monitoringCost
431:     + speedInsightsCost
432:     + webAnalyticsCost
433: 
434:   return {
435:     total: USD2INR(totalCost),
436:     efficiencyFactor,
437:     avgUserMonthlyHours,
438:     breakdown: {
439:       base: USD2INR(basePrice),
440:       dataTransfer: USD2INR(dataTransferCost),
441:       originTransfer: USD2INR(originTransferCost),
442:       edgeRequests: USD2INR(edgeRequestsCost),
443:       middlewareInvocations: USD2INR(middlewareInvocationsCost),
444:       sourceImages: USD2INR(sourceImagesCost),
445:       functionInvocations: USD2INR(functionInvocationsCost),
446:       functionDuration: USD2INR(functionDurationCost),
447:       edgeFunctionExecutions: USD2INR(edgeFunctionExecutionsCost),
448:       dataCacheReads: USD2INR(dataCacheReadsCost),
449:       dataCacheWrites: USD2INR(dataCacheWritesCost),
450:       edgeConfigReads: USD2INR(edgeConfigReadsCost),
451:       edgeConfigWrites: USD2INR(edgeConfigWritesCost),
452:       monitoring: USD2INR(monitoringCost),
453:       speedInsights: USD2INR(speedInsightsCost),
454:       webAnalytics: USD2INR(webAnalyticsCost),
455:     },
456:   }
457: }
458: 
459: export interface DevopsResult {
460:   vercel: {
461:     cost: VercelResult
462:     usage: VercelUsageParams
463:   }
464:   inhouse: {
465:     cost: DevopsInhouseResult
466:     usage: {
467:       dataTransferGB: number
468:       storageGB: number
469:     }
470:   }
471: }
472: 
473: export function calculateDevopsCosts(mau: number): DevopsResult {
474:   const { dataTransferGB, storageGB } = calculateUsageByMAU(mau)
475:   const vercelUsage = calculateVercelUsage(mau)
476:   return {
477:     vercel: {
478:       cost: calculateVercelCost(vercelUsage),
479:       usage: vercelUsage,
480:     },
481:     inhouse: {
482:       cost: calculateInHouseCosts(mau, storageGB, dataTransferGB),
483:       usage: { dataTransferGB, storageGB },
484:     },
485:   }
486: }
487: 
488: type Summary = {
489:   name: string
490:   value: number | string
491: }
492: 
493: export interface DevOpsSummaries {
494:   vercel: Summary[]
495:   vercelPricing: Summary[]
496:   inhouse: Summary[]
497: }
498: 
499: export function generateDevOpsSummaries() {
500:   const configSummaries = {
501:     vercel: [] as Summary[],
502:     vercelPricing: [] as Summary[],
503:     inhouse: [] as Summary[],
504:   }
505: 
506:   const addConfigSummary = (config: any, group: 'vercel' | 'vercelPricing' | 'inhouse') => {
507:     for (const [key, value] of Object.entries(config)) {
508:       if (typeof value === 'object' && value !== null) {
509:         configSummaries[group].push({ name: key, value: JSON.stringify(value) })
510:       } else {
511:         configSummaries[group].push({ name: key, value: Number(value) })
512:       }
513:     }
514:   }
515: 
516:   addConfigSummary(vercelConfig, 'vercelPricing')
517:   addConfigSummary(usageByHour, 'vercel')
518: 
519:   const {
520:     AWS_DATA_TRANSFER_COST_PER_GB,
521:     AWS_EC2_COST_PER_HOUR,
522:     AWS_S3_COST_PER_GB,
523:     CLOUD_FLARE_COST_PER_GB,
524:     EKS_CLUSTER_COST_PER_HOUR,
525:     HOURS_PER_MONTH,
526:     PROMETHEUS_GRAFANA_COST_PER_MONTH,
527:   } = DEVOPS
528: 
529:   addConfigSummary(
530:     {
531:       HOURS_PER_MONTH,
532:       AWS_EC2_COST_PER_HOUR,
533:       AWS_S3_COST_PER_GB,
534:       AWS_DATA_TRANSFER_COST_PER_GB,
535:       EKS_CLUSTER_COST_PER_HOUR,
536:       PROMETHEUS_GRAFANA_COST_PER_MONTH,
537:       CLOUD_FLARE_COST_PER_GB,
538:     },
539:     'inhouse',
540:   )
541: 
542:   return configSummaries
543: }
```

## File: apps/admin-dashboard/financials/digital-ocean.ts
```typescript
 1: import { USD2INR } from './helpers'
 2: 
 3: type DOPlan = '1vcpu-1gb' | '2vcpu-2gb' | '4vcpu-8gb' | '8vcpu-16gb' | '16vcpu-32gb'
 4: 
 5: export const digitalOceanConfig = {
 6:   plans: {
 7:     '1vcpu-1gb': {
 8:       monthlyCost: 12.0,
 9:       ram: '1 GB',
10:       vCPU: 1,
11:       bandwidthGB: 150,
12:     },
13:     '2vcpu-2gb': {
14:       monthlyCost: 24.0,
15:       ram: '2 GB',
16:       vCPU: 2,
17:       bandwidthGB: 200,
18:     },
19:     '4vcpu-8gb': {
20:       monthlyCost: 48.0,
21:       ram: '8 GB',
22:       vCPU: 4,
23:       bandwidthGB: 300,
24:     },
25:     '8vcpu-16gb': {
26:       monthlyCost: 96.0,
27:       ram: '16 GB',
28:       vCPU: 8,
29:       bandwidthGB: 500,
30:     },
31:     '16vcpu-32gb': {
32:       monthlyCost: 192.0,
33:       ram: '32 GB',
34:       vCPU: 16,
35:       bandwidthGB: 1000,
36:     },
37:   },
38: }
39: 
40: type DigitalOceanCostParams = {
41:   bandwidthGB: number
42: }
43: 
44: export interface DigitalOceanResult {
45:   plan: DOPlan
46:   cost: number
47:   ram: string
48:   vCPU: number
49:   bandwidthGB: number
50: }
51: 
52: function calculatePlan(bandwidthGB: number): DOPlan {
53:   if (bandwidthGB <= 200) {
54:     return '2vcpu-2gb'
55:   } else if (bandwidthGB <= 300) {
56:     return '4vcpu-8gb'
57:   } else if (bandwidthGB <= 500) {
58:     return '8vcpu-16gb'
59:   } else {
60:     return '16vcpu-32gb'
61:   }
62: }
63: 
64: export function calculateDigitalOceanCost(params: DigitalOceanCostParams): DigitalOceanResult {
65:   const plan = calculatePlan(params.bandwidthGB || 150)
66:   console.log('digital ocean storage: ', params.bandwidthGB, plan)
67:   const planDetails = digitalOceanConfig.plans[plan]
68: 
69:   if (!planDetails) {
70:     throw new Error('Unsupported Digital Ocean plan')
71:   }
72: 
73:   return {
74:     plan,
75:     cost: USD2INR(planDetails.monthlyCost),
76:     ram: planDetails.ram,
77:     vCPU: planDetails.vCPU,
78:     bandwidthGB: planDetails.bandwidthGB,
79:   }
80: }
```

## File: apps/admin-dashboard/financials/employee.ts
```typescript
  1: import { USD2INR, ROUND0 } from './helpers'
  2: 
  3: const BASE_EMPLOYEE_COUNT = {
  4:   support: 0,
  5:   core: 0,
  6:   experts: 3,
  7:   founders: 2,
  8: }
  9: 
 10: export const EMPLOYEE_CONFIG = {
 11:   start: {
 12:     support: {
 13:       salary: 10_000,
 14:     },
 15:     core: {
 16:       salary: 10_000,
 17:     },
 18:     experts: {
 19:       salary: 25_000,
 20:     },
 21:     founders: {
 22:       salary: 25_000,
 23:     },
 24:   },
 25:   growth: {
 26:     support: {
 27:       salary: 15_000,
 28:     },
 29:     core: {
 30:       salary: 24_000,
 31:     },
 32:     experts: {
 33:       salary: 40_000,
 34:     },
 35:     founders: {
 36:       salary: 50_000,
 37:     },
 38:   },
 39:   scaling: {
 40:     support: {
 41:       salary: 20_000,
 42:     },
 43:     core: {
 44:       salary: 36_000,
 45:     },
 46:     experts: {
 47:       salary: 50_000,
 48:     },
 49:     founders: {
 50:       salary: 120_000,
 51:     },
 52:   },
 53:   secure: {
 54:     support: {
 55:       salary: 30_000,
 56:     },
 57:     core: {
 58:       salary: 50_000,
 59:     },
 60:     experts: {
 61:       salary: 100_000,
 62:     },
 63:     founders: {
 64:       salary: 400_000,
 65:     },
 66:   },
 67: }
 68: 
 69: const EMPLOYEE_EXTRAS = {
 70:   recruitment: 500,
 71:   turnover: 1000,
 72:   legal: 1000,
 73:   technology: 1000,
 74: }
 75: 
 76: // Function to calculate benefits as a percentage of salary
 77: function calculateBenefits(salary: number, employeeCount: number): number {
 78:   if (employeeCount <= 10) return 0
 79:   return salary * 0.15 // Assuming 15% of salary as benefits
 80: }
 81: 
 82: // Function to calculate legal fees based on number of employees
 83: function calculateLegalFees(employeeCount: number): number {
 84:   const baseLegalFee = EMPLOYEE_EXTRAS.legal
 85:   return baseLegalFee * employeeCount
 86: }
 87: 
 88: // Function to calculate turnover costs
 89: function calculateTurnoverCosts(employeeCount: number): number {
 90:   const baseTurnoverCost = EMPLOYEE_EXTRAS.turnover
 91:   const industryAverageAttrition = 0.15 // 15% annual attrition rate
 92:   return baseTurnoverCost * employeeCount * industryAverageAttrition
 93: }
 94: 
 95: type EmployeeType = 'support' | 'core' | 'experts' | 'founders'
 96: 
 97: export type EmployeeConfig = {
 98:   employeeCount: number
 99:   total: number
100:   totalSalary: number
101:   totalExtras: number
102:   salary: number
103:   benefits: number
104:   turnover: number
105:   legal: number
106:   recruitment: number
107:   technology: number
108:   mauRatio?: number
109: }
110: 
111: interface EmployeeCostParams {
112:   mau: number
113:   stage: keyof typeof EMPLOYEE_CONFIG
114:   month: number
115:   bootstrapMonths: number
116: }
117: 
118: export function calculateEmployeeCost({
119:   mau,
120:   stage,
121:   month,
122:   bootstrapMonths,
123: }: EmployeeCostParams): EmployeeResult {
124:   const baseCount = BASE_EMPLOYEE_COUNT
125:   const stageConfig = EMPLOYEE_CONFIG[stage]
126: 
127:   if (month < bootstrapMonths) {
128:     // Return base employees and their expenses during bootstrap months
129:     const calculateBaseCost = (count: number, salary: number) => {
130:       const totalSalary = count * salary
131:       const legal = calculateLegalFees(count)
132:       const technology = EMPLOYEE_EXTRAS.technology * count
133:       const totalExtras = legal + technology
134: 
135:       return {
136:         employeeCount: count,
137:         total: totalSalary + totalExtras,
138:         totalSalary,
139:         totalExtras,
140:         salary,
141:         turnover: 0,
142:         legal: legal / count,
143:         benefits: 0,
144:         recruitment: 0,
145:         technology: technology / count,
146:         mauRatio: undefined,
147:       }
148:     }
149: 
150:     const experts = calculateBaseCost(baseCount.experts, stageConfig.experts.salary)
151:     const founders = calculateBaseCost(baseCount.founders, stageConfig.founders.salary)
152: 
153:     const totalCost = experts.total + founders.total
154:     const totalEmployees = baseCount.experts + baseCount.founders
155: 
156:     return {
157:       totalCost,
158:       efficiency: 0,
159:       totalCount: totalEmployees,
160:       support: calculateBaseCost(0, stageConfig.support.salary),
161:       core: calculateBaseCost(0, stageConfig.core.salary),
162:       experts,
163:       founders,
164:     }
165:   }
166: 
167:   const efficiency = (mau / 1000) * 0.01
168:   const supportRatio = 7000 + 2500 * efficiency
169:   const coreRatio = 8500 + 5000 * efficiency
170:   const expertsRatio = 15000 + 10000 * efficiency
171: 
172:   const supportCount = baseCount.support + Math.round(mau / supportRatio)
173:   const coreCount = baseCount.core + Math.round(mau / coreRatio)
174:   const expertsCount = baseCount.experts + Math.round(mau / expertsRatio)
175:   const totalEmployees = supportCount + coreCount + expertsCount + baseCount.founders
176: 
177:   const calculateCost = (count: number, salary: number, mauRatio?: number) => {
178:     const totalSalary = count * salary
179:     const benefits = calculateBenefits(salary, totalEmployees)
180:     const legal = calculateLegalFees(count)
181:     const turnover = calculateTurnoverCosts(count)
182:     const recruitment = EMPLOYEE_EXTRAS.recruitment * count
183:     const technology = EMPLOYEE_EXTRAS.technology * count
184:     const totalExtras = turnover + legal + recruitment + technology + benefits * count
185: 
186:     return {
187:       employeeCount: count,
188:       total: totalSalary + totalExtras,
189:       totalSalary,
190:       totalExtras,
191:       salary,
192:       turnover: turnover / count,
193:       legal: legal / count,
194:       benefits: benefits,
195:       recruitment: recruitment / count,
196:       technology: technology / count,
197:       mauRatio,
198:     }
199:   }
200: 
201:   const support = calculateCost(supportCount, stageConfig.support.salary, supportRatio)
202:   const core = calculateCost(coreCount, stageConfig.core.salary, coreRatio)
203:   const experts = calculateCost(expertsCount, stageConfig.experts.salary, expertsRatio)
204:   const founders = calculateCost(baseCount.founders, stageConfig.founders.salary)
205: 
206:   const totalCost = support.total + core.total + experts.total + founders.total
207: 
208:   return {
209:     totalCost,
210:     efficiency,
211:     totalCount: totalEmployees,
212:     support,
213:     core,
214:     experts,
215:     founders,
216:   }
217: }
218: 
219: export type EmployeeResult = {
220:   totalCost: number
221:   totalCount: number
222:   efficiency: number
223:   support: EmployeeConfig
224:   core: EmployeeConfig
225:   experts: EmployeeConfig
226:   founders: EmployeeConfig
227: }
```

## File: apps/admin-dashboard/financials/gen-info.ts
```typescript
 1: import { generateDevOpsSummaries, type DevOpsSummaries } from './dev-ops'
 2: 
 3: export interface InfoResult {
 4:   devops: DevOpsSummaries
 5: }
 6: 
 7: export function generateInfo() {
 8:   const devOpsSummaries = generateDevOpsSummaries()
 9: 
10:   return {
11:     devops: devOpsSummaries,
12:   }
13: }
```

## File: apps/admin-dashboard/financials/gpt.ts
```typescript
  1: import { request } from 'http'
  2: import type { ProcessdContentConfig, StageConfig } from './totals'
  3: import { USD2INR } from './helpers'
  4: 
  5: type EmbeddingModel = 'text-embedding-3-small' | 'text-embedding-3-large'
  6: 
  7: type ChatModel = 'gpt-4o' | 'gpt-4o-mini' | 'gpt-3.5-turbo-0125'
  8: 
  9: const PERCENTAGE_MAU_USING_CHAT = 0.5 // 50%
 10: const AVG_FREE_REQUESTS_PER_USER = 50
 11: const PRO_REQUESTS_CAP = 150
 12: const EXPERT_REQUESTS_CAP = 300
 13: 
 14: interface CostConfig {
 15:   embedding: Record<EmbeddingModel, Record<'live' | 'batch', number>>
 16:   chat: Record<ChatModel, Record<'live' | 'batch', { input: number, output: number }>>
 17: }
 18: 
 19: // groq for free
 20: interface GroqModelConfig {
 21:   id: string
 22:   requestsPerMinute: number
 23:   requestsPerDay: number
 24:   tokensPerMinute: number
 25: }
 26: 
 27: const GROQ_MODELS: Record<string, GroqModelConfig> = {
 28:   gemma7b: {
 29:     id: 'gemma-7b-it',
 30:     requestsPerMinute: 30,
 31:     requestsPerDay: 14400,
 32:     tokensPerMinute: 15000,
 33:   },
 34:   gemma29b: {
 35:     id: 'gemma2-9b-it',
 36:     requestsPerMinute: 30,
 37:     requestsPerDay: 14400,
 38:     tokensPerMinute: 15000,
 39:   },
 40:   llama70b: {
 41:     id: 'llama3-70b-8192',
 42:     requestsPerMinute: 30,
 43:     requestsPerDay: 14400,
 44:     tokensPerMinute: 6000,
 45:   },
 46:   llama8b: {
 47:     id: 'llama3-8b-8192',
 48:     requestsPerMinute: 30,
 49:     requestsPerDay: 14400,
 50:     tokensPerMinute: 30000,
 51:   },
 52:   llama70bPreview: {
 53:     id: 'llama3-groq-70b-8192-tool-use-preview',
 54:     requestsPerMinute: 30,
 55:     requestsPerDay: 14400,
 56:     tokensPerMinute: 15000,
 57:   },
 58:   llama8bPreview: {
 59:     id: 'llama3-groq-8b-8192-tool-use-preview',
 60:     requestsPerMinute: 30,
 61:     requestsPerDay: 14400,
 62:     tokensPerMinute: 15000,
 63:   },
 64:   mixtral8x7b: {
 65:     id: 'mixtral-8x7b-32768',
 66:     requestsPerMinute: 30,
 67:     requestsPerDay: 14400,
 68:     tokensPerMinute: 5000,
 69:   },
 70: }
 71: 
 72: const FREE_MODEL = GROQ_MODELS.llama70b
 73: 
 74: function calculateHourlyRate(
 75:   numItems: number,
 76:   totalTokens: number,
 77: ): { requestsPerHour: number[], tokensPerHour: number[] } {
 78:   const daysInMonth = 30.5
 79:   const hoursPerDay = 24
 80:   const quarters = [
 81:     { hours: 6, distribution: 0.1 }, // First 6 hours: 10% of traffic
 82:     { hours: 6, distribution: 0.2 }, // Next 6 hours: 20% of traffic
 83:     { hours: 6, distribution: 0.3 }, // Next 6 hours: 30% of traffic
 84:     { hours: 6, distribution: 0.4 }, // Last 6 hours: 40% of traffic
 85:   ]
 86: 
 87:   const requestsPerHour = new Array(hoursPerDay).fill(0)
 88:   const tokensPerHour = new Array(hoursPerDay).fill(0)
 89:   let currentHour = 0
 90: 
 91:   quarters.forEach((quarter) => {
 92:     const requestsThisQuarter = (numItems / daysInMonth) * quarter.distribution // Requests for this quarter per day
 93:     const tokensThisQuarter = (totalTokens / daysInMonth) * quarter.distribution // Tokens for this quarter per day
 94:     const requestsPerHourThisQuarter = requestsThisQuarter / quarter.hours // Average per hour in this quarter
 95:     const tokensPerHourThisQuarter = tokensThisQuarter / quarter.hours // Average per hour in this quarter
 96: 
 97:     for (let i = 0; i < quarter.hours; i++) {
 98:       requestsPerHour[currentHour] = requestsPerHourThisQuarter
 99:       tokensPerHour[currentHour] = tokensPerHourThisQuarter
100:       currentHour++
101:     }
102:   })
103: 
104:   return {
105:     requestsPerHour: requestsPerHour,
106:     tokensPerHour: tokensPerHour,
107:   }
108: }
109: 
110: function determineGroqModel(
111:   hourlyRates: { requestsPerHour: number[], tokensPerHour: number[] },
112:   currentModel: GroqModelConfig = GROQ_MODELS.llama70b,
113: ): GroqModelConfig {
114:   const models = Object.values(GROQ_MODELS) // Convert model object to array for easier processing
115: 
116:   // Find the peak rates for the entire day
117:   const peakRequestsPerHour = Math.max(...hourlyRates.requestsPerHour)
118:   const peakTokensPerHour = Math.max(...hourlyRates.tokensPerHour)
119: 
120:   // Find a model that can handle the peak hourly request and token rates
121:   const suitableModel = models.find(
122:     (model) =>
123:       model.requestsPerMinute * 60 >= peakRequestsPerHour
124:       && model.tokensPerMinute * 60 >= peakTokensPerHour,
125:   )
126: 
127:   return suitableModel || currentModel // Return the found model or default back to the current if none found
128: }
129: 
130: // END FREE
131: 
132: export const COST_CONFIG: CostConfig = {
133:   embedding: {
134:     'text-embedding-3-small': {
135:       live: 0.02,
136:       batch: 0.01,
137:     },
138:     'text-embedding-3-large': {
139:       live: 0.13,
140:       batch: 0.07,
141:     },
142:   },
143:   chat: {
144:     'gpt-4o': {
145:       live: {
146:         input: 5.0,
147:         output: 15.0,
148:       },
149:       batch: {
150:         input: 2.5,
151:         output: 7.5,
152:       },
153:     },
154:     'gpt-4o-mini': {
155:       live: {
156:         input: 0.15,
157:         output: 0.6,
158:       },
159:       batch: {
160:         input: 0.075,
161:         output: 0.3,
162:       },
163:     },
164:     'gpt-3.5-turbo-0125': {
165:       live: {
166:         input: 0.5,
167:         output: 1.5,
168:       },
169:       batch: {
170:         input: 0.25,
171:         output: 0.75,
172:       },
173:     },
174:   },
175: }
176: 
177: type CostParams = {
178:   numItems: number
179:   charsPerItem: number
180:   charsForPrompt?: number
181:   charsPerOutput?: number
182:   modelType: EmbeddingModel | ChatModel
183:   costType: 'live' | 'batch'
184:   taskType: 'embedding' | 'chat' | 'summary'
185:   isPremium: boolean
186: }
187: 
188: const CHARS_PER_TOKEN = 4
189: function calculateTokens(chars: number): number {
190:   return chars / CHARS_PER_TOKEN
191: }
192: 
193: function calculateCostPerMillionTokens(tokens: number, pricePerMillionTokens: number): number {
194:   return (tokens / 1_000_000) * pricePerMillionTokens
195: }
196: 
197: function calculateEmbeddingCost(params: CostParams): {
198:   total: number
199:   tokens: { total: number }
200: } {
201:   const { numItems, charsPerItem, modelType, costType } = params
202:   const totalTokens = numItems * calculateTokens(charsPerItem)
203:   const pricePerMillionTokens = COST_CONFIG.embedding[modelType as EmbeddingModel][costType]
204:   const totalCostUSD = calculateCostPerMillionTokens(totalTokens, pricePerMillionTokens)
205:   return {
206:     total: USD2INR(totalCostUSD),
207:     tokens: { total: totalTokens },
208:   }
209: }
210: 
211: function calculateTotalChatCost(params: CostParams): {
212:   cost: {
213:     total: number
214:     input: number
215:     output: number
216:   }
217:   tokens: {
218:     total: number
219:     input: number
220:     inputCPM: number
221:     output: number
222:     outputCPM: number
223:   }
224: } {
225:   const {
226:     numItems,
227:     charsPerItem,
228:     charsForPrompt = 0,
229:     charsPerOutput = 0,
230:     modelType,
231:     costType,
232:     isPremium,
233:   } = params
234:   const totalInputTokens = numItems * calculateTokens(charsPerItem + charsForPrompt)
235:   const totalOutputTokens = numItems * calculateTokens(charsPerOutput)
236: 
237:   if (isPremium) {
238:     // Premium users use a different costing model potentially
239:     const pricePerMillionInputTokens = COST_CONFIG.chat[modelType as ChatModel][costType].input
240:     const pricePerMillionOutputTokens = COST_CONFIG.chat[modelType as ChatModel][costType].output
241: 
242:     const inputCost = calculateCostPerMillionTokens(totalInputTokens, pricePerMillionInputTokens)
243:     const outputCost = calculateCostPerMillionTokens(totalOutputTokens, pricePerMillionOutputTokens)
244: 
245:     return {
246:       cost: {
247:         total: USD2INR(inputCost + outputCost),
248:         input: USD2INR(inputCost),
249:         output: USD2INR(outputCost),
250:       },
251:       tokens: {
252:         total: totalInputTokens + totalOutputTokens,
253:         inputCPM: USD2INR(pricePerMillionInputTokens),
254:         input: totalInputTokens,
255:         outputCPM: USD2INR(pricePerMillionOutputTokens),
256:         output: totalOutputTokens,
257:       },
258:     }
259:   } else {
260:     // Free users utilize Groq models
261:     // Implement logic to calculate the hourly request and token rate
262:     const hourlyRate = calculateHourlyRate(numItems, totalInputTokens + totalOutputTokens)
263:     const currentGroqModel = determineGroqModel(hourlyRate)
264: 
265:     // Mock calculation assuming free model has no cost in monetary terms but has other limits
266:     return {
267:       cost: {
268:         total: 0,
269:         input: 0,
270:         output: 0,
271:       },
272:       tokens: {
273:         total: totalInputTokens + totalOutputTokens,
274:         inputCPM: 0,
275:         input: totalInputTokens,
276:         outputCPM: 0,
277:         output: totalOutputTokens,
278:       },
279:     }
280:   }
281: }
282: 
283: function calculateTotalCost(params: CostParams): any {
284:   if (params.taskType === 'embedding') {
285:     return calculateEmbeddingCost(params)
286:   } else if (params.taskType === 'chat') {
287:     return calculateTotalChatCost(params)
288:   } else if (params.taskType === 'summary') {
289:     return calculateTotalChatCost(params)
290:   } else {
291:     throw new Error('Unsupported task type')
292:   }
293: }
294: 
295: export interface ChatGPTResult {
296:   totalCost: number
297:   totalTokens: number
298:   free: {
299:     cost: {
300:       total: number
301:       input: number
302:       output: number
303:     }
304:     tokens: {
305:       total: number
306:       input: number
307:       inputCPM: number
308:       output: number
309:       outputCPM: number
310:     }
311:     model: ChatModel
312:     requests: number
313:   }
314:   pro: {
315:     cost: {
316:       total: number
317:       input: number
318:       output: number
319:     }
320:     tokens: {
321:       total: number
322:       input: number
323:       inputCPM: number
324:       output: number
325:       outputCPM: number
326:     }
327:     model: ChatModel
328:     requests: number
329:   }
330:   expert: {
331:     cost: {
332:       total: number
333:       input: number
334:       output: number
335:     }
336:     tokens: {
337:       total: number
338:       input: number
339:       inputCPM: number
340:       output: number
341:       outputCPM: number
342:     }
343:     model: ChatModel
344:     requests: number
345:   }
346: }
347: 
348: function calculateChatGPTUsageCost(
349:   freeUsers: number,
350:   customers: { pro: number, expert: number },
351: ): ChatGPTResult {
352:   const totalMauUsingChatGPT = Math.floor(freeUsers * PERCENTAGE_MAU_USING_CHAT)
353:   const totalFreeRequests = totalMauUsingChatGPT * AVG_FREE_REQUESTS_PER_USER
354:   const totalExpertRequests = customers.expert * EXPERT_REQUESTS_CAP
355:   const totalProRequests = customers.pro * PRO_REQUESTS_CAP
356: 
357:   const freeModel: ChatModel = 'gpt-3.5-turbo-0125'
358:   const premiumModel: ChatModel = 'gpt-4o-mini'
359: 
360:   const freeCost = calculateTotalChatCost({
361:     numItems: totalFreeRequests,
362:     charsPerItem: 0,
363:     charsForPrompt: 240,
364:     charsPerOutput: 1000,
365:     modelType: freeModel,
366:     costType: 'live',
367:     taskType: 'chat',
368:     isPremium: false,
369:   })
370: 
371:   const proCost = calculateTotalChatCost({
372:     numItems: totalProRequests,
373:     charsPerItem: 0,
374:     charsForPrompt: 240,
375:     charsPerOutput: 1200,
376:     modelType: premiumModel,
377:     costType: 'live',
378:     taskType: 'chat',
379:     isPremium: true,
380:   })
381: 
382:   const expertCost = calculateTotalChatCost({
383:     numItems: totalExpertRequests,
384:     charsPerItem: 0,
385:     charsForPrompt: 240,
386:     charsPerOutput: 1600,
387:     modelType: premiumModel,
388:     costType: 'live',
389:     taskType: 'chat',
390:     isPremium: true,
391:   })
392: 
393:   const totalCost = freeCost.cost.total + proCost.cost.total + expertCost.cost.total
394:   const totalTokens = freeCost.tokens.total + proCost.tokens.total + expertCost.tokens.total
395: 
396:   return {
397:     totalCost: totalCost,
398:     totalTokens: totalTokens,
399:     free: {
400:       ...freeCost,
401:       model: freeModel,
402:       requests: totalFreeRequests,
403:     },
404:     pro: {
405:       ...proCost,
406:       model: premiumModel,
407:       requests: totalProRequests,
408:     },
409:     expert: {
410:       ...expertCost,
411:       model: premiumModel,
412:       requests: totalExpertRequests,
413:     },
414:   }
415: }
416: 
417: interface AiBreakdown {
418:   type: string
419:   embedding: {
420:     totalCost: number
421:     tokens: {
422:       total: number
423:     }
424:     model: EmbeddingModel
425:     batch: 'batch' | 'live'
426:   }
427:   summary: {
428:     cost: {
429:       total: number
430:       input: number
431:       output: number
432:     }
433:     tokens: {
434:       total: number
435:       input: number
436:       output: number
437:     }
438:     model: ChatModel
439:     batch: 'batch' | 'live'
440:   }
441: }
442: 
443: export interface AiCostResult {
444:   cost: {
445:     total: number
446:     embedding: number
447:     summary: number
448:     chat: number
449:   }
450:   tokens: {
451:     total: number
452:     embedding: number
453:     summary: number
454:     chat: number
455:   }
456:   breakdown: AiBreakdown[]
457:   chat: ChatGPTResult
458: }
459: 
460: const EMBEDDING_MODEL: EmbeddingModel = 'text-embedding-3-small'
461: const SUMMARY_MODEL: ChatModel = 'gpt-4o-mini'
462: 
463: interface CalculateAiCostParams {
464:   mau: number
465:   customers: {
466:     pro: number
467:     expert: number
468:   }
469:   isBatch?: boolean
470:   CONTENT_CONFIG: StageConfig
471: }
472: 
473: export function calculateAiCost({
474:   mau,
475:   customers,
476:   isBatch = true,
477:   CONTENT_CONFIG,
478: }: CalculateAiCostParams): AiCostResult {
479:   const freeUsers = mau - (customers.expert + customers.pro)
480:   const chat = calculateChatGPTUsageCost(freeUsers, customers)
481: 
482:   const breakdown = [] as AiBreakdown[]
483:   let totalEmbeddingsCost = 0
484:   let totalEmbeddingTokens = 0
485:   let totalSummaryCost = 0
486:   let totalSummaryTokens = 0
487: 
488:   for (const contentType in CONTENT_CONFIG) {
489:     const content = CONTENT_CONFIG[contentType as keyof typeof CONTENT_CONFIG]
490: 
491:     // Calculate embedding cost
492:     const contentEmbeddingCost = calculateTotalCost({
493:       numItems: content.PROCESSED_MONTHLY,
494:       charsPerItem: content.CHARS.CONTENT,
495:       modelType: EMBEDDING_MODEL,
496:       costType: isBatch ? 'batch' : 'live',
497:       taskType: 'embedding',
498:       isPremium: true,
499:     })
500: 
501:     const contentSummaryCost = calculateTotalCost({
502:       numItems: content.PROCESSED_MONTHLY,
503:       charsPerItem: content.CHARS.CONTENT,
504:       charsForPrompt: content.CHARS.PROMPT,
505:       charsPerOutput: content.CHARS.OUTPUT,
506:       modelType: SUMMARY_MODEL,
507:       costType: isBatch ? 'batch' : 'live',
508:       taskType: 'summary',
509:       isPremium: true,
510:     })
511: 
512:     totalEmbeddingsCost += contentEmbeddingCost.total
513:     totalEmbeddingTokens += contentEmbeddingCost.tokens.total
514:     totalSummaryTokens += contentSummaryCost.tokens.total
515:     totalSummaryCost += contentSummaryCost.cost.total
516: 
517:     breakdown.push({
518:       type: contentType,
519:       embedding: {
520:         totalCost: contentEmbeddingCost.total,
521:         tokens: {
522:           total: contentEmbeddingCost.tokens.total,
523:         },
524:         model: EMBEDDING_MODEL,
525:         batch: isBatch ? 'batch' : 'live',
526:       },
527:       summary: {
528:         cost: {
529:           total: contentSummaryCost.cost.total,
530:           input: contentSummaryCost.cost.input,
531:           output: contentSummaryCost.cost.output,
532:         },
533:         tokens: contentSummaryCost.tokens,
534:         model: SUMMARY_MODEL,
535:         batch: isBatch ? 'batch' : 'live',
536:       },
537:     })
538:   }
539: 
540:   console.log(
541:     'Total Costs:',
542:     totalEmbeddingsCost.toFixed(0),
543:     totalSummaryCost.toFixed(0),
544:     chat.totalCost.toFixed(0),
545:   )
546: 
547:   return {
548:     cost: {
549:       total: totalEmbeddingsCost + totalSummaryCost + chat.totalCost,
550:       embedding: totalEmbeddingsCost,
551:       summary: totalSummaryCost,
552:       chat: chat.totalCost,
553:     },
554:     tokens: {
555:       total: totalEmbeddingTokens + totalSummaryTokens + chat.totalTokens,
556:       embedding: totalEmbeddingTokens,
557:       summary: totalSummaryTokens,
558:       chat: chat.totalTokens,
559:     },
560:     breakdown,
561:     chat,
562:   }
563: }
```

## File: apps/admin-dashboard/financials/helpers.ts
```typescript
 1: const CHAR_CHUNK_SIZE = 1024
 2: const AVG_CHAR_PER_WORD = 4.7
 3: 
 4: export function USD2INR(usd: number, USD_TO_INR: number = 75.0) {
 5:   return parseFloat((usd * USD_TO_INR).toFixed(2))
 6: }
 7: 
 8: export function ROUND0(value: number) {
 9:   return parseInt(value.toFixed(0))
10: }
11: 
12: export function ROUND2(value: number) {
13:   return parseFloat(value.toFixed(2))
14: }
15: export const WORDS_TO_CHAR_CHUNKS = (words: number) =>
16:   Math.ceil((words * AVG_CHAR_PER_WORD) / CHAR_CHUNK_SIZE)
17: 
18: export const WORDS_TO_CHARS = (words: number) => Math.ceil(words * AVG_CHAR_PER_WORD)
19: 
20: interface RefundEfficiencyParams {
21:   currentMonth: number
22:   pessimistic: number
23:   optimistic: number
24: }
25: 
26: export function EFFICIENCY_FACTOR({
27:   currentMonth,
28:   pessimistic,
29:   optimistic,
30: }: RefundEfficiencyParams): number {
31:   const midpoint = 6 // Midpoint of 12 months for gradual change
32:   const steepness = 0.1 // Steepness of the curve
33:   const factor = 1 / (1 + Math.exp(-steepness * (currentMonth - midpoint))) // S-curve scaling
34:   return pessimistic - factor * (pessimistic - optimistic)
35: }
36: 
37: export function CHURN_TO_LIFESPAN_MONTHS(monthlyChurnRate: number): number {
38:   const averageLifespanMonths = 1 / monthlyChurnRate
39:   return averageLifespanMonths
40: }
```

## File: apps/admin-dashboard/financials/logging.ts
```typescript
  1: import { USD2INR } from './helpers'
  2: 
  3: // Updated configuration to include metrics and analytics pricing
  4: export const LOGS_CONFIG = {
  5:   includedGB: 50,
  6:   additionalGBPrice: 0.45,
  7:   retentionIncludedDays: 30,
  8:   retentionPricePerGBPerMonth: 0.1,
  9:   minimumCharge: 34,
 10: }
 11: 
 12: export const LOGS_METRIC_CONFIG = {
 13:   includedDataPoints: 10_000_000,
 14:   additionalDataPointsPrice: 10, // Price per additional 10M data points
 15: }
 16: 
 17: export const LOGS_ANALYTICS_CONFIG = {
 18:   pricePerMember: 5, // Price per member per month
 19: }
 20: 
 21: type LogsCostParams = {
 22:   MAU: number
 23:   month: number
 24:   avgMauUsage: number
 25:   teamMembers: number
 26: }
 27: 
 28: export interface LoggingResult {
 29:   total: number
 30:   ingested: number
 31:   retention: number
 32:   metrics: number
 33:   analytics: number
 34: }
 35: 
 36: type UsageParams = {
 37:   MAU: number
 38:   month: number
 39:   avgMauUsage: number
 40:   teamMembers: number
 41:   ingestedGB: number
 42:   additionalIngestedGB: number
 43:   retentionGB: number
 44:   metricsIngestedDataPoints: number
 45:   additionalMetricsDataPoints: number
 46: }
 47: 
 48: function estimateUsage(params: LogsCostParams): UsageParams {
 49:   const { MAU, month, avgMauUsage, teamMembers } = params
 50: 
 51:   const ingestedGB = MAU * avgMauUsage
 52:   const additionalIngestedGB
 53:     = ingestedGB > LOGS_CONFIG.includedGB ? ingestedGB - LOGS_CONFIG.includedGB : 0
 54: 
 55:   const retentionGB = ingestedGB * (month > 6 ? 1 : 0) // Retention is applied only after the first 6 months
 56: 
 57:   const metricsIngestedDataPoints = MAU * 300 // Assuming 300 data points per MAU, 30 per day
 58:   const additionalMetricsDataPoints
 59:     = metricsIngestedDataPoints > LOGS_METRIC_CONFIG.includedDataPoints
 60:       ? metricsIngestedDataPoints - LOGS_METRIC_CONFIG.includedDataPoints
 61:       : 0
 62: 
 63:   return {
 64:     MAU,
 65:     month,
 66:     avgMauUsage,
 67:     teamMembers,
 68:     ingestedGB,
 69:     additionalIngestedGB,
 70:     retentionGB,
 71:     metricsIngestedDataPoints,
 72:     additionalMetricsDataPoints,
 73:   }
 74: }
 75: 
 76: export function calculateLogsCost(params: LogsCostParams): LoggingResult {
 77:   const usage = estimateUsage(params)
 78: 
 79:   const {
 80:     month,
 81:     ingestedGB,
 82:     additionalIngestedGB,
 83:     retentionGB,
 84:     metricsIngestedDataPoints,
 85:     additionalMetricsDataPoints,
 86:     teamMembers,
 87:   } = usage
 88: 
 89:   if (month <= 6) {
 90:     // Free tier conditions
 91:     const freeIncludedGB = 3
 92:     const freeRetentionDays = 3
 93:     const retentionCost = 0
 94:     const metricsCost = 0
 95:     const analyticsCost = 0
 96: 
 97:     const additionalIngestedGB = ingestedGB > freeIncludedGB ? ingestedGB - freeIncludedGB : 0
 98:     const ingestedCost = 0 // Free tier so ingested cost is $0
 99: 
100:     return {
101:       total: USD2INR(0), // Free tier so total cost is $0
102:       ingested: USD2INR(ingestedCost),
103:       retention: USD2INR(retentionCost),
104:       metrics: USD2INR(metricsCost),
105:       analytics: USD2INR(analyticsCost),
106:     }
107:   } else {
108:     const { includedGB, additionalGBPrice, retentionPricePerGBPerMonth, minimumCharge }
109:       = LOGS_CONFIG
110: 
111:     // Calculate ingested cost
112:     const ingestedCost = additionalIngestedGB * additionalGBPrice
113: 
114:     // Calculate retention cost
115:     const retentionCost = retentionGB * retentionPricePerGBPerMonth
116: 
117:     // Calculate metrics cost
118:     const metricsCost
119:       = (additionalMetricsDataPoints / 10_000_000) * LOGS_METRIC_CONFIG.additionalDataPointsPrice
120: 
121:     // Calculate analytics cost
122:     const analyticsCost = teamMembers * LOGS_ANALYTICS_CONFIG.pricePerMember
123: 
124:     // Calculate total cost
125:     const totalCost = ingestedCost + retentionCost + metricsCost + analyticsCost
126: 
127:     // Ensure the cost is not below the minimum charge
128:     const costMinusMinimum = totalCost > minimumCharge ? totalCost : minimumCharge
129: 
130:     return {
131:       total: USD2INR(costMinusMinimum),
132:       ingested: USD2INR(ingestedCost),
133:       retention: USD2INR(retentionCost),
134:       metrics: USD2INR(metricsCost),
135:       analytics: USD2INR(analyticsCost),
136:     }
137:   }
138: }
```

## File: apps/admin-dashboard/financials/marketing.ts
```typescript
 1: type MarketingCostParams = {
 2:   mrr: number
 3:   percentage: number
 4: }
 5: 
 6: export function calculateMarketingCost({ mrr, percentage }: MarketingCostParams): number {
 7:   if (mrr < 0) {
 8:     throw new Error(
 9:       'Invalid input: MRR and percentage must be positive and percentage must be between 0 and 100.',
10:     )
11:   }
12: 
13:   const marketingCost = mrr * percentage
14: 
15:   return marketingCost
16: }
```

## File: apps/admin-dashboard/financials/metrics-users.ts
```typescript
  1: export type CostCategory =
  2:   | 'infrastructure'
  3:   | 'thirdPartyServices'
  4:   | 'support'
  5:   | 'development'
  6:   | 'marketing'
  7: 
  8: interface CostDetails {
  9:   total: number
 10:   singleCost: number
 11: }
 12: 
 13: interface UserTierCost {
 14:   free: CostDetails
 15:   pro: CostDetails
 16:   expert: CostDetails
 17: }
 18: 
 19: interface AllocateCostParams {
 20:   totalCosts: {
 21:     free: number
 22:     pro: number
 23:     expert: number
 24:   }
 25:   users: {
 26:     free: number
 27:     pro: number
 28:     expert: number
 29:   }
 30: }
 31: 
 32: function allocateCostsToTiers({ totalCosts, users }: AllocateCostParams): UserTierCost {
 33:   const totalUsers = users.free + users.pro + users.expert
 34: 
 35:   const costs: UserTierCost = {
 36:     free: { total: 0, singleCost: 0 },
 37:     pro: { total: 0, singleCost: 0 },
 38:     expert: { total: 0, singleCost: 0 },
 39:   }
 40: 
 41:   // Allocate infrastructure costs
 42:   const costPerFreeUser = totalCosts.free / totalUsers
 43:   const costPerProUser = totalCosts.pro / totalUsers
 44:   const costPerExpertUser = totalCosts.expert / totalUsers
 45: 
 46:   costs.free.total = costPerFreeUser * users.free
 47:   costs.pro.total = costPerProUser * users.pro
 48:   costs.expert.total = costPerExpertUser * users.expert
 49: 
 50:   costs.free.singleCost = costPerFreeUser
 51:   costs.pro.singleCost = costPerProUser
 52:   costs.expert.singleCost = costPerExpertUser
 53: 
 54:   return costs
 55: }
 56: 
 57: export interface CalculateCostParams {
 58:   users: {
 59:     free: number
 60:     pro: number
 61:     expert: number
 62:   }
 63:   totalCosts: {
 64:     free: number
 65:     pro: number
 66:     expert: number
 67:   }
 68: }
 69: 
 70: export function calculateCostPerUser({ users, totalCosts }: CalculateCostParams): CostPerUser {
 71:   const costs = allocateCostsToTiers({
 72:     totalCosts,
 73:     users,
 74:   })
 75: 
 76:   return {
 77:     total: totalCosts.free + totalCosts.pro + totalCosts.expert,
 78:     totalCount: users.free + users.pro + users.expert,
 79:     customerCount: users.pro + users.expert,
 80:     free: {
 81:       count: users.free,
 82:       totalCost: costs.free.total,
 83:       singleCost: costs.free.singleCost,
 84:     },
 85:     pro: {
 86:       count: users.pro,
 87:       totalCost: costs.pro.total,
 88:       singleCost: costs.pro.singleCost,
 89:     },
 90:     expert: {
 91:       count: users.expert,
 92:       totalCost: costs.expert.total,
 93:       singleCost: costs.expert.singleCost,
 94:     },
 95:   }
 96: }
 97: 
 98: export interface CostPerUser {
 99:   total: number
100:   totalCount: number
101:   customerCount: number
102:   free: {
103:     count: number
104:     totalCost: number
105:     singleCost: number
106:   }
107:   pro: {
108:     count: number
109:     totalCost: number
110:     singleCost: number
111:   }
112:   expert: {
113:     count: number
114:     totalCost: number
115:     singleCost: number
116:   }
117: }
```

## File: apps/admin-dashboard/financials/metrics.ts
```typescript
  1: import { ROUND0, USD2INR, ROUND2, CHURN_TO_LIFESPAN_MONTHS, EFFICIENCY_FACTOR } from './helpers'
  2: import { calculateCostPerUser, type CostPerUser } from './metrics-users'
  3: import { INCOME_STREAMS } from './customers'
  4: import { metricConfig } from './totals'
  5: 
  6: function calculateRecurringRevenue(revenue: { free: number, pro: number, expert: number }) {
  7:   const freeMRR = revenue.free
  8:   const proMRR = revenue.pro
  9:   const expertMRR = revenue.expert
 10: 
 11:   const freeARR = freeMRR * 12
 12:   const proARR = proMRR * 12
 13:   const expertARR = expertMRR * 12
 14: 
 15:   return {
 16:     totalMRR: freeMRR + proMRR + expertMRR,
 17:     totalARR: freeARR + proARR + expertARR,
 18:     free: {
 19:       monthly: freeMRR,
 20:       annual: freeARR,
 21:     },
 22:     pro: {
 23:       monthly: proMRR,
 24:       annual: proARR,
 25:     },
 26:     expert: {
 27:       monthly: expertMRR,
 28:       annual: expertARR,
 29:     },
 30:   }
 31: }
 32: 
 33: interface ARPU {
 34:   MRR: { free: number, pro: number, expert: number }
 35:   users: { free: number, pro: number, expert: number }
 36: }
 37: function calculateAverageRevenuePerUser({ MRR, users }: ARPU) {
 38:   const totalUsers = users.free + users.pro + users.expert
 39:   const monthlyRecurringRevenue = MRR.free + MRR.pro + MRR.expert
 40: 
 41:   return {
 42:     total: totalUsers > 0 ? ROUND0(monthlyRecurringRevenue / totalUsers) : 0,
 43:     free: users.free > 0 ? ROUND0(MRR.free / users.free) : 0,
 44:     pro: users.pro > 0 ? ROUND0(MRR.pro / users.pro) : 0,
 45:     expert: users.expert > 0 ? ROUND0(MRR.expert / users.expert) : 0,
 46:   }
 47: }
 48: interface CLVParams {
 49:   avgRevenue: {
 50:     free: number
 51:     pro: number
 52:     expert: number
 53:   }
 54:   lifespan: { free: number, pro: number, expert: number }
 55: }
 56: 
 57: function calculateCustomerLifetimeValue(params: CLVParams) {
 58:   const freeCLV = params.avgRevenue.free * params.lifespan.free
 59:   const proCLV = params.avgRevenue.pro * params.lifespan.pro
 60:   const expertCLV = params.avgRevenue.expert * params.lifespan.expert
 61:   return {
 62:     average: ROUND2(freeCLV + proCLV + expertCLV) / 3,
 63:     free: ROUND2(freeCLV),
 64:     pro: ROUND2(proCLV),
 65:     expert: ROUND2(expertCLV),
 66:   }
 67: }
 68: 
 69: interface CACParams {
 70:   totalMarketingCosts: number
 71:   newUsers: { free: number, pro: number, expert: number }
 72: }
 73: 
 74: function calculateCustomerAcquisitionCost({ totalMarketingCosts, newUsers }: CACParams) {
 75:   const { free, pro, expert } = newUsers
 76:   const newCustomers = free + pro + expert
 77: 
 78:   const averageCAC = newCustomers > 0 ? Math.round(totalMarketingCosts / newCustomers) : 0
 79:   const freeCAC = free > 0 ? Math.round(totalMarketingCosts / free) : 0
 80:   const proCAC = pro > 0 ? Math.round(totalMarketingCosts / pro) : 0
 81:   const expertCAC = expert > 0 ? Math.round(totalMarketingCosts / expert) : 0
 82: 
 83:   return {
 84:     average: averageCAC,
 85:     free: freeCAC,
 86:     pro: proCAC,
 87:     expert: expertCAC,
 88:   }
 89: }
 90: 
 91: function calculateRetentionRate(churnRate: { free: number, pro: number, expert: number }) {
 92:   return {
 93:     average: 100 - ((churnRate.free + churnRate.pro + churnRate.expert) * 100) / 3,
 94:     free: 100 - churnRate.free * 100,
 95:     pro: 100 - churnRate.pro * 100,
 96:     expert: 100 - churnRate.expert * 100,
 97:   }
 98: }
 99: 
100: function calculateConversionRates(users: {
101:   mau: number
102:   free: number
103:   pro: number
104:   expert: number
105: }) {
106:   return users.mau > 0
107:     ? {
108:         total: parseInt((((users.pro + users.expert) / users.mau) * 100).toFixed(0)),
109:         pro: parseInt(((users.pro / users.mau) * 100).toFixed(0)),
110:         expert: parseInt(((users.expert / users.mau) * 100).toFixed(0)),
111:       }
112:     : { total: 0, pro: 0, expert: 0 }
113: }
114: 
115: function calculateGrossMargin(revenue: number, costOfGoodsSold: number) {
116:   return revenue > 0 ? parseInt((((revenue - costOfGoodsSold) / revenue) * 100).toFixed(0)) : 0
117: }
118: 
119: function calculateMarketingSpendEfficiency(totalMarketingCosts: number, revenue: number) {
120:   return revenue > 0 ? parseInt(((revenue / totalMarketingCosts) * 100).toFixed(0)) : 0
121: }
122: 
123: interface ChurnRefundParams {
124:   currentMonth: number
125:   users: {
126:     free: number
127:     pro: number
128:     expert: number
129:   }
130:   revenue: {
131:     pro: number
132:     expert: number
133:   }
134: }
135: 
136: function calculateChurnAndRefunds({ currentMonth, users, revenue }: ChurnRefundParams) {
137:   const { subscription } = INCOME_STREAMS
138: 
139:   const { PRO, EXPERT } = metricConfig.MONTHLY_CHURN
140: 
141:   const freeChurnRate = EFFICIENCY_FACTOR({
142:     currentMonth,
143:     pessimistic: metricConfig.MONTHLY_CHURN.MAU.PESSIMISTIC,
144:     optimistic: metricConfig.MONTHLY_CHURN.MAU.OPTIMISTIC,
145:   })
146: 
147:   const proChurnRate = EFFICIENCY_FACTOR({
148:     currentMonth,
149:     pessimistic: PRO.PESSIMISTIC,
150:     optimistic: PRO.OPTIMISTIC,
151:   })
152: 
153:   const expertChurnRate = EFFICIENCY_FACTOR({
154:     currentMonth,
155:     pessimistic: EXPERT.PESSIMISTIC,
156:     optimistic: EXPERT.OPTIMISTIC,
157:   })
158: 
159:   const proRefundRate = EFFICIENCY_FACTOR({
160:     currentMonth,
161:     pessimistic: subscription.pro.refund.yearly.pessimistic,
162:     optimistic: subscription.pro.refund.yearly.optimistic,
163:   })
164: 
165:   const expertRefundRate = EFFICIENCY_FACTOR({
166:     currentMonth,
167:     pessimistic: subscription.expert.refund.yearly.pessimistic,
168:     optimistic: subscription.expert.refund.yearly.optimistic,
169:   })
170: 
171:   const proRefundCost = revenue.pro * proRefundRate
172:   const expertRefundCost = revenue.expert * expertRefundRate
173:   const totalRefundAmount = proRefundCost + expertRefundCost
174: 
175:   const proChurnedUsers = users.pro * proChurnRate
176:   const expertChurnedUsers = users.expert * expertChurnRate
177: 
178:   const totalChurnedUsers = proChurnedUsers + expertChurnedUsers
179: 
180:   const proRefundUsers = users.pro * proRefundRate
181:   const expertRefundUsers = users.expert * expertRefundRate
182:   const totalRefundedUsers = proRefundUsers + expertRefundUsers
183: 
184:   const proChurnCost = revenue.pro * proChurnRate
185:   const expertChurnCost = revenue.expert * expertChurnRate
186:   const totalChurnCost = proChurnCost + expertChurnCost
187: 
188:   return {
189:     refund: {
190:       total: {
191:         cost: totalRefundAmount,
192:         rate: (proRefundRate + expertRefundRate) * 100,
193:         count: totalRefundedUsers,
194:       },
195:       pro: {
196:         count: proRefundUsers,
197:         cost: proRefundCost,
198:         rate: proRefundRate,
199:       },
200:       expert: {
201:         count: expertRefundUsers,
202:         cost: expertRefundCost,
203:         rate: expertRefundRate,
204:       },
205:     },
206:     churn: {
207:       total: {
208:         cost: totalChurnCost,
209:         rate: proChurnRate + expertChurnRate,
210:         count: totalChurnedUsers,
211:       },
212:       free: {
213:         rate: freeChurnRate,
214:         count: users.free * freeChurnRate,
215:       },
216:       pro: {
217:         count: proChurnedUsers,
218:         cost: proChurnCost,
219:         rate: proChurnRate,
220:       },
221:       expert: {
222:         count: expertChurnedUsers,
223:         cost: expertChurnCost,
224:         rate: expertChurnRate,
225:       },
226:     },
227:   }
228: }
229: 
230: interface AllMetricsParams {
231:   currentMonth: number
232:   marketing: {
233:     cost: number
234:     leads: number
235:   }
236:   expenses: {
237:     total: number
238:     free: number
239:     pro: number
240:     expert: number
241:   }
242:   revenue: {
243:     free: number
244:     pro: number
245:     expert: number
246:   }
247:   users: {
248:     mau: number
249:     free: number
250:     pro: number
251:     expert: number
252:     totalCustomers: number
253:     new: number
254:     newCustomers: number
255:   }
256: }
257: 
258: export function calculateAllMetrics(params: AllMetricsParams): AllMetrics {
259:   const { marketing, expenses, revenue, users, currentMonth } = params
260: 
261:   const { churn, refund } = calculateChurnAndRefunds({
262:     currentMonth,
263:     users,
264:     revenue: {
265:       pro: revenue.pro,
266:       expert: revenue.expert,
267:     },
268:   })
269: 
270:   const effectiveRevenue
271:     = revenue.free + revenue.pro + revenue.expert - refund.total.cost - churn.total.cost
272:   const recurringRevenue = calculateRecurringRevenue(revenue)
273: 
274:   const freeLifespan = CHURN_TO_LIFESPAN_MONTHS(churn.free.rate)
275:   const proLifespan = CHURN_TO_LIFESPAN_MONTHS(churn.pro.rate)
276:   const expertLifespan = CHURN_TO_LIFESPAN_MONTHS(churn.expert.rate)
277: 
278:   const avgRevenue = calculateAverageRevenuePerUser({
279:     MRR: {
280:       free: recurringRevenue.free.monthly,
281:       pro: recurringRevenue.pro.monthly,
282:       expert: recurringRevenue.expert.monthly,
283:     },
284:     users,
285:   })
286: 
287:   const lifetimeValue = calculateCustomerLifetimeValue({
288:     avgRevenue: {
289:       free: avgRevenue.free,
290:       pro: avgRevenue.pro,
291:       expert: avgRevenue.expert,
292:     },
293:     lifespan: {
294:       free: freeLifespan,
295:       pro: proLifespan,
296:       expert: expertLifespan,
297:     },
298:   })
299: 
300:   const customerAcquisitionCost = calculateCustomerAcquisitionCost({
301:     totalMarketingCosts: marketing.cost,
302:     newUsers: {
303:       free: users.free,
304:       pro: users.pro,
305:       expert: users.expert,
306:     },
307:   })
308: 
309:   const retentionRate = calculateRetentionRate({
310:     free: churn.free.rate,
311:     pro: churn.pro.rate,
312:     expert: churn.expert.rate,
313:   })
314: 
315:   const totalConversionRate = calculateConversionRates(users)
316: 
317:   const grossMargin = calculateGrossMargin(effectiveRevenue, expenses.total)
318: 
319:   const marketingSpendEfficiency = calculateMarketingSpendEfficiency(
320:     marketing.cost,
321:     effectiveRevenue,
322:   )
323: 
324:   const userCost = calculateCostPerUser({
325:     users,
326:     totalCosts: {
327:       free: expenses.free,
328:       pro: expenses.pro,
329:       expert: expenses.expert,
330:     },
331:   })
332: 
333:   console.log('PLMargin', effectiveRevenue, expenses.total)
334: 
335:   return {
336:     mau: {
337:       total: users.mau,
338:       new: users.new,
339:       churned: churn.total.count,
340:       free: users.free,
341:       pro: users.pro,
342:       expert: users.expert,
343:       customers: users.totalCustomers,
344:     },
345:     monthlyRecurringRevenue: {
346:       effective: effectiveRevenue,
347:       free: recurringRevenue.free.monthly,
348:       pro: recurringRevenue.pro.monthly,
349:       expert: recurringRevenue.expert.monthly,
350:     },
351:     annualRecurringRevenue: {
352:       effective: effectiveRevenue * 12,
353:       free: recurringRevenue.free.annual,
354:       pro: recurringRevenue.pro.annual,
355:       expert: recurringRevenue.expert.annual,
356:     },
357:     averageRevenuePerUser: {
358:       total: avgRevenue.total,
359:       free: avgRevenue.free,
360:       pro: avgRevenue.pro,
361:       expert: avgRevenue.expert,
362:     },
363:     customerLifetimeValue: lifetimeValue,
364:     customerAcquisitionCost: customerAcquisitionCost,
365:     customerLifespan: {
366:       average: (freeLifespan + proLifespan + expertLifespan) / 3,
367:       free: freeLifespan,
368:       pro: proLifespan,
369:       expert: expertLifespan,
370:     },
371:     retentionRate: {
372:       average: retentionRate.average,
373:       free: retentionRate.free,
374:       pro: retentionRate.pro,
375:       expert: retentionRate.expert,
376:     },
377:     refund,
378:     churn,
379:     userCost,
380:     conversionRate: {
381:       total: totalConversionRate.total,
382:       pro: totalConversionRate.pro,
383:       expert: totalConversionRate.expert,
384:     },
385:     grossMargin,
386:     marketingSpendEfficiency,
387:     profitLossMargin: parseFloat(
388:       (((effectiveRevenue - expenses.total) / expenses.total) * 100).toFixed(1),
389:     ),
390:   }
391: }
392: 
393: export interface AllMetrics {
394:   mau: {
395:     total: number
396:     new: number
397:     churned: number
398:     free: number
399:     pro: number
400:     expert: number
401:     customers: number
402:   }
403:   monthlyRecurringRevenue: {
404:     effective: number
405:     free: number
406:     pro: number
407:     expert: number
408:   }
409:   annualRecurringRevenue: {
410:     effective: number
411:     free: number
412:     pro: number
413:     expert: number
414:   }
415:   averageRevenuePerUser: {
416:     total: number
417:     free: number
418:     pro: number
419:     expert: number
420:   }
421:   customerLifetimeValue: {
422:     average: number
423:     free: number
424:     pro: number
425:     expert: number
426:   }
427:   customerAcquisitionCost: {
428:     average: number
429:     free: number
430:     pro: number
431:     expert: number
432:   }
433:   customerLifespan: {
434:     average: number
435:     free: number
436:     pro: number
437:     expert: number
438:   }
439:   retentionRate: {
440:     average: number
441:     free: number
442:     pro: number
443:     expert: number
444:   }
445:   refund: {
446:     total: {
447:       cost: number
448:       rate: number
449:       count: number
450:     }
451:     pro: {
452:       count: number
453:       cost: number
454:       rate: number
455:     }
456:     expert: {
457:       count: number
458:       cost: number
459:       rate: number
460:     }
461:   }
462:   churn: {
463:     total: {
464:       cost: number
465:       rate: number
466:       count: number
467:     }
468:     free: {
469:       rate: number
470:       count: number
471:     }
472:     pro: {
473:       count: number
474:       cost: number
475:       rate: number
476:     }
477:     expert: {
478:       count: number
479:       cost: number
480:       rate: number
481:     }
482:   }
483:   userCost: CostPerUser
484:   conversionRate: {
485:     total: number
486:     pro: number
487:     expert: number
488:   }
489:   grossMargin: number
490:   marketingSpendEfficiency: number
491:   profitLossMargin: number
492: }
```

## File: apps/admin-dashboard/financials/office.ts
```typescript
 1: const OFFICE_SPACE = {
 2:   sqMetersPerEmployee: 8,
 3:   costPerSqMeter: 2360, // averaged from 40 offices in Pune
 4:   maxEmployees: 35, // Maximum number of employees for full office
 5:   costPerEmployee: (haveCoworking: boolean, haveOffice: boolean, employees: number): number => {
 6:     if (haveOffice) {
 7:       const totalSqMeters = OFFICE_SPACE.maxEmployees * OFFICE_SPACE.sqMetersPerEmployee
 8:       return totalSqMeters * OFFICE_SPACE.costPerSqMeter
 9:     } else if (haveCoworking) {
10:       return 8000 * employees
11:     } else {
12:       return 0
13:     }
14:   },
15:   insurance: 50000,
16:   internet: 2000,
17:   cleaning: 5000,
18:   maintenance: 5000,
19: }
20: 
21: const OFFICE_EXPENSES = {
22:   supplies: 800,
23:   utilities: 400,
24:   snacks: 300,
25:   misc: 1000,
26: }
27: 
28: export interface OfficeResult {
29:   total: number
30:   officeSpace: number
31:   supplies: number
32:   utilities: number
33:   snacks: number
34:   miscellaneous: number
35:   internet: number
36:   cleaning: number
37:   insurance: number
38:   maintenance: number
39: }
40: 
41: export function calculateOfficeCosts(employees: number): OfficeResult {
42:   console.log('officeCost1', employees)
43:   const minEmployeesForCoworking = 10
44:   const minEmployeesForOffice = 20
45:   const haveOffice = employees > minEmployeesForOffice
46:   const haveCoworking = employees > minEmployeesForCoworking && employees < minEmployeesForOffice
47: 
48:   const spaceCost = OFFICE_SPACE.costPerEmployee(haveCoworking, haveOffice, employees)
49:   const officeSuppliesCost = employees * OFFICE_EXPENSES.supplies
50:   const utilitiesCost = employees * OFFICE_EXPENSES.utilities
51:   const snacksCoffeeCost = employees * OFFICE_EXPENSES.snacks
52:   const miscellaneousCost = employees * OFFICE_EXPENSES.misc
53: 
54:   const internetPhoneCost = haveOffice ? OFFICE_SPACE.internet : 0
55:   const cleaningServicesCost = haveOffice ? OFFICE_SPACE.cleaning : 0
56:   const insuranceCost = haveOffice ? OFFICE_SPACE.insurance : 0
57:   const maintenanceCost = haveOffice ? OFFICE_SPACE.maintenance : 0
58: 
59:   const total
60:     = spaceCost
61:     + officeSuppliesCost
62:     + utilitiesCost
63:     + snacksCoffeeCost
64:     + miscellaneousCost
65:     + internetPhoneCost
66:     + cleaningServicesCost
67:     + insuranceCost
68:     + maintenanceCost
69: 
70:   console.log('officeCost', {
71:     total,
72:     spaceCost,
73:     officeSuppliesCost,
74:     utilitiesCost,
75:     snacksCoffeeCost,
76:     miscellaneousCost,
77:     internetPhoneCost,
78:     cleaningServicesCost,
79:     insuranceCost,
80:     maintenanceCost,
81:   })
82: 
83:   return {
84:     total: parseInt(total.toFixed(0)),
85:     officeSpace: parseInt(spaceCost.toFixed(0)),
86:     supplies: parseInt(officeSuppliesCost.toFixed(0)),
87:     utilities: parseInt(utilitiesCost.toFixed(0)),
88:     snacks: parseInt(snacksCoffeeCost.toFixed(0)),
89:     miscellaneous: parseInt(miscellaneousCost.toFixed(0)),
90:     internet: parseInt(internetPhoneCost.toFixed(0)),
91:     cleaning: parseInt(cleaningServicesCost.toFixed(0)),
92:     insurance: parseInt(insuranceCost.toFixed(0)),
93:     maintenance: parseInt(maintenanceCost.toFixed(0)),
94:   }
95: }
```

## File: apps/admin-dashboard/financials/payments.ts
```typescript
  1: import { USD2INR } from './helpers'
  2: 
  3: type PaymentProvider = 'Razorpay' | 'Stripe'
  4: type SubscriptionType = 'Pro' | 'Expert'
  5: type PaymentFrequency = 'Monthly' | 'Annual'
  6: 
  7: type DomesticPaymentMethod = 'Visa' | 'MasterCard' | 'UPI'
  8: type InternationalPaymentMethod = 'MasterCardVisa' | 'AmericanExpress' | 'InternationalCard'
  9: 
 10: const subscriptionPrices: Record<SubscriptionType, number> = {
 11:   Pro: 20,
 12:   Expert: 50,
 13: }
 14: 
 15: const paymentMethodDistribution = {
 16:   domestic: {
 17:     Visa: 25,
 18:     MasterCard: 15,
 19:     UPI: 60,
 20:   },
 21:   international: {
 22:     MasterCardVisa: 50,
 23:     AmericanExpress: 30,
 24:     InternationalCard: 20,
 25:   },
 26: }
 27: 
 28: function distributeCustomers(
 29:   numCustomers: number,
 30:   distribution: Record<string, number>,
 31: ): Record<string, number> {
 32:   const result: Record<string, number> = {}
 33:   let totalAssigned = 0
 34:   let fractionalPart = 0
 35: 
 36:   Object.keys(distribution).forEach((method, index, array) => {
 37:     const proportion = distribution[method] / 100
 38:     const calculated = numCustomers * proportion + fractionalPart
 39:     const count = Math.floor(calculated)
 40: 
 41:     fractionalPart = calculated - count // Keep track of fractional part for more precise distribution
 42:     result[method] = count
 43:     totalAssigned += count
 44: 
 45:     // Distribute any remaining customers more evenly
 46:     if (index === array.length - 1 && totalAssigned < numCustomers) {
 47:       result[method] += numCustomers - totalAssigned
 48:     }
 49:   })
 50: 
 51:   return result
 52: }
 53: 
 54: const razorpayConfig = {
 55:   platformFeePercentage: 0.02,
 56:   gstPercentage: 0.18,
 57:   subscription: {
 58:     Visa: {
 59:       baseFeePercentage: 0.009,
 60:       additionalFees1kInrPlus: {
 61:         registration: 7,
 62:         autoDebit: 17,
 63:       },
 64:     },
 65:     MasterCard: {
 66:       baseFeePercentage: 0.005,
 67:       additionalFees1kInrPlus: {
 68:         registration: 7,
 69:         autoDebit: 17,
 70:       },
 71:     },
 72:     UPI: {
 73:       baseFeePercentage: 0.0099,
 74:       additionalFees1kInrPlus: {
 75:         registration: 7,
 76:         autoDebit: 17,
 77:       },
 78:     },
 79:   },
 80: }
 81: 
 82: const stripeConfig = {
 83:   international: {
 84:     MasterCardVisa: {
 85:       platformFeePercentage: 0.03,
 86:       conversionFeePercentage: 0.02,
 87:     },
 88:     AmericanExpress: {
 89:       platformFeePercentage: 0.035,
 90:       conversionFeePercentage: 0.02,
 91:     },
 92:     InternationalCard: {
 93:       platformFeePercentage: 0.043,
 94:       conversionFeePercentage: 0.02,
 95:     },
 96:   },
 97:   billing: {
 98:     subscriptionFeePercentage: 0.007,
 99:   },
100: }
101: 
102: interface PaymentCostsInput {
103:   numCustomers: number
104:   priceInUSD: number
105:   subscriptionFee: number
106:   platformFee: number
107:   gst: number
108:   additionalFees:
109:     | {
110:       registration: number
111:       autoDebit: number
112:     }
113:     | { conversionFee: number }
114: }
115: 
116: interface PaymentCosts {
117:   numCustomers: number
118:   totalCost: number
119:   percentage: number
120:   fees: {
121:     platform: number
122:     subscription: number
123:     gst: number
124:     additionalFees: number
125:   }
126: }
127: 
128: function calculatePaymentCosts({
129:   numCustomers,
130:   priceInUSD,
131:   subscriptionFee,
132:   platformFee,
133:   gst,
134:   additionalFees,
135: }: PaymentCostsInput): PaymentCosts {
136:   const platformCost = USD2INR(priceInUSD * platformFee)
137:   const subscriptionCost = USD2INR(priceInUSD * subscriptionFee)
138:   const gstCost = (platformCost + subscriptionCost) * gst
139: 
140:   let costPerCustomer = platformCost + gstCost + subscriptionCost
141:   let extraCost = 0
142: 
143:   if ('conversionFee' in additionalFees) {
144:     const conversionFee = USD2INR(priceInUSD * additionalFees.conversionFee)
145:     extraCost += conversionFee
146:     costPerCustomer += conversionFee
147:   } else {
148:     extraCost = additionalFees.registration + additionalFees.autoDebit
149:     costPerCustomer += extraCost
150:   }
151: 
152:   return {
153:     numCustomers,
154:     totalCost: costPerCustomer * numCustomers,
155:     percentage: (costPerCustomer / priceInUSD) * 100,
156:     fees: {
157:       platform: platformCost * numCustomers,
158:       subscription: subscriptionCost * numCustomers,
159:       gst: gstCost * numCustomers,
160:       additionalFees: extraCost * numCustomers,
161:     },
162:   }
163: }
164: 
165: interface PlatformFeesInput {
166:   numCustomers: number
167:   paymentMethod: DomesticPaymentMethod | InternationalPaymentMethod
168:   amountInUSD: number
169:   frequency: PaymentFrequency
170: }
171: 
172: // Stripe
173: 
174: function calculateFees({
175:   numCustomers,
176:   paymentMethod,
177:   amountInUSD,
178:   frequency,
179: }: PlatformFeesInput): PaymentCosts {
180:   let subscriptionFee, platformFee, additionalFees, gst
181: 
182:   if (paymentMethod in razorpayConfig.subscription) {
183:     // Handle Razorpay fees
184:     const methodConfig = razorpayConfig.subscription[paymentMethod as DomesticPaymentMethod]
185:     platformFee = razorpayConfig.platformFeePercentage
186:     subscriptionFee = methodConfig.baseFeePercentage
187:     additionalFees = methodConfig.additionalFees1kInrPlus // Specific for Razorpay domestic methods
188:     gst = (platformFee + subscriptionFee) * razorpayConfig.gstPercentage
189:   } else {
190:     // Handle Stripe fees
191:     const methodConfig = stripeConfig.international[paymentMethod as InternationalPaymentMethod]
192:     platformFee = methodConfig.platformFeePercentage
193:     subscriptionFee = stripeConfig.billing.subscriptionFeePercentage // Using a generic subscription fee for all Stripe methods
194:     additionalFees = { conversionFee: methodConfig.conversionFeePercentage } // Specific for Stripe international methods
195:     gst = 0
196:   }
197: 
198:   // Call calculatePaymentCosts for detailed fee calculation
199:   return calculatePaymentCosts({
200:     numCustomers,
201:     priceInUSD: amountInUSD,
202:     subscriptionFee,
203:     platformFee,
204:     gst,
205:     additionalFees,
206:   })
207: }
208: 
209: function getRandomInt(min: number, max: number): number {
210:   min = Math.ceil(min)
211:   max = Math.floor(max)
212:   return Math.floor(Math.random() * (max - min + 1)) + min
213: }
214: 
215: interface HandleSubscriptionParams {
216:   numCustomers: {
217:     pro: number
218:     expert: number
219:   }
220:   isInternational: boolean
221:   frequency: PaymentFrequency
222: }
223: 
224: export function handleSubscriptions({
225:   numCustomers,
226:   isInternational,
227:   frequency,
228: }: HandleSubscriptionParams): ProviderChunk {
229:   const paymentDistribution = isInternational
230:     ? paymentMethodDistribution.international
231:     : paymentMethodDistribution.domestic
232: 
233:   const proDistribution = distributeCustomers(numCustomers.pro, paymentDistribution)
234:   const expertDistribution = distributeCustomers(numCustomers.expert, paymentDistribution)
235: 
236:   let totalCost = 0
237:   let totalCustomers = 0
238:   const provider = isInternational ? 'Stripe' : 'Razorpay'
239: 
240:   const combinedResults: TransactionChunk[] = []
241: 
242:   console.log('Distributed Customers:', proDistribution, expertDistribution)
243: 
244:   Object.keys(paymentDistribution).forEach((paymentMethod) => {
245:     const proCount = proDistribution[paymentMethod] || 0
246:     const expertCount = expertDistribution[paymentMethod] || 0
247: 
248:     const blankTransaction = {
249:       totalCost: 0,
250:       numCustomers: 0,
251:       percentage: 0,
252:       fees: {
253:         platform: 0,
254:         subscription: 0,
255:         gst: 0,
256:         additionalFees: 0,
257:       },
258:     }
259: 
260:     if (proCount > 0 || expertCount > 0) {
261:       const transactionDetailsPro = calculateFees({
262:         numCustomers: proCount,
263:         paymentMethod: paymentMethod as DomesticPaymentMethod | InternationalPaymentMethod,
264:         amountInUSD: subscriptionPrices.Pro,
265:         frequency,
266:       })
267: 
268:       const transactionDetailsExpert = calculateFees({
269:         numCustomers: expertCount,
270:         paymentMethod: paymentMethod as DomesticPaymentMethod | InternationalPaymentMethod,
271:         amountInUSD: subscriptionPrices.Expert,
272:         frequency,
273:       })
274: 
275:       totalCost += transactionDetailsPro.totalCost + transactionDetailsExpert.totalCost
276:       totalCustomers += proCount + expertCount
277:       combinedResults.push({
278:         paymentMethod: paymentMethod as DomesticPaymentMethod | InternationalPaymentMethod,
279:         methodCost: transactionDetailsPro.totalCost + transactionDetailsExpert.totalCost,
280:         methodCustomers: proCount + expertCount,
281:         frequency,
282:         pro: transactionDetailsPro,
283:         expert: transactionDetailsExpert,
284:       })
285:     } else {
286:       combinedResults.push({
287:         paymentMethod: paymentMethod as DomesticPaymentMethod | InternationalPaymentMethod,
288:         methodCost: 0,
289:         methodCustomers: 0,
290:         frequency,
291:         pro: blankTransaction,
292:         expert: blankTransaction,
293:       })
294:     }
295:   })
296: 
297:   return {
298:     provider,
299:     totalCustomers,
300:     totalCost,
301:     transactions: combinedResults,
302:   }
303: }
304: 
305: interface SimulatePurchasesParams {
306:   newCustomers: {
307:     pro: number
308:     expert: number
309:   }
310:   frequency: PaymentFrequency
311: }
312: 
313: export function simulateRealWorldPurchases({
314:   newCustomers,
315:   frequency,
316: }: SimulatePurchasesParams): TransactionDetails {
317:   const razorpayPercentage = getRandomInt(50, 60)
318:   const stripePercentage = 100 - razorpayPercentage
319: 
320:   const razorpayProCustomers = Math.floor(newCustomers.pro * (razorpayPercentage / 100))
321:   const stripeProCustomers = newCustomers.pro - razorpayProCustomers
322: 
323:   const razorpayExpertCustomers = Math.floor(newCustomers.expert * (razorpayPercentage / 100))
324:   const stripeExpertCustomers = newCustomers.expert - razorpayExpertCustomers
325: 
326:   const razorpayTransactions = handleSubscriptions({
327:     numCustomers: {
328:       pro: razorpayProCustomers,
329:       expert: razorpayExpertCustomers,
330:     },
331:     isInternational: false,
332:     frequency,
333:   })
334: 
335:   const stripeTransaction = handleSubscriptions({
336:     numCustomers: {
337:       pro: stripeProCustomers,
338:       expert: stripeExpertCustomers,
339:     },
340:     isInternational: true,
341:     frequency,
342:   })
343: 
344:   return {
345:     totalCost: razorpayTransactions.totalCost + stripeTransaction.totalCost,
346:     totalCustomers: razorpayTransactions.totalCustomers + stripeTransaction.totalCustomers,
347:     razorpay: razorpayTransactions,
348:     stripe: stripeTransaction,
349:   }
350: }
351: 
352: export interface TransactionDetails {
353:   totalCost: number
354:   totalCustomers: number
355:   razorpay: ProviderChunk
356:   stripe: ProviderChunk
357: }
358: 
359: export interface ProviderChunk {
360:   provider: PaymentProvider
361:   totalCustomers: number
362:   totalCost: number
363:   transactions: TransactionChunk[]
364: }
365: 
366: export interface TransactionChunk {
367:   paymentMethod: DomesticPaymentMethod | InternationalPaymentMethod
368:   frequency: PaymentFrequency
369:   methodCost: number
370:   methodCustomers: number
371:   pro: PaymentCosts
372:   expert: PaymentCosts
373: }
```

## File: apps/admin-dashboard/financials/software.ts
```typescript
 1: import { ROUND0, USD2INR } from './helpers'
 2: 
 3: type Subscription = {
 4:   name: string
 5:   baseCost: number
 6:   seatCost: number
 7:   annualDiscount: number
 8:   seatRatio: number
 9: }
10: 
11: const SOFTWARE: Subscription[] = [
12:   {
13:     name: 'ChatGPT',
14:     baseCost: 30,
15:     seatCost: 30,
16:     annualDiscount: 5,
17:     seatRatio: 1,
18:   },
19:   {
20:     name: 'GitHub Teams',
21:     baseCost: 4,
22:     seatCost: 4,
23:     annualDiscount: 0,
24:     seatRatio: 0.65,
25:   },
26:   {
27:     name: 'GitHub Copilot',
28:     baseCost: 19,
29:     seatCost: 19,
30:     annualDiscount: 0,
31:     seatRatio: 0.65,
32:   },
33:   {
34:     name: 'Adobe',
35:     baseCost: 25,
36:     seatCost: 25,
37:     annualDiscount: 0,
38:     seatRatio: 0.15,
39:   },
40:   {
41:     name: 'Google Business',
42:     baseCost: 7.2,
43:     seatCost: 7.2,
44:     annualDiscount: 0,
45:     seatRatio: 1,
46:   },
47:   {
48:     name: 'Posthog',
49:     baseCost: 0,
50:     seatCost: 19,
51:     annualDiscount: 0,
52:     seatRatio: 0.15,
53:   },
54: ]
55: 
56: function calculateMonthlyCost(subscription: Subscription, seats: number): number {
57:   return USD2INR(subscription.baseCost + subscription.seatCost * seats)
58: }
59: 
60: function calculateAnnualCost(subscription: Subscription, seats: number): number {
61:   return (subscription.seatCost - subscription.annualDiscount) * seats
62: }
63: 
64: export interface SoftwareCosts {
65:   totalCost: number
66:   serviceCosts: {
67:     name: string
68:     seats: number
69:     cost: number
70:   }[]
71: }
72: 
73: export function calculateSubscriptionCosts(totalEmployees: number): SoftwareCosts {
74:   const serviceCosts = []
75:   let totalCost = 0
76:   for (const subscription of SOFTWARE) {
77:     const numberOfSeats = ROUND0(Math.ceil(totalEmployees * subscription.seatRatio))
78:     const cost = calculateMonthlyCost(subscription, numberOfSeats)
79:     totalCost += cost
80:     serviceCosts.push({ name: subscription.name, seats: numberOfSeats, cost: ROUND0(cost) })
81:     // const annualCost = calculateAnnualCost(subscription, numberOfSeats);
82:   }
83: 
84:   return { totalCost: ROUND0(totalCost), serviceCosts }
85: }
```

## File: apps/admin-dashboard/financials/storage.ts
```typescript
  1: import type { Content, ContentParams } from './totals'
  2: import { USD2INR } from './helpers'
  3: 
  4: export const SUPABASE_CONFIG = {
  5:   pro: {
  6:     basePrice: 25,
  7:     mauIncluded: 100000,
  8:     mauPrice: 0.00325,
  9:     dbIncludedGB: 8,
 10:     dbPricePerGB: 0.125,
 11:     bandwidthIncludedGB: 250,
 12:     bandwidthPricePerGB: 0.09,
 13:     storageIncludedGB: 100,
 14:     storagePricePerGB: 0.021,
 15:   },
 16: }
 17: 
 18: type SBPlan =
 19:   | 'nano'
 20:   | 'micro'
 21:   | 'small'
 22:   | 'medium'
 23:   | 'large'
 24:   | 'xl'
 25:   | '2xl'
 26:   | '4xl'
 27:   | '8xl'
 28:   | '12xl'
 29:   | '16xl'
 30: 
 31: export const SUPABASE_COMPUTE_CONFIG = {
 32:   plans: {
 33:     'nano': {
 34:       hourly: 0,
 35:       monthly: 0,
 36:       cpu: 'Shared',
 37:       memory: 'Up to 0.5 GB',
 38:       directConnections: 60,
 39:       poolerConnections: 200,
 40:       maxDbSizeGB: 0.5,
 41:     },
 42:     'micro': {
 43:       hourly: 0.01344,
 44:       monthly: 10,
 45:       cpu: '2-core ARM (shared)',
 46:       memory: '1 GB',
 47:       directConnections: 60,
 48:       poolerConnections: 200,
 49:       maxDbSizeGB: 10,
 50:     },
 51:     'small': {
 52:       hourly: 0.0206,
 53:       monthly: 15,
 54:       cpu: '2-core ARM (shared)',
 55:       memory: '2 GB',
 56:       directConnections: 90,
 57:       poolerConnections: 400,
 58:       maxDbSizeGB: 50,
 59:     },
 60:     'medium': {
 61:       hourly: 0.0822,
 62:       monthly: 60,
 63:       cpu: '2-core ARM (shared)',
 64:       memory: '4 GB',
 65:       directConnections: 120,
 66:       poolerConnections: 600,
 67:       maxDbSizeGB: 100,
 68:     },
 69:     'large': {
 70:       hourly: 0.1517,
 71:       monthly: 110,
 72:       cpu: '2-core ARM (dedicated)',
 73:       memory: '8 GB',
 74:       directConnections: 160,
 75:       poolerConnections: 800,
 76:       maxDbSizeGB: 200,
 77:     },
 78:     'xl': {
 79:       hourly: 0.2877,
 80:       monthly: 210,
 81:       cpu: '4-core ARM (dedicated)',
 82:       memory: '16 GB',
 83:       directConnections: 240,
 84:       poolerConnections: 1000,
 85:       maxDbSizeGB: 500,
 86:     },
 87:     '2xl': {
 88:       hourly: 0.562,
 89:       monthly: 410,
 90:       cpu: '8-core ARM (dedicated)',
 91:       memory: '32 GB',
 92:       directConnections: 380,
 93:       poolerConnections: 1500,
 94:       maxDbSizeGB: 1000,
 95:     },
 96:     '4xl': {
 97:       hourly: 1.32,
 98:       monthly: 960,
 99:       cpu: '16-core ARM (dedicated)',
100:       memory: '64 GB',
101:       directConnections: 480,
102:       poolerConnections: 3000,
103:       maxDbSizeGB: 2000,
104:     },
105:     '8xl': {
106:       hourly: 2.562,
107:       monthly: 1870,
108:       cpu: '32-core ARM (dedicated)',
109:       memory: '128 GB',
110:       directConnections: 490,
111:       poolerConnections: 6000,
112:       maxDbSizeGB: 4000,
113:     },
114:     '12xl': {
115:       hourly: 3.836,
116:       monthly: 2800,
117:       cpu: '48-core ARM (dedicated)',
118:       memory: '192 GB',
119:       directConnections: 500,
120:       poolerConnections: 9000,
121:       maxDbSizeGB: 6000,
122:     },
123:     '16xl': {
124:       hourly: 5.12,
125:       monthly: 3730,
126:       cpu: '64-core ARM (dedicated)',
127:       memory: '256 GB',
128:       directConnections: 500,
129:       poolerConnections: 12000,
130:       maxDbSizeGB: 10000,
131:     },
132:   },
133: }
134: 
135: const VECTOR_SIZES = {
136:   large: 1536,
137:   small: 724,
138: }
139: 
140: const AVG_CHARS_PER_WORD = 4.7
141: const BYTES_PER_GB = 1024 ** 3
142: 
143: export function calculateVectorStorage(
144:   vectorSize: number,
145:   numItems: number,
146:   isBinary: boolean = false,
147: ): number {
148:   const bytesPerItem = isBinary ? Math.ceil(vectorSize / 8) : vectorSize * 4
149:   const totalBytes = bytesPerItem * numItems
150:   const totalGB = totalBytes / BYTES_PER_GB
151:   return parseFloat(totalGB.toFixed(3))
152: }
153: 
154: export function calculateContentStorage(numItems: number, contentChars: number): number {
155:   const bytesPerItem = contentChars
156:   const totalBytes = bytesPerItem * numItems
157:   const totalGB = totalBytes / BYTES_PER_GB
158:   return parseFloat(totalGB.toFixed(3))
159: }
160: 
161: type SupabaseCostParams = {
162:   monthlyActiveUsers: number
163:   dbStorageGB: number
164:   bandwidthGB: number
165:   fileStorageGB: number
166: }
167: 
168: type ComputeCostParams = {
169:   plan: SBPlan
170:   hoursUsed: number
171: }
172: 
173: function calculateComputeCost(params: ComputeCostParams): {
174:   total: number
175:   hourly: number
176:   monthly: number
177: } {
178:   const { plan, hoursUsed } = params
179:   const planDetails = SUPABASE_COMPUTE_CONFIG.plans[plan]
180: 
181:   if (!planDetails) {
182:     throw new Error('Unsupported compute plan')
183:   }
184: 
185:   const hourlyCost = planDetails.hourly * hoursUsed
186:   const monthlyCost = planDetails.monthly
187:   return {
188:     total: hourlyCost + monthlyCost,
189:     hourly: hourlyCost,
190:     monthly: monthlyCost,
191:   }
192: }
193: 
194: interface SupabaseCostBreakdown {
195:   total: number
196:   base: number
197:   mau: number
198:   dbStorage: number
199:   bandwidth: number
200:   fileStorage: number
201: }
202: 
203: function calculateStorageCost(params: SupabaseCostParams): SupabaseCostBreakdown {
204:   const { monthlyActiveUsers, dbStorageGB, bandwidthGB, fileStorageGB } = params
205: 
206:   const {
207:     basePrice,
208:     mauIncluded,
209:     mauPrice,
210:     dbIncludedGB,
211:     dbPricePerGB,
212:     bandwidthIncludedGB,
213:     bandwidthPricePerGB,
214:     storageIncludedGB,
215:     storagePricePerGB,
216:   } = SUPABASE_CONFIG.pro
217: 
218:   const additionalMauCost
219:     = monthlyActiveUsers > mauIncluded ? (monthlyActiveUsers - mauIncluded) * mauPrice : 0
220: 
221:   const additionalDbStorageCost
222:     = dbStorageGB > dbIncludedGB ? (dbStorageGB - dbIncludedGB) * dbPricePerGB : 0
223: 
224:   const additionalBandwidthCost
225:     = bandwidthGB > bandwidthIncludedGB
226:       ? (bandwidthGB - bandwidthIncludedGB) * bandwidthPricePerGB
227:       : 0
228: 
229:   const additionalFileStorageCost
230:     = fileStorageGB > storageIncludedGB ? (fileStorageGB - storageIncludedGB) * storagePricePerGB : 0
231: 
232:   const totalCost
233:     = basePrice
234:     + additionalMauCost
235:     + additionalDbStorageCost
236:     + additionalBandwidthCost
237:     + additionalFileStorageCost
238: 
239:   return {
240:     total: parseFloat(totalCost.toFixed(3)),
241:     base: parseFloat(basePrice.toFixed(3)),
242:     mau: parseFloat(additionalMauCost.toFixed(3)),
243:     dbStorage: parseFloat(additionalDbStorageCost.toFixed(3)),
244:     bandwidth: parseFloat(additionalBandwidthCost.toFixed(3)),
245:     fileStorage: parseFloat(additionalFileStorageCost.toFixed(3)),
246:   }
247: }
248: 
249: function determineComputePlan(dbStorageGB: number): SBPlan {
250:   console.log('DB Storage:', dbStorageGB)
251:   const plans = Object.keys(SUPABASE_COMPUTE_CONFIG.plans) as SBPlan[]
252:   for (const plan of plans) {
253:     const maxDbSize = SUPABASE_COMPUTE_CONFIG.plans[plan].maxDbSizeGB
254:     if (dbStorageGB <= maxDbSize) {
255:       return plan
256:     }
257:   }
258:   return '16xl'
259: }
260: 
261: interface StorageResult {
262:   total: number
263:   db: number
264:   vector: number
265:   details: {
266:     content: {
267:       type: string
268:       count: number
269:       avgChars: number
270:       totalChars: number
271:     }
272:     storage: {
273:       total: number
274:       db: number
275:       vector: number
276:     }
277:   }[]
278: }
279: 
280: function calculateStorageUsage(
281:   contentParams: ContentParams[],
282:   currentMonth: number,
283: ): StorageResult {
284:   let totalDbStorageGB = 0
285:   let totalVectorStorageGB = 0
286: 
287:   const details = []
288: 
289:   for (const { CONTENT_TYPE, TOTAL, CHARS, PROCESSED } of contentParams) {
290:     // console.log('DATABASE', CONTENT_TYPE, TOTAL, WORDS, PROCESSED)
291:     const contentStorage = calculateContentStorage(TOTAL, CHARS.CONTENT + CHARS.OUTPUT)
292:     const vectorStorage = calculateVectorStorage(VECTOR_SIZES.large, CHARS.CHUNKS * PROCESSED)
293: 
294:     totalDbStorageGB += contentStorage
295:     totalVectorStorageGB += vectorStorage
296: 
297:     details.push({
298:       content: {
299:         type: CONTENT_TYPE,
300:         count: TOTAL,
301:         avgChars: CHARS.CONTENT,
302:         totalChars: CHARS.CONTENT * TOTAL,
303:         totalChunks: CHARS.CHUNKS * TOTAL,
304:       },
305:       storage: {
306:         total: contentStorage + vectorStorage,
307:         db: contentStorage,
308:         vector: vectorStorage,
309:       },
310:     })
311:   }
312: 
313:   return {
314:     total: parseFloat((totalDbStorageGB + totalVectorStorageGB).toFixed(3)),
315:     db: parseFloat(totalDbStorageGB.toFixed(3)),
316:     vector: parseFloat(totalVectorStorageGB.toFixed(3)),
317:     details,
318:   }
319: }
320: 
321: export function calculateSupabaseCosts(
322:   mau: number,
323:   currentMonth: number,
324:   contentParams: ContentParams[],
325: ): StorageCostResult {
326:   console.log('Content Params:', contentParams, mau)
327:   const storage = calculateStorageUsage(contentParams, currentMonth)
328:   const computePlan = determineComputePlan(storage.total)
329: 
330:   console.log('Compute Plan:', computePlan)
331: 
332:   const computeCost = calculateComputeCost({
333:     plan: computePlan,
334:     hoursUsed: 730, // Assuming 24/7 usage, can we make dynamic?
335:   })
336: 
337:   // Calculate bandwidth and file storage dynamically based on MAU
338:   // EXTRACT
339:   const bandwidthGB = Math.max(250, mau * 0.05)
340:   const fileStorageGB = Math.max(100, mau * 0.01)
341: 
342:   const storageCost = calculateStorageCost({
343:     monthlyActiveUsers: mau,
344:     dbStorageGB: storage.total,
345:     bandwidthGB,
346:     fileStorageGB,
347:   })
348: 
349:   return {
350:     totalCost: USD2INR(computeCost.total + storageCost.total),
351:     storage: {
352:       cost: {
353:         total: USD2INR(storageCost.total),
354:         base: USD2INR(storageCost.base),
355:         mau: USD2INR(storageCost.mau),
356:         db: USD2INR(storageCost.dbStorage),
357:         bandwidth: USD2INR(storageCost.bandwidth),
358:         fileStorage: USD2INR(storageCost.fileStorage),
359:       },
360:       data: storage,
361:     },
362:     compute: {
363:       plan: computePlan,
364:       cost: {
365:         total: USD2INR(computeCost.total),
366:         hourly: USD2INR(computeCost.hourly),
367:         monthly: USD2INR(computeCost.monthly),
368:       },
369:     },
370:   }
371: }
372: 
373: export interface StorageCostResult {
374:   totalCost: number
375:   storage: {
376:     cost: {
377:       total: number
378:       base: number
379:       mau: number
380:       db: number
381:       bandwidth: number
382:       fileStorage: number
383:     }
384:     data: StorageResult
385:   }
386:   compute: {
387:     plan: SBPlan
388:     cost: {
389:       total: number
390:       hourly: number
391:       monthly: number
392:     }
393:   }
394: }
```

## File: apps/admin-dashboard/financials/totals.ts
```typescript
  1: import fs from 'fs/promises'
  2: import path from 'path'
  3: import { calculateSupabaseCosts } from './storage'
  4: import { calculateAiCost, COST_CONFIG } from './gpt'
  5: import { calculateDigitalOceanCost } from './digital-ocean'
  6: import { calculateLogsCost, type LoggingResult } from './logging'
  7: import { calculateDevopsCosts } from './dev-ops'
  8: import { calculateEmployeeCost } from './employee'
  9: import { calculateSubscriptionCosts, type SoftwareCosts } from './software'
 10: import { calculateOfficeCosts } from './office'
 11: import { calculateInitialLoan, calculateRemainingBalance } from './capital'
 12: import { calculateRevenue, INCOME_STREAMS } from './customers'
 13: import { calculateAllMetrics } from './metrics'
 14: import { generateInfo } from './gen-info'
 15: import { calculateCostPerUser } from './metrics-users'
 16: import { calculateMarketingCost } from './marketing'
 17: import { simulateRealWorldPurchases, type TransactionDetails } from './payments'
 18: import { calculateAnalyticsCost, type AnalyticsResult } from './analytics'
 19: 
 20: import type { AllMetrics } from './metrics'
 21: import type { CapitalResult, LoanResult } from './capital'
 22: import type { StorageCostResult } from './storage'
 23: import type { DigitalOceanResult } from './digital-ocean'
 24: import type { DevopsResult } from './dev-ops'
 25: import type { OfficeResult } from './office'
 26: import type { EmployeeResult } from './employee'
 27: import type { AiCostResult } from './gpt'
 28: import type { RevenueResult } from './customers'
 29: import type { InfoResult } from './gen-info'
 30: 
 31: import {
 32:   EFFICIENCY_FACTOR,
 33:   CHURN_TO_LIFESPAN_MONTHS,
 34:   WORDS_TO_CHAR_CHUNKS,
 35:   WORDS_TO_CHARS,
 36: } from './helpers'
 37: 
 38: // set hard limits for devops usage
 39: 
 40: // we should cap free users usage wherever possible, removing any paid services if possible.
 41: 
 42: // Consider capping the total number of free users for different stages, eg Alpha, Beta, etc.
 43: 
 44: // only run this function once, use a button to trigger it
 45: 
 46: // extract configs where possible, should be easy to update in one place
 47: 
 48: // Try to narrow down the margin per user, how many free users will be paid users allow.
 49: // This can be used to create our minimum conversion threshold
 50: 
 51: // include daily active users, this can be used to narrow down the difference between highly active users and slightly active users.
 52: 
 53: // incorporate discounts / promotions for free use of paid products, trials etc.
 54: // Calculate revenue per user in each tier, for example free / pro / expert. free will still generate revenue through ads, etc.
 55: 
 56: // estimate Customer Acquisition Cost (CAC): Cost to acquire a new paying user. (use cost based on employee, software and average)
 57: // estimate Customer Lifetime Value (CLV): Revenue generated by a user over their lifetime. (need to research averages)
 58: // We need to factor in a payment gateway and any associated costs
 59: // Mailchimp or some other email marketing platform should be considered
 60: // Email automation for supabase signups, sendgrid is what we use (I think)
 61: // switch to Cloudflare for the CDN, this will save vs Vercel
 62: // Sentry for error tracking, may not need if we can use BetterStack
 63: // Break-even Point try to calculate this exactly, so we can display on a chart
 64: // seperate expenses into Fixed Costs, Variable Costs, Infrastructure, Third-Party Service, Support
 65: 
 66: // STILL TO FIX
 67: // Razorpay is only showing transactions to the 21st month
 68: // input and output cost for GPT is the same??
 69: 
 70: export type CompanyStage = 'start' | 'growth' | 'scaling' | 'secure'
 71: export type Content = 'NEWS' | 'RESEARCH_ABSTRACTS' | 'RESEARCH_PAPERS' | 'JOBS' | 'COMPANIES'
 72: export type StageConfig = Record<Content, ProcessdContentConfig>
 73: 
 74: export type ContentScalingRules = {
 75:   [key in Content]: {
 76:     totalContentStored: number
 77:     totalVectorStored: number
 78:     sourceGrowthRate: number // Growth rate for sources
 79:     additionsGrowthRate: number // Growth rate for per source additions
 80:     monthlyProcessingGrowthRate: number // Growth rate for monthly processed items
 81:   }
 82: }
 83: 
 84: function scaleContentConfig(
 85:   CONTENT_CONFIG: StageConfig,
 86:   currentMonth: number,
 87:   rules: ContentScalingRules,
 88: ): StageConfig {
 89:   const scaledConfig: StageConfig = JSON.parse(JSON.stringify(CONTENT_CONFIG)) // Deep copy to avoid mutations
 90: 
 91:   for (const contentType in scaledConfig) {
 92:     const content = scaledConfig[contentType as keyof StageConfig]
 93:     const rule = rules[contentType as Content]
 94: 
 95:     // Calculate scaling factors for the month
 96:     const sourceFactor = 1 + rule.sourceGrowthRate * currentMonth
 97:     const additionsFactor = 1 + rule.additionsGrowthRate * currentMonth
 98:     const monthlyProcessingFactor = 1 + rule.monthlyProcessingGrowthRate * currentMonth
 99: 
100:     // console.log('Scaling Factors:', sourceFactor, additionsFactor, monthlyProcessingFactor)
101: 
102:     if (currentMonth === 1) {
103:       // Initialize totals for the first month
104:       rule.totalVectorStored = content.PROCESSED
105:       rule.totalContentStored = content.TOTAL
106:     }
107: 
108:     // Scale the sources and per source additions
109:     content.SOURCES = Math.ceil(content.SOURCES * sourceFactor)
110:     content.PER_SOURCE_ADDITIONS = Math.ceil(content.PER_SOURCE_ADDITIONS * additionsFactor)
111: 
112:     // Calculate new content added and processed this month
113:     const newContentAdded = content.SOURCES * content.PER_SOURCE_ADDITIONS
114:     const newContentProcessed = Math.ceil(content.PROCESSED_MONTHLY * monthlyProcessingFactor)
115: 
116:     // Update total content and vectors stored
117:     rule.totalContentStored += newContentAdded
118:     rule.totalVectorStored += newContentProcessed
119: 
120:     // Update the content configuration
121:     content.PROCESSED_MONTHLY = newContentProcessed
122:     content.PROCESSED = rule.totalVectorStored
123:     content.TOTAL = rule.totalContentStored
124:   }
125: 
126:   console.log('Scaled Content Config for Month:', currentMonth, scaledConfig)
127:   return scaledConfig
128: }
129: 
130: function determineCompanyStage(mau: number): CompanyStage {
131:   if (mau < 10000) return 'start'
132:   if (mau < 100000) return 'growth'
133:   if (mau < 500000) return 'scaling'
134:   return 'secure'
135: }
136: 
137: interface Growth {
138:   mau: {
139:     total: number
140:     new: number
141:     existing: number
142:     churned: number
143:   }
144:   revenue: RevenueResult
145: }
146: 
147: interface AllCost {
148:   totals: {
149:     monthlyINR: number
150:     employees: number
151:     office: number
152:     storage: number
153:     digitalOcean: number
154:     logging: number
155:     devOps: number
156:     openAI: number
157:     loan: number
158:     analytics: number
159:     marketing: number
160:     software: number
161:     payments: number
162:   }
163:   employees: EmployeeResult
164:   office: OfficeResult
165:   storage: StorageCostResult
166:   digitalOcean: DigitalOceanResult
167:   logging: LoggingResult
168:   devOps: DevopsResult
169:   openAI: AiCostResult
170:   loan: LoanResult
171:   analytics: AnalyticsResult
172:   software: SoftwareCosts
173:   payments: TransactionDetails
174: }
175: 
176: export type ContentParams = {
177:   CONTENT_TYPE: Content
178:   TOTAL: number
179:   PROCESSED: number
180:   CHARS: {
181:     CONTENT: number
182:     CHUNKS: number
183:     PROMPT: number
184:     OUTPUT: number
185:   }
186: }
187: 
188: const AVG_MAU_USAGE = 0.01
189: 
190: export interface AllData {
191:   mau: any[]
192:   customers: any[]
193:   capital: CapitalResult[]
194:   revenue: RevenueResult[]
195:   affiliate: any[]
196:   advertising: any[]
197:   promotion: any[]
198:   totals: any[]
199:   employees: any[]
200:   office: any[]
201:   storage: any[]
202:   digitalOcean: any[]
203:   logging: any[]
204:   analytics: any[]
205:   software: SoftwareCosts[]
206:   devOps: any[]
207:   payments: any[]
208:   openAI: any[]
209:   metrics: AllMetrics[]
210:   months: number[]
211:   stages: CompanyStage[]
212: }
213: 
214: export function calculateBusinessMetrics(params: BusinessMetricsConfig): AllData {
215:   const allData: AllData = {
216:     mau: [],
217:     customers: [],
218:     capital: [],
219:     revenue: [],
220:     affiliate: [],
221:     advertising: [],
222:     promotion: [],
223:     totals: [],
224:     employees: [],
225:     office: [],
226:     storage: [],
227:     digitalOcean: [],
228:     logging: [],
229:     analytics: [],
230:     devOps: [],
231:     software: [],
232:     payments: [],
233:     openAI: [],
234:     metrics: [],
235:     months: [],
236:     stages: [],
237:   }
238: 
239:   let previousMonth = {
240:     revenue: 0,
241:     effectiveRevenue: 0,
242:     expenses: 0,
243:     balance: 0,
244:     mau: {
245:       total: 0,
246:       new: 0,
247:       churned: 0,
248:       churnRate: 0,
249:     },
250:     customers: {
251:       all: 0,
252:       pro: 0,
253:       expert: 0,
254:     },
255:   }
256: 
257:   for (let month = 1; month <= params.PROJECTION.MONTHS; month++) {
258:     const marketingCost = calculateMarketingCost({
259:       mrr: previousMonth.revenue,
260:       percentage: params.MRR_MARKETING_PERCENTAGE_SPEND,
261:     })
262: 
263:     const scaledContentConfig = scaleContentConfig(
264:       params.CONTENT_CONFIG,
265:       month,
266:       params.SCALING_RULES,
267:     )
268: 
269:     // Calculate new MAU
270:     let mau = Math.ceil(
271:       previousMonth.mau.total * (1 + params.PROJECTION.MONTHLY_GROWTH_RATE)
272:       + params.PROJECTION.MANUAL_GROWTH_RATE * month,
273:     )
274: 
275:     const churnedMAU = Math.ceil(previousMonth.mau.total * previousMonth.mau.churnRate)
276:     const newMAU = mau - (previousMonth.mau.total - churnedMAU)
277:     mau -= churnedMAU
278: 
279:     const companyStage = determineCompanyStage(previousMonth.mau.total)
280: 
281:     const revenue = calculateRevenue({
282:       mau: {
283:         total: mau,
284:         new: newMAU,
285:       },
286:       customers: {
287:         pro: previousMonth.customers.pro,
288:         expert: previousMonth.customers.expert,
289:       },
290:     })
291: 
292:     const payments = simulateRealWorldPurchases({
293:       newCustomers: {
294:         pro: revenue.customers.pro.new,
295:         expert: revenue.customers.expert.new,
296:       },
297:       frequency: 'Monthly',
298:     })
299: 
300:     const logging = calculateLogsCost({
301:       MAU: mau,
302:       avgMauUsage: AVG_MAU_USAGE,
303:       month,
304:       teamMembers: 1,
305:     })
306:     const devOps = calculateDevopsCosts(mau)
307:     const openAI = calculateAiCost({
308:       mau,
309:       customers: {
310:         pro: revenue.customers.pro.count,
311:         expert: revenue.customers.expert.count,
312:       },
313:       isBatch: false,
314:       CONTENT_CONFIG: scaledContentConfig,
315:     })
316: 
317:     const contentParams = Object.entries(scaledContentConfig).map(
318:       ([contentType, contentConfig]) => ({
319:         CONTENT_TYPE: contentType as Content,
320:         CHARS: contentConfig.CHARS,
321:         TOTAL: contentConfig.TOTAL,
322:         PROCESSED: contentConfig.PROCESSED,
323:       }),
324:     )
325:     const supabase = calculateSupabaseCosts(mau, month, contentParams)
326: 
327:     const analytics = calculateAnalyticsCost({
328:       MAU: mau,
329:       month,
330:       avgMauUsage: 300,
331:     })
332: 
333:     const employees = calculateEmployeeCost({
334:       mau,
335:       stage: companyStage,
336:       month: month,
337:       bootstrapMonths: params.BOOTSTRAP_MONTHS,
338:     })
339: 
340:     const office = calculateOfficeCosts(employees.totalCount)
341:     const digitalOcean = calculateDigitalOceanCost({ bandwidthGB: supabase.storage.data.total * 2 })
342:     const devOpsCost = mau > 100_000 ? devOps.inhouse.cost.total : devOps.vercel.cost.total
343:     const software = calculateSubscriptionCosts(employees.totalCount)
344: 
345:     const userExpenses
346:       = supabase.totalCost
347:       + digitalOcean.cost
348:       + logging.total
349:       + devOpsCost
350:       + analytics.total
351:       + marketingCost
352: 
353:     const monthlyExpenses
354:       = employees.totalCost
355:       + supabase.totalCost
356:       + devOpsCost
357:       + digitalOcean.cost
358:       + logging.total
359:       + openAI.cost.total
360:       + office.total
361:       + analytics.total
362:       + software.totalCost
363:       + marketingCost
364:       + payments.totalCost
365: 
366:     console.log('Monthly Expenses:', {
367:       employees: employees.totalCost,
368:       supabase: supabase.totalCost,
369:       devOps: devOpsCost,
370:       digitalOcean: digitalOcean.cost,
371:       logging: logging.total,
372:       openAI: openAI.cost.total,
373:       office: office.total,
374:       analytics: analytics.total,
375:       software: software.totalCost,
376:       marketing: marketingCost,
377:       payments: payments.totalCost,
378:     })
379: 
380:     const totalCustomers = revenue.customers.pro.count + revenue.customers.expert.count
381:     const metrics = calculateAllMetrics({
382:       marketing: {
383:         cost: marketingCost,
384:         leads: 0,
385:       },
386:       currentMonth: month,
387:       expenses: {
388:         total: monthlyExpenses,
389:         free: userExpenses + openAI.chat.free.cost.total,
390:         pro: userExpenses + openAI.chat.pro.cost.total,
391:         expert: userExpenses + openAI.chat.expert.cost.total,
392:       },
393:       revenue: {
394:         free: revenue.total.free,
395:         pro: revenue.customers.pro.revenue,
396:         expert: revenue.customers.expert.revenue,
397:       },
398:       users: {
399:         mau,
400:         free: mau - totalCustomers,
401:         pro: revenue.customers.pro.count,
402:         expert: revenue.customers.expert.count,
403:         totalCustomers: totalCustomers,
404:         new: newMAU,
405:         newCustomers: revenue.customers.pro.new + revenue.customers.expert.new,
406:       },
407:     })
408: 
409:     const capital = calculateRemainingBalance({
410:       loan: params.LOAN,
411:       month,
412:       initialCapital: params.INITIAL_CAPITAL,
413:       bootstrapMonths: params.BOOTSTRAP_MONTHS,
414:       expenses: monthlyExpenses,
415:       income: metrics.monthlyRecurringRevenue.effective,
416:     })
417: 
418:     allData.totals.push({
419:       expenses: {
420:         total: parseInt(monthlyExpenses.toFixed(0)),
421:       },
422:       income: {
423:         total: revenue.total.revenue,
424:         effective: metrics.monthlyRecurringRevenue.effective,
425:       },
426:       employees: employees.totalCost,
427:       office: office.total,
428:       storage: supabase.totalCost,
429:       digitalOcean: digitalOcean.cost,
430:       logging: logging.total,
431:       devOps: devOpsCost,
432:       openAI: openAI.cost.total,
433:       loan: capital.loan.monthlyInterestOnlyPayment,
434:       analytics: analytics.total,
435:       marketing: marketingCost,
436:       software: software.totalCost,
437:       payments: payments.totalCost,
438:     })
439:     allData.metrics.push(metrics)
440:     allData.employees.push(employees)
441:     allData.office.push(office)
442:     allData.storage.push(supabase)
443:     allData.digitalOcean.push(digitalOcean)
444:     allData.logging.push(logging)
445:     allData.devOps.push(devOps)
446:     allData.openAI.push(openAI)
447:     allData.capital.push(capital)
448:     allData.analytics.push(analytics)
449:     allData.software.push(software)
450:     allData.payments.push(payments)
451:     allData.revenue.push(revenue)
452:     allData.customers.push(revenue.customers)
453:     allData.months.push(month)
454:     allData.stages.push(companyStage)
455: 
456:     previousMonth = {
457:       revenue: metrics.monthlyRecurringRevenue.effective,
458:       effectiveRevenue: metrics.monthlyRecurringRevenue.effective,
459:       expenses: monthlyExpenses,
460:       balance: capital.balance.end,
461:       mau: {
462:         total: mau,
463:         new: newMAU,
464:         churned: churnedMAU,
465:         churnRate: metrics.churn.free.rate,
466:       },
467:       customers: {
468:         all: totalCustomers,
469:         pro: revenue.customers.pro.count,
470:         expert: revenue.customers.expert.count,
471:       },
472:     }
473:   }
474: 
475:   return allData
476: }
477: 
478: type ScalingRules = {
479:   [key in Content]: {
480:     totalContentStored: number
481:     totalVectorStored: number
482:     sourceGrowthRate: number
483:     additionsGrowthRate: number
484:     monthlyProcessingGrowthRate: number
485:   }
486: }
487: 
488: type BusinessMetricsConfig = {
489:   BOOTSTRAP_MONTHS: number
490:   INITIAL_CAPITAL: number
491:   MRR_MARKETING_PERCENTAGE_SPEND: number
492:   MONTHLY_CHURN: {
493:     MAU: {
494:       PESSIMISTIC: number
495:       OPTIMISTIC: number
496:     }
497:     CUSTOMERS: {
498:       PESSIMISTIC: number
499:       OPTIMISTIC: number
500:     }
501:   }
502:   CURRENT: {
503:     MAU: number
504:     USD_TO_INR: number
505:     EXPENSES: number
506:     REVENUE: number
507:   }
508:   LOAN: {
509:     AMOUNT: number
510:     ANNUAL_INTEREST_RATE: number
511:     TERM_IN_YEARS: number
512:   }
513:   PROJECTION: {
514:     MONTHS: number
515:     MONTHLY_GROWTH_RATE: number
516:     MANUAL_GROWTH_RATE: number
517:     USAGE_HOURS_PER_DAY: number
518:     USAGE_GROWTH_FACTOR: number
519:     MAX_DAILY_USAGE: number
520:   }
521:   DEVOPS_USAGE: {
522:     DATA_TRANSFER_GB: number
523:     ORIGIN_TRANSFER_GB: number
524:     EDGE_REQUESTS: number
525:     MIDDLEWARE_INVOCATIONS: number
526:     SOURCE_IMAGES: number
527:     FUNCTION_INVOCATIONS: number
528:     FUNCTION_DURATION_GB_HOURS: number
529:     EDGE_FUNCTION_EXECUTIONS: number
530:     DATA_CACHE_READS: number
531:     DATA_CACHE_WRITES: number
532:     EDGE_CONFIG_READS: number
533:     EDGE_CONFIG_WRITES: number
534:     MONITORING_EVENTS: number
535:     SPEED_INSIGHTS_DATA_POINTS: number
536:     WEB_ANALYTICS_EVENTS: number
537:   }
538:   CONTENT_CONFIG: {
539:     NEWS: ProcessdContentConfig
540:     // RESEARCH_ABSTRACTS: ProcessdContentConfig
541:     // RESEARCH_PAPERS: ProcessdContentConfig
542:     COMPANIES: ProcessdContentConfig
543:     JOBS: ProcessdContentConfig
544:   }
545:   SCALING_RULES: ScalingRules
546: }
547: 
548: export type ProcessdContentConfig = {
549:   PROCESSED: number
550:   TOTAL: number
551:   SOURCES: number
552:   PER_SOURCE_ADDITIONS: number
553:   PROCESSED_MONTHLY: number
554:   CHARS: {
555:     CONTENT: number
556:     CHUNKS: number
557:     PROMPT: number
558:     OUTPUT: number
559:   }
560: }
561: 
562: export const metricConfig = {
563:   BOOTSTRAP_MONTHS: 12,
564:   INITIAL_CAPITAL: 1_40_000,
565:   MRR_MARKETING_PERCENTAGE_SPEND: 0.1,
566:   MONTHLY_CHURN: {
567:     MAU: {
568:       PESSIMISTIC: 0.1,
569:       OPTIMISTIC: 0.05,
570:     },
571:     PRO: {
572:       PESSIMISTIC: 0.1,
573:       OPTIMISTIC: 0.04,
574:     },
575:     EXPERT: {
576:       PESSIMISTIC: 0.09,
577:       OPTIMISTIC: 0.04,
578:     },
579:   },
580:   CURRENT: {
581:     MAU: 100,
582:     USD_TO_INR: 83.4,
583:     REVENUE: 0,
584:   },
585:   LOAN: {
586:     AMOUNT: 10_00_000,
587:     ANNUAL_INTEREST_RATE: 0.0,
588:     TERM_IN_YEARS: 2,
589:     GRACE_PERIOD: 7,
590:   },
591:   PROJECTION: {
592:     MONTHS: 12,
593:     MONTHLY_GROWTH_RATE: 0.2,
594:     MANUAL_GROWTH_RATE: 100,
595:     USAGE_HOURS_PER_DAY: 0.1,
596:     USAGE_GROWTH_FACTOR: 0.1,
597:     MAX_DAILY_USAGE: 1.5,
598:   },
599:   DEVOPS_USAGE: {
600:     DATA_TRANSFER_GB: 0.015,
601:     ORIGIN_TRANSFER_GB: 0.001,
602:     EDGE_REQUESTS: 150,
603:     MIDDLEWARE_INVOCATIONS: 75,
604:     SOURCE_IMAGES: 0,
605:     FUNCTION_INVOCATIONS: 75,
606:     FUNCTION_DURATION_GB_HOURS: 0.08,
607:     EDGE_FUNCTION_EXECUTIONS: 75,
608:     DATA_CACHE_READS: 800,
609:     DATA_CACHE_WRITES: 75,
610:     EDGE_CONFIG_READS: 50,
611:     EDGE_CONFIG_WRITES: 0.1,
612:     MONITORING_EVENTS: 0,
613:     SPEED_INSIGHTS_DATA_POINTS: 0,
614:     WEB_ANALYTICS_EVENTS: 0,
615:   },
616:   CONTENT_CONFIG: {
617:     NEWS: {
618:       PROCESSED: 0,
619:       TOTAL: 120_000,
620:       SOURCES: 15,
621:       PER_SOURCE_ADDITIONS: 30,
622:       PROCESSED_MONTHLY: 2_000,
623:       CHARS: {
624:         CONTENT: WORDS_TO_CHARS(1000),
625:         CHUNKS: WORDS_TO_CHAR_CHUNKS(1000),
626:         PROMPT: WORDS_TO_CHARS(100),
627:         OUTPUT: WORDS_TO_CHARS(240),
628:       },
629:     },
630:     // RESEARCH_ABSTRACTS: {
631:     //   PROCESSED: 0,
632:     //   TOTAL: 2_400_000,
633:     //   SOURCES: 2,
634:     //   PER_SOURCE_ADDITIONS: 1_300,
635:     //   PROCESSED_MONTHLY: 10_000,
636:     //   CHARS: {
637:     //     CONTENT: WORDS_TO_CHARS(280),
638:     //     CHUNKS: WORDS_TO_CHAR_CHUNKS(280),
639:     //     PROMPT: WORDS_TO_CHARS(50),
640:     //     OUTPUT: WORDS_TO_CHARS(60)
641:     //   }
642:     // },
643:     // RESEARCH_PAPERS: {
644:     //   PROCESSED: 0,
645:     //   TOTAL: 1000,
646:     //   SOURCES: 2,
647:     //   PER_SOURCE_ADDITIONS: 10_000,
648:     //   PROCESSED_MONTHLY: 10_000,
649:     //   CHARS: {
650:     //     CONTENT: WORDS_TO_CHARS(10_000),
651:     //     CHUNKS: WORDS_TO_CHAR_CHUNKS(10_000),
652:     //     PROMPT: WORDS_TO_CHARS(100),
653:     //     OUTPUT: WORDS_TO_CHARS(400)
654:     //   }
655:     // },
656:     COMPANIES: {
657:       PROCESSED: 0,
658:       TOTAL: 4_500,
659:       SOURCES: 1,
660:       PER_SOURCE_ADDITIONS: 150,
661:       PROCESSED_MONTHLY: 500,
662:       CHARS: {
663:         CONTENT: WORDS_TO_CHARS(20_000),
664:         CHUNKS: WORDS_TO_CHAR_CHUNKS(20_000),
665:         PROMPT: WORDS_TO_CHARS(200),
666:         OUTPUT: WORDS_TO_CHARS(1_000),
667:       },
668:     },
669:     JOBS: {
670:       PROCESSED: 0,
671:       TOTAL: 3_000,
672:       SOURCES: 5,
673:       PER_SOURCE_ADDITIONS: 30,
674:       PROCESSED_MONTHLY: 2_000,
675:       CHARS: {
676:         CONTENT: WORDS_TO_CHARS(1_000),
677:         CHUNKS: WORDS_TO_CHAR_CHUNKS(1_000),
678:         PROMPT: WORDS_TO_CHARS(120),
679:         OUTPUT: WORDS_TO_CHARS(100),
680:       },
681:     },
682:   },
683:   SCALING_RULES: {
684:     // 0.1 = 10%
685:     NEWS: {
686:       totalContentStored: 0,
687:       totalVectorStored: 0,
688:       sourceGrowthRate: 0.15,
689:       additionsGrowthRate: 0.15,
690:       monthlyProcessingGrowthRate: 0.1,
691:     },
692:     // RESEARCH_ABSTRACTS: {
693:     //   totalContentStored: 0,
694:     //   totalVectorStored: 0,
695:     //   sourceGrowthRate: 0.02,
696:     //   additionsGrowthRate: 0.02,
697:     //   monthlyProcessingGrowthRate: 0.07
698:     // },
699:     // RESEARCH_PAPERS: {
700:     //   totalContentStored: 0,
701:     //   totalVectorStored: 0,
702:     //   sourceGrowthRate: 0.01,
703:     //   additionsGrowthRate: 0.01,
704:     //   monthlyProcessingGrowthRate: 0.02
705:     // },
706:     COMPANIES: {
707:       totalContentStored: 0,
708:       totalVectorStored: 0,
709:       sourceGrowthRate: 0.005,
710:       additionsGrowthRate: 0.06,
711:       monthlyProcessingGrowthRate: 0.05,
712:     },
713:     JOBS: {
714:       totalContentStored: 0,
715:       totalVectorStored: 0,
716:       sourceGrowthRate: 0.05,
717:       additionsGrowthRate: 0.1,
718:       monthlyProcessingGrowthRate: 0.05,
719:     },
720:   },
721: }
722: 
723: export async function generateBusinessMetrics() {
724:   const data = calculateBusinessMetrics(metricConfig)
725: 
726:   try {
727:     // Ensure the directory exists
728:     await fs.mkdir(path.dirname('./assets/business-financials.json'), { recursive: true })
729: 
730:     // Write the data to a JSON file
731:     await fs.writeFile('./financials/business-financials.json', JSON.stringify(data, null, 2))
732:     console.log('Business metrics data has been written to business-metrics.json')
733:   } catch (error) {
734:     console.error('Error writing business metrics data to file:', error)
735:   }
736: }
737: 
738: // Only run this when called directly
739: if (require.main === module) {
740:   generateBusinessMetrics()
741: }
```

## File: apps/admin-dashboard/layouts/default.vue
```vue
  1: <script setup lang="ts">
  2: const { aeAppUrl } = useRuntimeConfig().public
  3: 
  4: const adminLinks = ref([
  5:   {
  6:     id: 0,
  7:     label: 'App',
  8:     slug: aeAppUrl,
  9:     icon: 'mdi:application',
 10:   },
 11:   {
 12:     id: 1,
 13:     label: 'Growth',
 14:     slug: '/growth',
 15:     icon: 'mdi:account',
 16:     children: [],
 17:   },
 18:   {
 19:     id: 2,
 20:     label: 'Dashboard',
 21:     slug: '/',
 22:     icon: 'mdi:view-dashboard',
 23:     children: [],
 24:   },
 25:   {
 26:     id: 3,
 27:     label: 'Users',
 28:     slug: '/users',
 29:     icon: 'mdi:account',
 30:     children: [],
 31:   },
 32:   {
 33:     id: 4,
 34:     label: 'Analytics',
 35:     slug: '/analytics',
 36:     icon: 'mdi:chart-bar',
 37:     children: [],
 38:   },
 39:   // {
 40:   //   id: 6,
 41:   //   label: 'BP',
 42:   //   slug: '/business-plan',
 43:   //   icon: 'mdi:chat',
 44:   //   children: [],
 45:   // },
 46: 
 47:   // {
 48:   //   id: 7,
 49:   //   label: 'Spider',
 50:   //   slug: '/spider',
 51:   //   icon: 'mdi:chat',
 52:   //   children: [],
 53:   // },
 54:   // {
 55:   //   id: 8,
 56:   //   label: 'Cache',
 57:   //   slug: '/redis',
 58:   //   icon: 'mdi:chat',
 59:   //   children: [],
 60:   // },
 61:   {
 62:     id: 9,
 63:     label: 'Errors',
 64:     slug: '/errors',
 65:     icon: 'mdi:bug',
 66:     children: [],
 67:   },
 68:   {
 69:     id: 11,
 70:     label: 'Financials',
 71:     slug: '/financials',
 72:     icon: 'material-symbols:attach-money',
 73:     children: [],
 74:   },
 75:   {
 76:     id: 12,
 77:     label: 'Classifier',
 78:     slug: '/classifier',
 79:     icon: 'mdi:application',
 80:   },
 81:   // {
 82:   //   id: 11,
 83:   //   label: 'Systems',
 84:   //   slug: '/business-systems',
 85:   //   icon: 'mdi:chat',
 86:   //   children: [
 87:   //     {
 88:   //       id: 71,
 89:   //       label: 'Users',
 90:   //       slug: '/business-systems/users',
 91:   //       icon: 'mdi:account',
 92:   //       children: [],
 93:   //     },
 94:   //   ],
 95:   // },
 96: ])
 97: const { isSidebarOpen, isMobileSidebarOpen, isMobile } = useNavigation()
 98: </script>
 99: 
100: <template>
101:   <div class="background relative flex h-screen w-full lg:p-4 lg:pl-0">
102:     <IBSideNav
103:       v-model:is-sidebar-open="isSidebarOpen"
104:       v-model:is-mobile-sidebar-open="isMobileSidebarOpen"
105:       :categories="adminLinks"
106:       :is-mobile="isMobile"
107:     />
108:     <div class="foreground h-full w-full overflow-y-scroll rounded-lg md:ml-[64px]">
109:       <slot />
110:     </div>
111:   </div>
112: </template>
113: 
114: <style scoped></style>
```

## File: apps/admin-dashboard/middleware/auth.global.ts
```typescript
 1: import { defineNuxtRouteMiddleware, navigateTo, useCookie } from '#app'
 2: import { useRuntimeConfig } from '#imports'
 3: 
 4: export default defineNuxtRouteMiddleware(async (to, from) => {
 5:   const config = useRuntimeConfig()
 6:   const { aeLoginUrl, aeAuthUrl } = config.public
 7: 
 8:   try {
 9:     const user = useSupabaseUser()
10: 
11:     if (!user.value) {
12:       console.log('USER_NOT_LOGGED_IN', aeAuthUrl, aeLoginUrl)
13: 
14:       return navigateTo(String(`${aeAuthUrl}${aeLoginUrl}`), { external: true })
15:     } else {
16:       console.log('USER_LOGGED_IN', user.value)
17:     }
18:   } catch (error: any) {
19:     console.error('redirect error', `${aeAuthUrl}${aeLoginUrl}`)
20:     return navigateTo(String(`${aeAuthUrl}${aeLoginUrl}`), { external: true })
21:   }
22: })
```

## File: apps/admin-dashboard/middleware/is-admin.ts
```typescript
1: // const isAdmin = (role: string) => role === 'admin' || role === 'super_admin'
2: 
3: export default defineNuxtRouteMiddleware((to, from) => {
4:   // const user = useSupabaseUser()
5:   // const authUrl = useRuntimeConfig().public.aeAuthUrl
6:   // if (!isAdmin(user.value?.app_metadata.role)) {
7:   //   return navigateTo(authUrl, { external: true })
8:   // }
9: })
```

## File: apps/admin-dashboard/pages/business-systems/index.vue
```vue
 1: <script setup lang="ts">
 2: definePageMeta({
 3:   layoutTransition: false,
 4:   name: 'Business Systems',
 5: })
 6: 
 7: const systemsTabs = [
 8:   {
 9:     title: 'Auth',
10:     slotName: 'auth',
11:     value: '0',
12:     system: 'authentication-flow',
13:   },
14:   {
15:     title: 'News',
16:     slotName: 'news',
17:     value: '1',
18:     system: 'news-feed',
19:   },
20: ]
21: </script>
22: 
23: <template>
24:   <div>
25:     <IBTabView
26:       ref="analyticsTabView"
27:       :tabs="systemsTabs"
28:     >
29:       <template
30:         v-for="tab in systemsTabs"
31:         :key="tab.slotName"
32:         #[tab.slotName]
33:       >
34:         <BusinessSystems :system-name="tab.system" />
35:       </template>
36:     </IBTabView>
37:   </div>
38: </template>
39: 
40: <style scoped></style>
```

## File: apps/admin-dashboard/pages/analytics.vue
```vue
 1: <script setup lang="ts">
 2: const analyticsTabs = [
 3:   {
 4:     title: 'Realtime',
 5:     slotName: 'realtime',
 6:     value: '0',
 7:     src: 'https://us.posthog.com/embedded/qZ7aQk6ZyuCEp0npTLkWkOu3geB5eA?whitelabel',
 8:   },
 9:   {
10:     title: 'Dashboard',
11:     slotName: 'dashboard',
12:     value: '1',
13:     src: 'https://us.posthog.com/embedded/Za4dgg7lpaDSZhmoPIlJE8-724hqiw?whitelabel',
14:   },
15:   {
16:     title: 'Landing Page',
17:     slotName: 'landingPage',
18:     value: '2',
19:     src: 'https://us.posthog.com/embedded/6suXX7B2fY6uvr1oCCVo-KsU3g--1A?whitelabel',
20:   },
21:   {
22:     title: 'Growth',
23:     slotName: 'growth',
24:     value: '3',
25:     src: 'https://us.posthog.com/embedded/5U8l5Qu1ougk0m5i_RvLgMAPWnXx5A?whitelabel',
26:   },
27:   {
28:     title: 'Users',
29:     slotName: 'users',
30:     value: '4',
31:     src: 'https://us.posthog.com/embedded/5_O5m7upw1QjlBHMIcr0MVp_Q_HX8w?whitelabel',
32:   },
33: ]
34: 
35: const analyticsTabView = ref<HTMLElement | null>(null)
36: const activeTab = ref('0')
37: const analyticsHeight = ref(500) // Start with a default height
38: 
39: const updateHeight = async () => {
40:   await nextTick()
41:   if (analyticsTabView.value) {
42:     const newHeight = analyticsTabView.value.clientHeight
43:     analyticsHeight.value = newHeight > 0 ? newHeight : analyticsHeight.value
44:   }
45: }
46: 
47: // Update height when tab changes
48: watch(activeTab, updateHeight)
49: 
50: // Initial height update
51: onMounted(() => {
52:   updateHeight()
53:   window.addEventListener('resize', updateHeight)
54: })
55: 
56: definePageMeta({
57:   layoutTransition: false,
58:   name: 'Analytics',
59: })
60: </script>
61: 
62: <template>
63:   <IBTabView
64:     ref="analyticsTabView"
65:     :tabs="analyticsTabs"
66:   >
67:     <template
68:       v-for="tab in analyticsTabs"
69:       :key="tab.slotName"
70:       #[tab.slotName]
71:     >
72:       <div class="h-full min-h-full">
73:         <iframe
74:           class="p-4 invert"
75:           width="100%"
76:           height="100%"
77:           :src="tab.src"
78:           frameborder="0"
79:           allowfullscreen
80:         ></iframe>
81:       </div>
82:     </template>
83:   </IBTabView>
84: </template>
85: 
86: <style scoped></style>
```

## File: apps/admin-dashboard/pages/business-plan.vue
```vue
 1: <script setup lang="ts">
 2: definePageMeta({
 3:   layoutTransition: false,
 4:   name: 'BusinessPlan',
 5: })
 6: 
 7: const businessPlanSections = [
 8:   'executive-summary',
 9:   'summary',
10:   'description',
11:   'market-analysis',
12:   'products',
13:   'marketing',
14:   'management-operations',
15:   'financials',
16:   'risk-analysis',
17:   'roadmap',
18:   'appendix',
19:   'ideas',
20: ]
21: 
22: const businessPlanTabs = businessPlanSections.map((section, index) => ({
23:   value: `${index}`,
24:   title: section.replace(/-/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase()),
25:   slotName: section,
26: }))
27: </script>
28: 
29: <template>
30:   <div class="relative h-full max-h-full pb-4 xl:pb-8">
31:     <IBTabView
32:       ref="businessPlanTabView"
33:       :tabs="businessPlanTabs"
34:       class="relative h-full w-full pb-4"
35:     >
36:       <template
37:         v-for="tab in businessPlanTabs"
38:         :key="tab.slotName"
39:         #[tab.slotName]
40:       >
41:         <BusinessPlan
42:           :bp-section="tab.slotName"
43:           class="relative flex h-auto flex-col gap-4 p-4 xl:gap-8 xl:p-8"
44:         />
45:       </template>
46:     </IBTabView>
47:   </div>
48: </template>
49: 
50: <style scoped></style>
```

## File: apps/admin-dashboard/pages/classifier.vue
```vue
  1: <script setup lang="ts">
  2: definePageMeta({
  3:   layoutTransition: false,
  4:   name: 'Classifier',
  5: })
  6: 
  7: const contentTypes = [
  8:   { label: 'News', value: 'news' },
  9:   { label: 'Events', value: 'events' },
 10:   { label: 'Jobs', value: 'jobs' },
 11:   { label: 'Research', value: 'research' },
 12:   { label: 'Companies', value: 'companies' },
 13:   { label: 'Unknown', value: 'unknown' },
 14: ]
 15: 
 16: const notification = useNotification()
 17: const selectedUrls = ref([])
 18: 
 19: const {
 20:   store: urlStore,
 21:   loadMore,
 22:   refresh,
 23:   isSelecting,
 24: } = useSelectData('classified_urls', {
 25:   initialFetch: true,
 26:   columns: '*',
 27:   orderBy: { column: 'created_at', ascending: false },
 28:   pagination: { page: 1, limit: 99 },
 29: })
 30: 
 31: // Updating data
 32: const { updateData, isUpdating } = useUpdateData('classified_urls')
 33: 
 34: // Function to update actual category
 35: const updateActualCategory = async (id: number, category: string) => {
 36:   notification.info({
 37:     summary: 'Updating category',
 38:     message: 'Category update in progress. Click to cancel.',
 39:   })
 40: 
 41:   const timeoutId = setTimeout(async () => {
 42:     try {
 43:       await updateData(id, { id, actual_category: category, is_reviewed: true })
 44:       notification.success({
 45:         summary: 'Category updated',
 46:         message: 'The category has been successfully updated.',
 47:       })
 48:     } catch (error) {
 49:       notification.error({
 50:         summary: 'Update failed',
 51:         message: 'Failed to update the category. Please try again.',
 52:       })
 53:     }
 54:   }, 3000)
 55: 
 56:   return () => {
 57:     if (timeoutId) {
 58:       clearTimeout(timeoutId)
 59:       notification.info({
 60:         summary: 'Update cancelled',
 61:         message: 'The category update has been cancelled.',
 62:       })
 63:     }
 64:   }
 65: }
 66: 
 67: const markAsReviewed = async () => {
 68:   const ids = selectedUrls.value.map((row) => row.id)
 69:   for (const id of ids) {
 70:     await updateData(id, { is_reviewed: true })
 71:   }
 72:   // Refresh data after updating
 73:   await refresh()
 74: }
 75: 
 76: // Delete URLs
 77: const deleteUrls = async () => {
 78:   const ids = selectedUrls.value.map((row) => row.id)
 79:   try {
 80:     await $fetch('/api/classifier/delete', {
 81:       body: { ids },
 82:     })
 83:     // Refresh data after operation
 84:     await refresh()
 85:   } catch (error) {
 86:     console.error('Error deleting URLs:', error)
 87:   }
 88: }
 89: 
 90: const addToTrainingData = async (rows) => {
 91:   const ids = rows.map((row) => row.id)
 92:   console.log('Adding to training data:', ids)
 93: 
 94:   try {
 95:     await $fetch('/api/classifier/insert', {
 96:       body: { ids },
 97:     })
 98:     // Optionally refresh data after operation
 99:     await refresh()
100:   } catch (error) {
101:     console.error('Error adding to training data:', error)
102:   }
103: }
104: 
105: const fetchedUrls = ref([])
106: const uniqueLabels = ref(new Set())
107: const labelSeverities = ref({})
108: 
109: onMounted(async () => {
110:   await selectUrls()
111:   processUrls()
112: })
113: 
114: const selectUrls = async () => {
115:   try {
116:     const data = await $fetch('/api/classifier/select', {
117:       method: 'POST',
118:     })
119:     fetchedUrls.value = data.data // Assuming the response structure matches
120:     console.log('Training Urls', fetchedUrls.value)
121:   } catch (error) {
122:     console.error('Error fetching URLs:', error)
123:   }
124: }
125: 
126: const severities = ['primary', 'secondary', 'success', 'info', 'warning', 'danger', 'contrast']
127: 
128: const labelCounts = computed(() => {
129:   const counts = {}
130:   fetchedUrls.value?.forEach((url) => {
131:     counts[url.label] = (counts[url.label] || 0) + 1
132:   })
133:   return counts
134: })
135: 
136: const totalUrls = computed(() => fetchedUrls.value.length)
137: 
138: const processUrls = () => {
139:   uniqueLabels.value = new Set(fetchedUrls.value?.map((item) => item.label))
140: 
141:   Array.from(uniqueLabels.value).forEach((label, index) => {
142:     labelSeverities.value[label] = severities[index % severities.length]
143:   })
144: }
145: 
146: const getLabelSeverity = (label) => {
147:   return labelSeverities.value[label] || 'info'
148: }
149: </script>
150: 
151: <template>
152:   <div class="flex h-full flex-col">
153:     <PrimeSplitter class="h-full border-color">
154:       <PrimeSplitterPanel
155:         class="h-full overflow-scroll p-4"
156:         :size="25"
157:       >
158:         <div class="flex h-full flex-col">
159:           <h2 class="mb-4 text-2xl font-bold"> Training URLs </h2>
160: 
161:           <!-- Label Summary Metrics -->
162:           <div class="mb-6 grid grid-cols-2 gap-4 sm:grid-cols-2">
163:             <PrimeCard
164:               v-for="(count, label) in labelCounts"
165:               :key="label"
166:               class="border-color rounded-md border text-center"
167:             >
168:               <template #title>
169:                 <PrimeTag
170:                   :value="label"
171:                   :severity="getLabelSeverity(label)"
172:                 />
173:               </template>
174:               <template #content>
175:                 <div class="text-2xl font-bold">
176:                   {{ count }}
177:                 </div>
178:                 <div class="text-sm text-gray-500">
179:                   {{ ((count / totalUrls) * 100).toFixed(1) }}%
180:                 </div>
181:               </template>
182:             </PrimeCard>
183:           </div>
184: 
185:           <PrimeDataTable
186:             :value="fetchedUrls"
187:             size="small"
188:             class="text-sm"
189:             :pt="{
190:               header: ({ props }) => ({
191:                 cell: '!bg-transparent',
192:               }),
193:               thead: ({ context }) => ({
194:                 class: '!bg-transparent',
195:               }),
196:               tbody: ({ instance, context }) => ({
197:                 class: '!bg-transparent',
198:               }),
199:             }"
200:             :pt-options="{ mergeSections: true, mergeProps: true }"
201:           >
202:             <PrimeColumn
203:               field="url"
204:               header="URL"
205:             >
206:               <template #body="slotProps">
207:                 <a
208:                   :href="slotProps.data.url"
209:                   target="_blank"
210:                 >
211:                   {{ slotProps.data.url }}
212:                 </a>
213:               </template>
214:             </PrimeColumn>
215:             <PrimeColumn
216:               field="label"
217:               header="Label"
218:             >
219:               <template #body="slotProps">
220:                 <PrimeTag
221:                   :value="slotProps.data.label"
222:                   :severity="getLabelSeverity(slotProps.data.label)"
223:                 />
224:               </template>
225:             </PrimeColumn>
226:           </PrimeDataTable>
227:         </div>
228:       </PrimeSplitterPanel>
229:       <PrimeSplitterPanel
230:         class="h-full w-full overflow-scroll p-4"
231:         :size="75"
232:       >
233:         <PrimeToolbar class="mb-8 w-full">
234:           <template #start>
235:             <div class="flex gap-2">
236:               <PrimeButton
237:                 :disabled="!selectedUrls.length"
238:                 label="Add"
239:                 @click="addToTrainingData"
240:               >
241:                 <template #icon>
242:                   <Icon name="mdi:plus" />
243:                 </template>
244:               </PrimeButton>
245: 
246:               <PrimeButton
247:                 :disabled="!selectedUrls.length"
248:                 label="Reviewed"
249:                 @click="markAsReviewed"
250:               >
251:                 <template #icon>
252:                   <Icon name="mdi:check" />
253:                 </template>
254:               </PrimeButton>
255: 
256:               <PrimeButton
257:                 :disabled="!selectedUrls.length"
258:                 label="Delete"
259:                 severity="danger"
260:                 @click="deleteUrls"
261:               >
262:                 <template #icon>
263:                   <Icon name="mdi:delete" />
264:                 </template>
265:               </PrimeButton>
266:             </div>
267:           </template>
268:           <template #end> </template>
269:         </PrimeToolbar>
270: 
271:         <PrimeDataTable
272:           v-model:selection="selectedUrls"
273:           :value="urlStore.items"
274:           selection-mode="multiple"
275:           data-key="id"
276:           size="small"
277:           show-gridlines
278:           :pt="{
279:             root: 'text-sm',
280:             thead: { class: 'bg-primary-900' },
281:             bodycell: { class: 'p-2 border-b' },
282:           }"
283:           :pt-options="{ mergeSections: true, mergeProps: true }"
284:         >
285:           <PrimeColumn
286:             selection-mode="multiple"
287:             style="width: 2em"
288:           ></PrimeColumn>
289:           <PrimeColumn
290:             field="url"
291:             header="URL"
292:             body="urlTemplate"
293:           ></PrimeColumn>
294:           <PrimeColumn
295:             field="predicted_category"
296:             header="Predicted Category"
297:           ></PrimeColumn>
298:           <PrimeColumn
299:             field="actual_category"
300:             header="Actual Category"
301:             style="width: 10em"
302:           >
303:             <template #body="slotProps">
304:               <PrimeSelect
305:                 v-model="slotProps.data.actual_category"
306:                 class="relative z-50 w-full"
307:                 :options="contentTypes"
308:                 option-label="label"
309:                 option-value="value"
310:                 placeholder="Select a category"
311:                 @change="updateActualCategory(slotProps.data.id, $event.value)"
312:               />
313:             </template>
314:           </PrimeColumn>
315:           <PrimeColumn
316:             field="is_reviewed"
317:             header="Reviewed"
318:             body="reviewedTemplate"
319:           ></PrimeColumn>
320:           <PrimeColumn body="actionTemplate"></PrimeColumn>
321:         </PrimeDataTable>
322:       </PrimeSplitterPanel>
323:     </PrimeSplitter>
324:   </div>
325: </template>
326: 
327: <style scoped></style>
```

## File: apps/admin-dashboard/pages/errors.vue
```vue
 1: <script setup lang="ts">
 2: definePageMeta({
 3:   layoutTransition: false,
 4:   name: 'Errors',
 5: })
 6: </script>
 7: 
 8: <template>
 9:   <div class="relative h-full max-h-full">
10:     <ServerErrors />
11:   </div>
12: </template>
13: 
14: <style scoped></style>
```

## File: apps/admin-dashboard/pages/financials.vue
```vue
  1: <script setup lang="ts">
  2: import {
  3:   FinancialTotals,
  4:   FinancialOperations,
  5:   FinancialEmployees,
  6:   FinancialStorage,
  7:   FinancialAnalytics,
  8:   FinancialDevOps,
  9:   FinancialOpenAI,
 10:   FinancialPayments,
 11:   FinancialLogging,
 12:   // FinancialData
 13: } from '#components'
 14: 
 15: definePageMeta({
 16:   layoutTransition: false,
 17:   name: 'Financials',
 18: })
 19: 
 20: const { updateGlobalRange, haveData } = useFinancials()
 21: 
 22: const financialTabs = [
 23:   {
 24:     title: 'Totals',
 25:     slotName: 'totals',
 26:     value: '0',
 27:     component: FinancialTotals,
 28:   },
 29:   {
 30:     title: 'Operations',
 31:     slotName: 'operations',
 32:     value: '2',
 33:     component: FinancialOperations,
 34:   },
 35:   {
 36:     title: 'Employees',
 37:     slotName: 'employees',
 38:     value: '4',
 39:     component: FinancialEmployees,
 40:   },
 41:   {
 42:     title: 'Storage',
 43:     slotName: 'storage',
 44:     value: '5',
 45:     component: FinancialStorage,
 46:   },
 47:   {
 48:     title: 'Analytics',
 49:     slotName: 'analytics',
 50:     value: '6',
 51:     component: FinancialAnalytics,
 52:   },
 53:   {
 54:     title: 'DevOps',
 55:     slotName: 'devops',
 56:     value: '7',
 57:     component: FinancialDevOps,
 58:   },
 59:   {
 60:     title: 'OpenAI',
 61:     slotName: 'openai',
 62:     value: '8',
 63:     component: FinancialOpenAI,
 64:   },
 65:   {
 66:     title: 'Payments',
 67:     slotName: 'payments',
 68:     value: '9',
 69:     component: FinancialPayments,
 70:   },
 71:   {
 72:     title: 'Logging',
 73:     slotName: 'logging',
 74:     value: '10',
 75:     component: FinancialLogging,
 76:   },
 77:   // {
 78:   //   title: 'Data',
 79:   //   slotName: 'data',
 80:   //   value: '11',
 81:   //   component: FinancialData,
 82:   // }
 83: ]
 84: 
 85: const range = ref([0, 12])
 86: 
 87: watch(
 88:   range,
 89:   (newVal) => {
 90:     console.log('range', newVal)
 91:     updateGlobalRange({ start: newVal[0], end: newVal[1] })
 92:   },
 93:   { deep: true },
 94: )
 95: 
 96: const visibleRight = ref(false)
 97: </script>
 98: 
 99: <template>
100:   <div class="relative h-full max-h-full">
101:     <IBTabView
102:       v-if="haveData"
103:       ref="financialsTabView"
104:       :tabs="financialTabs"
105:       class="h-full w-full"
106:     >
107:       <template
108:         v-for="tab in financialTabs"
109:         :key="tab.slotName"
110:         #[tab.slotName]
111:       >
112:         <div class="relative flex h-auto flex-col gap-4 p-4 xl:gap-8 xl:p-8">
113:           <div>
114:             <PrimeButton @click="visibleRight = true"> Options </PrimeButton>
115:           </div>
116: 
117:           <PrimeDrawer
118:             v-model:visible="visibleRight"
119:             header="Right Drawer"
120:             position="right"
121:           >
122:             <div class="flex h-full gap-4">
123:               <div class="flex flex-col items-center gap-2">
124:                 <p class="text-sm font-semibold"> Start </p>
125:                 <PrimeInputNumber
126:                   v-model="range[0]"
127:                   show-buttons
128:                   button-layout="vertical"
129:                   style="width: 3rem"
130:                   input-id="minmax"
131:                   :min="1"
132:                   :max="23"
133:                 />
134:               </div>
135:               <div class="flex flex-col items-center gap-2">
136:                 <p class="text-sm font-semibold"> End </p>
137:                 <PrimeInputNumber
138:                   v-model="range[1]"
139:                   show-buttons
140:                   button-layout="vertical"
141:                   style="width: 3rem"
142:                   input-id="minmax"
143:                   :min="2"
144:                   :max="24"
145:                 />
146:               </div>
147:             </div>
148:           </PrimeDrawer>
149:           <component
150:             :is="tab.component"
151:             lazy
152:           />
153:         </div>
154:       </template>
155:     </IBTabView>
156:   </div>
157: </template>
158: 
159: <style scoped></style>
```

## File: apps/admin-dashboard/pages/growth.vue
```vue
 1: <script setup lang="ts">
 2: definePageMeta({
 3:   layoutTransition: false,
 4:   name: 'Growth',
 5: })
 6: </script>
 7: 
 8: <template>
 9:   <div>
10:     <!-- <GrowthMetrics /> -->
11:     <TableGrowth />
12:   </div>
13: </template>
14: 
15: <style scoped></style>
```

## File: apps/admin-dashboard/pages/index.vue
```vue
 1: <script setup lang="ts">
 2: definePageMeta({
 3:   layoutTransition: false,
 4:   name: 'AdminDashboard',
 5: })
 6: 
 7: const outputData = ref('')
 8: 
 9: const scrapeNewsLinks = async () => {
10:   try {
11:     const data = await $fetch('/api/cron-jobs', {
12:       method: 'POST',
13:       body: { action: 'scrapeNewsLinks' },
14:     })
15:     outputData.value = JSON.stringify(data, null, 2)
16:   } catch (error) {
17:     console.error('Error scraping news links:', error)
18:     outputData.value = 'Error scraping news links. Check console for details.'
19:   }
20: }
21: 
22: const scrapeNewsArticles = async () => {
23:   try {
24:     const data = await $fetch('/api/cron-jobs', {
25:       method: 'POST',
26:       body: { action: 'scrapeNewsArticles' },
27:     })
28:     outputData.value = JSON.stringify(data, null, 2)
29:   } catch (error) {
30:     console.error('Error scraping news articles:', error)
31:     outputData.value = 'Error scraping news articles. Check console for details.'
32:   }
33: }
34: </script>
35: 
36: <template>
37:   <div class="relative h-full max-h-full p-4">
38:     <!-- <div class="flex flex-col gap-8">
39:       <div class="flex gap-4">
40:         <PrimeButton @click="scrapeNewsLinks">Scrape News Links</PrimeButton>
41:         <PrimeButton @click="scrapeNewsArticles">Scrape News Articles</PrimeButton>
42:       </div>
43:       <p>{{ outputData }}</p>
44:     </div> -->
45:     <ServerJobs />
46:   </div>
47: </template>
48: 
49: <style scoped></style>
```

## File: apps/admin-dashboard/pages/redis.vue
```vue
 1: <script setup lang="ts">
 2: definePageMeta({
 3:   layoutTransition: false,
 4:   name: 'Redis',
 5: })
 6: </script>
 7: 
 8: <template>
 9:   <div class="relative h-full max-h-full">
10:     <RedisManagement />
11:   </div>
12: </template>
13: 
14: <style scoped></style>
```

## File: apps/admin-dashboard/pages/socials.vue
```vue
 1: <script setup lang="ts">
 2: import {
 3:   LazySocialOverview,
 4:   LazySocialYoutube,
 5:   LazySocialInstagram,
 6:   LazySocialLinkedin,
 7:   LazySocialTwitter,
 8: } from '#components'
 9: 
10: definePageMeta({
11:   layoutTransition: false,
12:   name: 'Socials',
13: })
14: 
15: // todo:med:hard:8 create tables for and store social snapshots in the database
16: // probably monthly would be enough, not sure exactly how I would do this, possibly a simple cron would work
17: const socialsTabs = [
18:   {
19:     tabTitle: 'Overview',
20:     tabName: 'overview',
21:     id: 'AstronEra',
22:     component: LazySocialOverview,
23:   },
24:   {
25:     tabTitle: 'Youtube',
26:     tabName: 'youtube',
27:     id: 'AstronEra',
28:     component: LazySocialYoutube,
29:   },
30:   {
31:     tabTitle: 'Instagram',
32:     tabName: 'instagram',
33:     id: 'AstronEra',
34:     component: LazySocialInstagram,
35:   },
36:   {
37:     tabTitle: 'Linkedin',
38:     tabName: 'linkedin',
39:     id: 'AstronEra',
40:     component: LazySocialLinkedin,
41:   },
42:   {
43:     tabTitle: 'Twitter',
44:     tabName: 'twitter',
45:     id: 'AstronEra',
46:     component: LazySocialTwitter,
47:   },
48: ]
49: </script>
50: 
51: <template>
52:   <div class="h-full w-full">
53:     <IBTabView
54:       :tabs="socialsTabs"
55:       class="h-full w-full"
56:     >
57:       <template
58:         v-for="tab in socialsTabs"
59:         :key="tab.tabName"
60:         #[tab.tabName]
61:       >
62:         <div class="h-full p-4">
63:           <component
64:             :is="tab.component"
65:             :id="tab.id"
66:           />
67:         </div>
68:       </template>
69:     </IBTabView>
70:   </div>
71: </template>
72: 
73: <style scoped></style>
```

## File: apps/admin-dashboard/pages/spider.vue
```vue
 1: <script setup lang="ts">
 2: definePageMeta({
 3:   layoutTransition: false,
 4:   name: 'Spider',
 5: })
 6: </script>
 7: 
 8: <template>
 9:   <div class="relative h-full max-h-full">
10:     <SpiderAnalytics />
11:   </div>
12: </template>
13: 
14: <style scoped></style>
```

## File: apps/admin-dashboard/pages/timeline.vue
```vue
 1: <script setup lang="ts">
 2: definePageMeta({
 3:   layoutTransition: false,
 4:   name: 'Timeline',
 5: })
 6: </script>
 7: 
 8: <template>
 9:   <div class="p-4">
10:     <TasksCalendar />
11:   </div>
12: </template>
13: 
14: <style scoped></style>
```

## File: apps/admin-dashboard/pages/upload.vue
```vue
 1: <script setup lang="ts">
 2: definePageMeta({
 3:   layoutTransition: false,
 4:   name: 'Upload',
 5: })
 6: </script>
 7: 
 8: <template>
 9:   <div class="flex flex-col gap-4 p-4">
10:     <!-- <IBUpload
11:       name="user-images"
12:       url="/api/users/bulk-upload"
13:       accept="image/*"
14:       :maxFileSize="50000000"
15:       :multiple="true"
16:     /> -->
17: 
18:     <Upload />
19:   </div>
20: </template>
21: 
22: <style scoped></style>
```

## File: apps/admin-dashboard/pages/users.vue
```vue
  1: <script setup lang="ts">
  2: import Select from 'primevue/select'
  3: import DatePicker from 'primevue/datepicker'
  4: import { z } from 'zod'
  5: import { createCRUDComposable, type CRUDOptions } from '../composables/crud-factory'
  6: import { createAdminDashboard } from '../composables/createAdminDashboard'
  7: 
  8: definePageMeta({
  9:   layoutTransition: false,
 10:   name: 'Users',
 11: })
 12: 
 13: const app_plan_enum = z.enum(['free', 'basic', 'intermediate', 'premium', 'enterprise', 'custom'])
 14: 
 15: const app_role_enum = z.enum([
 16:   'guest',
 17:   'user',
 18:   'astroguide',
 19:   'mentor',
 20:   'moderator',
 21:   'tenant_member',
 22:   'tenant_admin',
 23:   'tenant_super_admin',
 24:   'admin',
 25:   'super_admin',
 26: ])
 27: 
 28: const userProfileSchema = z.object({
 29:   id: z.string(),
 30:   email: z.string().email().optional(),
 31:   given_name: z.string().nullable().optional(),
 32:   surname: z.string().nullable().optional(),
 33:   username: z.string().nullable().optional(),
 34:   dob: z.date().nullable().optional(),
 35:   gender_id: z.string().nullable().optional(),
 36:   created_at: z.date().nullable().optional(),
 37:   updated_at: z.date().nullable().optional(),
 38:   last_seen: z.date().nullable().optional(),
 39:   avatar: z.string().nullable().optional(),
 40:   introduction: z.string().nullable().optional(),
 41:   quote: z.string().nullable().optional(),
 42:   followed_count: z.number().nullable().optional(),
 43:   followers_count: z.number().nullable().optional(),
 44:   plan: app_plan_enum.nullable().optional(),
 45:   role: app_role_enum.optional(),
 46: })
 47: 
 48: // Infer TypeScript type from Zod schema
 49: type UserProfile = z.infer<typeof userProfileSchema>
 50: 
 51: const createDateEditor = () => {
 52:   return (slotProps: any) =>
 53:     h(DatePicker, {
 54:       'modelValue': slotProps.data[slotProps.field],
 55:       'onUpdate:modelValue': (value: any) => {
 56:         slotProps.data[slotProps.field] = value
 57:       },
 58:       'editorSaveCallback': slotProps.editorSaveCallback,
 59:     })
 60: }
 61: 
 62: const createSelectEditor = (options: any[], placeholder: string) => {
 63:   return (slotProps: any) =>
 64:     h(Select, {
 65:       'modelValue': slotProps.data[slotProps.field],
 66:       'onUpdate:modelValue': (value: any) => {
 67:         slotProps.data[slotProps.field] = value
 68:       },
 69:       options,
 70:       placeholder,
 71:       'editorSaveCallback': slotProps.editorSaveCallback,
 72:     })
 73: }
 74: 
 75: const userProfileOptions: CRUDOptions<UserProfile> = {
 76:   orderBy: { column: 'created_at' as keyof UserProfile, ascending: false },
 77:   customSelectLogic: (data: UserProfile[]) => data.filter((user) => user.role !== 'super_admin'),
 78:   validateInsert: (data: Omit<UserProfile, 'id'>) => {
 79:     const result = userProfileSchema.omit({ id: true }).safeParse(data)
 80:     return result.success
 81:   },
 82:   validateUpdate: (data: Partial<UserProfile>) => {
 83:     const result = userProfileSchema.partial().safeParse(data)
 84:     return result.success
 85:   },
 86:   afterUpdate: async (updatedUser: UserProfile) => {
 87:     // Perform actions after update, e.g., send notification
 88:     console.log('User updated:', updatedUser)
 89:   },
 90: }
 91: 
 92: const useUserProfiles = createCRUDComposable<UserProfile>('user_profiles', userProfileOptions)
 93: 
 94: const userColumns = [
 95:   { field: 'email', header: 'Email', sortable: true },
 96:   { field: 'given_name', header: 'First Name', sortable: true },
 97:   { field: 'surname', header: 'Last Name', sortable: true },
 98:   { field: 'username', header: 'Username', sortable: true },
 99:   {
100:     field: 'dob',
101:     header: 'Date of Birth',
102:     sortable: true,
103:     editComponent: createDateEditor(),
104:   },
105:   { field: 'gender_id', header: 'Gender ID', sortable: true },
106:   { field: 'created_at', header: 'Created At', sortable: true },
107:   { field: 'last_seen', header: 'Last Seen', sortable: true },
108:   { field: 'avatar', header: 'Avatar' },
109:   { field: 'introduction', header: 'Introduction' },
110:   { field: 'quote', header: 'Quote' },
111:   { field: 'followed_count', header: 'Followed Count', sortable: true },
112:   { field: 'followers_count', header: 'Followers Count', sortable: true },
113:   {
114:     field: 'plan',
115:     header: 'Plan',
116:     sortable: true,
117:     editComponent: createSelectEditor(app_plan_enum.options, 'Select a Plan'),
118:   },
119:   {
120:     field: 'role',
121:     header: 'Role',
122:     sortable: true,
123:     editComponent: createSelectEditor(app_role_enum.options, 'Select a Role'),
124:   },
125: ]
126: 
127: const UserProfilesAdminDashboard = createAdminDashboard(
128:   'userProfiles',
129:   userColumns,
130:   useUserProfiles,
131: )
132: </script>
133: 
134: <template>
135:   <div class="border-color h-full overflow-scroll rounded-lg border">
136:     <UserProfilesAdminDashboard>
137:       <template #title>
138:         <div class="flex items-center">
139:           <h2 class="text-2xl font-bold mr-4">Custom Title</h2>
140:         </div>
141:       </template>
142:     </UserProfilesAdminDashboard>
143:   </div>
144: </template>
145: 
146: <style scoped></style>
```

## File: apps/admin-dashboard/plugins/dev-helper.ts
```typescript
  1: import { useLogger } from '@ib/logger'
  2: 
  3: const logger = useLogger('devHelper')
  4: 
  5: export default defineNuxtPlugin((nuxtApp) => {
  6:   const config = useRuntimeConfig()
  7: 
  8:   const DevHelper = {
  9:     features: { ...config.public.devHelper.features },
 10: 
 11:     toggleFeature(feature: string, enabled: boolean) {
 12:       if (feature in this.features) {
 13:         this.features[feature] = enabled
 14:         logger.info(`Feature '${feature}' ${enabled ? 'enabled' : 'disabled'}`)
 15: 
 16:         // Reinitialize the feature if it's being enabled
 17:         if (enabled) {
 18:           const initMethod =
 19:             `init${feature.charAt(0).toUpperCase() + feature.slice(1)}` as keyof typeof DevHelper
 20:           if (typeof this[initMethod] === 'function') {
 21:             ;(this[initMethod] as () => void)()
 22:           }
 23:         }
 24:       }
 25:     },
 26:     initNetworkErrorClassifier() {
 27:       if (!this.features.networkErrorClassifier) return
 28: 
 29:       const errorCategories = {
 30:         timeout: ['ECONNABORTED'],
 31:         serverError: ['500', '501', '502', '503', '504', '505'],
 32:         clientError: [
 33:           '400',
 34:           '401',
 35:           '403',
 36:           '404',
 37:           '405',
 38:           '406',
 39:           '407',
 40:           '408',
 41:           '409',
 42:           '410',
 43:           '411',
 44:           '412',
 45:           '413',
 46:           '414',
 47:           '415',
 48:         ],
 49:         networkError: [
 50:           'ECONNRESET',
 51:           'ENOTFOUND',
 52:           'ESOCKETTIMEDOUT',
 53:           'ETIMEDOUT',
 54:           'ECONNREFUSED',
 55:           'EHOSTUNREACH',
 56:           'EPIPE',
 57:           'EAI_AGAIN',
 58:         ],
 59:       }
 60: 
 61:       nuxtApp.hook('app:error', (error) => {
 62:         let category = 'unknown'
 63:         const errorCode = error.statusCode?.toString() || error.name
 64: 
 65:         for (const [key, codes] of Object.entries(errorCategories)) {
 66:           if (codes.includes(errorCode)) {
 67:             category = key
 68:             break
 69:           }
 70:         }
 71: 
 72:         logger.error(`🌐 Network Error (${category}):`, {
 73:           message: error.message,
 74:           code: errorCode,
 75:           stack: error.stack,
 76:         })
 77:       })
 78: 
 79:       logger.info('🌐 Network Error Classifier initialized')
 80:     },
 81: 
 82:     initInfiniteLoopDetector() {
 83:       if (!this.features.infiniteLoopDetector) return
 84:       if (!import.meta.client) return
 85: 
 86:       const MAX_ITERATIONS = 1000000
 87:       const TIME_THRESHOLD = 100 // ms
 88: 
 89:       const originalSetTimeout = window.setTimeout
 90:       window.setTimeout = function (
 91:         this: typeof window,
 92:         handler: TimerHandler,
 93:         timeout?: number,
 94:         ...args: any[]
 95:       ): number {
 96:         const start = Date.now()
 97:         let iterationCount = 0
 98: 
 99:         const wrappedCallback = function (this: typeof window) {
100:           iterationCount++
101:           if (
102:             iterationCount > MAX_ITERATIONS ||
103:             (Date.now() - start > TIME_THRESHOLD && iterationCount > 1000)
104:           ) {
105:             logger.warn('🔄 Potential infinite loop detected:', {
106:               iterations: iterationCount,
107:               time: Date.now() - start,
108:               stack: new Error().stack,
109:             })
110:           }
111:           if (typeof handler === 'function') {
112:             return handler.apply(this, args)
113:           } else {
114:             return Function(handler as string).apply(this, args)
115:           }
116:         }
117: 
118:         return Number(originalSetTimeout.call(this, wrappedCallback, timeout))
119:       }
120: 
121:       logger.info('🔄 Infinite Loop Detector initialized')
122:     },
123: 
124:     initUnhandledPromiseRejectionTracker() {
125:       if (!this.features.unhandledPromiseRejectionTracker) return
126:       if (!import.meta.client) return
127: 
128:       window.addEventListener('unhandledrejection', (event) => {
129:         logger.error('💥 Unhandled Promise Rejection:', {
130:           reason: event.reason,
131:           stack: event.reason.stack || new Error().stack,
132:           event: event,
133:         })
134:       })
135: 
136:       logger.info('💥 Unhandled Promise Rejection Tracker initialized')
137:     },
138: 
139:     checkEnvironmentConsistency() {
140:       if (!this.features.environmentConsistencyChecker) return
141: 
142:       const requiredVars = ['API_URL', 'AUTH_SECRET', 'DB_CONNECTION']
143:       const missingVars = requiredVars.filter((varName) => !config.public[varName])
144: 
145:       if (missingVars.length > 0) {
146:         logger.warn('🔑 Missing required environment variables:', missingVars)
147:       } else {
148:         logger.info('🔑 All required environment variables are set')
149:       }
150:     },
151:   }
152: 
153:   if (import.meta.dev && config.public.devHelper.enabled) {
154:     logger.info('🛠️ DevHelper: Initializing...')
155:     try {
156:       DevHelper.initNetworkErrorClassifier()
157:       DevHelper.initInfiniteLoopDetector()
158:       DevHelper.initUnhandledPromiseRejectionTracker()
159:       DevHelper.checkEnvironmentConsistency()
160:       logger.info('Initialization complete')
161:     } catch (error) {
162:       logger.error('Initialization failed:', error)
163:     }
164:   } else {
165:     logger.info('Initialization skipped (not in dev mode or devHelper not enabled)')
166:   }
167: 
168:   return {
169:     provide: {
170:       devHelper: DevHelper,
171:     },
172:   }
173: })
```

## File: apps/admin-dashboard/server/api/classifier/[action].ts
```typescript
 1: import { defineEventHandler, getRouterParam, createError } from 'h3'
 2: import jwt from 'jsonwebtoken'
 3: 
 4: export default defineEventHandler(async (event) => {
 5:   const config = useRuntimeConfig()
 6:   const action = getRouterParam(event, 'action')
 7:   console.log('Classifier action:', action)
 8: 
 9:   let url: string
10:   let label: string
11:   let id: string
12: 
13:   if (action !== 'select') {
14:     const body = await readBody(event)
15:     url = body.url
16:     label = body.label
17:     id = body.id
18:   }
19: 
20:   if (!action) {
21:     throw createError({
22:       statusCode: 400,
23:       statusMessage: 'Action is required',
24:     })
25:   }
26: 
27:   try {
28:     const token = jwt.sign({ sender: 'AstronEra' }, config.scraperKey, {
29:       algorithm: 'HS256',
30:     })
31: 
32:     if (action === 'insert') {
33:       const response = await $fetch(`${config.public.scraperUrl}/api/classifier/urls`, {
34:         method: 'POST',
35:         headers: {
36:           Authorization: `Bearer ${token}`,
37:         },
38:         body: JSON.stringify({ url, label }),
39:       })
40: 
41:       return {
42:         data: response,
43:       }
44:     } else if (action === 'delete') {
45:       const response = await $fetch(`${config.public.scraperUrl}/api/classifier/urls/${id}`, {
46:         method: 'DELETE',
47:         headers: {
48:           Authorization: `Bearer ${token}`,
49:         },
50:       })
51: 
52:       return {
53:         data: response,
54:       }
55:     } else if (action === 'select') {
56:       const response = await $fetch(`${config.public.scraperUrl}/api/classifier/urls`, {
57:         method: 'GET',
58:         headers: {
59:           Authorization: `Bearer ${token}`,
60:         },
61:       })
62: 
63:       return {
64:         data: response,
65:       }
66:     }
67: 
68:     throw createError({
69:       statusCode: 400,
70:       statusMessage: 'Invalid action',
71:     })
72:   } catch (error: any) {
73:     console.error(`Error in classifier ${action}:`, error)
74: 
75:     throw createError({
76:       statusCode: 500,
77:       statusMessage: 'Internal Server Error',
78:     })
79:   }
80: })
```

## File: apps/admin-dashboard/server/api/create/many-public-users.post.ts
```typescript
 1: export default defineEventHandler(async (event) => {
 2:   const users = await readBody(event)
 3:   const client = dbClient(event)
 4:   let message
 5:   let status
 6: 
 7:   // Function to insert users from JSON file
 8:   if (users.length > 0) {
 9:     const mappedUsers = users.map((user) => {
10:       if (user.dob !== null) {
11:         user.dob = new Date(user.dob).toISOString()
12:       }
13:       user.created_at = new Date().toISOString()
14:       user.updated_at = new Date().toISOString()
15:       user.last_seen = new Date().toISOString()
16:       return {
17:         ...user,
18:       }
19:     })
20: 
21:     const { data, error } = await client
22:       .from('user_profiles')
23:       .createMany({ data: [...mappedUsers] })
24:       .select('*')
25: 
26:     status = 200
27:     message = 'Users have been inserted successfully'
28:   } else {
29:     console.error('no users to add')
30:     status = 200
31:     message = 'no users to add'
32:   }
33: 
34:   return {
35:     status,
36:     message,
37:   }
38: })
```

## File: apps/admin-dashboard/server/api/create/roles.post.ts
```typescript
 1: import type { Role } from '@/types/roles'
 2: 
 3: export default defineEventHandler(async (event) => {
 4:   const client = dbClient(event)
 5: 
 6:   const { roles }: { roles: Role[] } = await readBody(event)
 7:   // const env = useRuntimeConfig().public
 8: 
 9:   // Function to insert users from JSON file
10:   // !TODO: use transforms from types foler to handle date/string conversion
11:   if (roles.length > 0) {
12:     const mappedRoles = roles.map((role) => {
13:       role.created_at = new Date(role.created_at).toISOString()
14:       return {
15:         ...role,
16:       }
17:     })
18: 
19:     await client.roles.createMany({ data: [...mappedRoles] })
20:   }
21: 
22:   return {
23:     status: 200,
24:     message: 'Users have been inserted successfully',
25:   }
26: })
```

## File: apps/admin-dashboard/server/api/error/[type].ts
```typescript
 1: import { defineEventHandler, getRouterParam, createError } from 'h3'
 2: import jwt from 'jsonwebtoken'
 3: 
 4: export default defineEventHandler(async (event) => {
 5:   const config = useRuntimeConfig()
 6:   const type = getRouterParam(event, 'type')
 7: 
 8:   if (!type) {
 9:     throw createError({
10:       statusCode: 400,
11:       statusMessage: 'Error type is required',
12:     })
13:   }
14: 
15:   console.log(`Sending error event to scraper for type: ${type}`)
16: 
17:   try {
18:     const token = jwt.sign({ sender: 'AstronEra' }, config.scraperKey, {
19:       algorithm: 'HS256',
20:     })
21: 
22:     const response = await $fetch(`${config.public.scraperUrl}/api/error/${type}`, {
23:       headers: {
24:         Authorization: `Bearer ${token}`,
25:       },
26:     })
27: 
28:     return {
29:       data: response,
30:     }
31:   } catch (error: any) {
32:     console.error(`Error fetching ${type} data:`, error)
33: 
34:     if (error.response) {
35:       // The request was made and the server responded with a status code
36:       // that falls out of the range of 2xx
37:       if (error.response.status === 404) {
38:         // Handle 404 Not Found error
39:         return {
40:           data: null,
41:           error: `No ${type} data found for the specified parameters`,
42:         }
43:       } else {
44:         // Handle other error statuses
45:         throw createError({
46:           statusCode: error.response.status,
47:           statusMessage: error.response.statusText || `Error fetching ${type} data`,
48:         })
49:       }
50:     } else if (error.request) {
51:       // The request was made but no response was received
52:       throw createError({
53:         statusCode: 503,
54:         statusMessage: 'Service Unavailable',
55:       })
56:     } else {
57:       // Something happened in setting up the request that triggered an Error
58:       throw createError({
59:         statusCode: 500,
60:         statusMessage: 'Internal Server Error',
61:       })
62:     }
63:   }
64: })
```

## File: apps/admin-dashboard/server/api/social/instagram/analytics.ts
```typescript
 1: import { defineEventHandler, getQuery } from 'h3'
 2: import { useLoggerAsync, useErrorHandler } from '@ib/logger'
 3: import { useInstagramAnalytics } from '#imports'
 4: 
 5: const PREFIX = 'social/instagram/insights'
 6: 
 7: export default defineEventHandler(async (event) => {
 8:   const log = await useLoggerAsync(PREFIX)
 9:   const errors = await useErrorHandler(PREFIX)
10: 
11:   const { userId } = getQuery(event) as { userId: string }
12: 
13:   log.info(`userId: ${userId}`)
14: 
15:   try {
16:     const instagram = useInstagramAnalytics()
17:     const businessAnalytics = await instagram.fetchBusinessAnalytics(userId)
18: 
19:     log.info(businessAnalytics)
20: 
21:     return {
22:       status: 200,
23:       message: 'Profile businessAnalytics returned from Instagram',
24:       data: businessAnalytics,
25:     }
26:   } catch (error: any) {
27:     errors.handleError({
28:       error,
29:       devMessage: 'Error fetching Instagram insights',
30:       userMessage: 'Error fetching Instagram insights',
31:     })
32:   }
33: })
```

## File: apps/admin-dashboard/server/api/social/linkedin/analytics.ts
```typescript
 1: import { useErrorHandler, useLoggerAsync } from '@ib/logger'
 2: import { useLinkedinAnalytics } from '#imports'
 3: 
 4: const PREFIX = 'social/linkedin/analytics'
 5: 
 6: export default defineEventHandler(async (event) => {
 7:   const log = await useLoggerAsync(PREFIX)
 8:   const errors = useErrorHandler(PREFIX)
 9: 
10:   const { postId } = getQuery(event) as { postId: string }
11: 
12:   log.info(`postId: ${postId}`)
13: 
14:   try {
15:     const linkedin = useLinkedinAnalytics(postId)
16:     const postAnalytics = await linkedin.fetchPostAnalytics()
17:     log.info(postAnalytics)
18: 
19:     return {
20:       status: 200,
21:       message: 'Post analytics returned from LinkedIn',
22:       data: postAnalytics,
23:     }
24:   } catch (error: any) {
25:     errors.handleError({
26:       error,
27:       devMessage: 'Error fetching LinkedIn analytics',
28:       userMessage: 'Error fetching LinkedIn analytics',
29:     })
30:   }
31: })
```

## File: apps/admin-dashboard/server/api/social/twitter/analytics.ts
```typescript
 1: import { defineEventHandler, getQuery } from 'h3'
 2: import { useErrorHandler, useLoggerAsync } from '@ib/logger'
 3: import { useTwitterAnalytics } from '#imports'
 4: 
 5: const PREFIX = 'social/twitter/analytics'
 6: 
 7: export default defineEventHandler(async (event) => {
 8:   const log = await useLoggerAsync(PREFIX)
 9:   const errors = useErrorHandler(PREFIX)
10: 
11:   const { postId } = getQuery(event) as { postId: string }
12: 
13:   log.info(`postId: ${postId}`)
14: 
15:   try {
16:     const twitter = useTwitterAnalytics(postId)
17:     const userAnalytics = await twitter.fetchUserProfile()
18:     log.info(userAnalytics)
19: 
20:     return {
21:       status: 200,
22:       message: 'Post analytics returned from Twitter',
23:       data: userAnalytics,
24:     }
25:   } catch (error: any) {
26:     errors.handleError({
27:       error,
28:       devMessage: 'Error fetching Twitter analytics',
29:       userMessage: 'Error fetching Twitter analytics',
30:     })
31:   }
32: })
```

## File: apps/admin-dashboard/server/api/social/youtube/analytics.ts
```typescript
 1: import { useErrorHandler, useLoggerAsync } from '@ib/logger'
 2: import { useYoutubeChannel } from '#imports'
 3: 
 4: const PREFIX = 'social/youtube/analytics'
 5: 
 6: export default defineEventHandler(async (event) => {
 7:   const log = await useLoggerAsync(PREFIX)
 8:   const errors = useErrorHandler(PREFIX)
 9: 
10:   const { channelName } = getQuery(event) as { channelName: string }
11: 
12:   log.info(`channelName: ${channelName}`)
13: 
14:   try {
15:     const youtube = useYoutubeChannel(channelName)
16:     const channelStatistics = await youtube.fetchChannelStatistics()
17:     log.info(channelStatistics)
18:     const videoItems = await youtube.fetchChannelVideos()
19:     log.info(videoItems)
20:     const videoStatsPromises = videoItems.map(async (video: any) => {
21:       const stats = await youtube.fetchVideoStatistics(video.id.videoId)
22:       log.info(stats)
23:       return { ...video, statistics: stats }
24:     })
25:     const videos = await Promise.all(videoStatsPromises)
26: 
27:     log.info('returning videos')
28:     return {
29:       status: 200,
30:       message: 'Videos returned from youtube',
31:       data: {
32:         channelStatistics,
33:         videos,
34:       },
35:     }
36:   } catch (error: any) {
37:     errors.handleError({
38:       error,
39:       devMessage: 'error fetching youtube analytics',
40:       userMessage: 'error fetching youtube analytics',
41:     })
42:   }
43: })
```

## File: apps/admin-dashboard/server/api/social/youtube/channel-videos.ts
```typescript
 1: export default defineEventHandler(async (event) => {
 2:   const { channelName } = getQuery(event)
 3: 
 4:   console.log('channelName', channelName)
 5: 
 6:   try {
 7:     const videos = await getYoutubeContent(String(channelName))
 8: 
 9:     console.log('returnedData', videos)
10:     return {
11:       status: 200,
12:       message: 'Videos returned from youtube',
13:       data: videos,
14:     }
15:   } catch (error: any) {
16:     console.error('social/youtube error', error.message)
17:     return {
18:       status: 500,
19:       message: 'Error retrieving videos',
20:       data: null,
21:       error,
22:     }
23:   }
24: })
```

## File: apps/admin-dashboard/server/api/update/user-profile.post.ts
```typescript
 1: export default defineEventHandler(async (event) => {
 2:   const { userId, profile }: { userId: string; profile: any } = await readBody(event)
 3:   const client = await dbClient(event)
 4: 
 5:   // Function to insert users from JSON file
 6:   try {
 7:     if (profile.dob) {
 8:       console.log('profile.dob:', profile.dob)
 9:       profile.dob = new Date(profile.dob).toISOString()
10:     }
11: 
12:     if (!profile) {
13:       return {
14:         status: 400,
15:         message: 'No user profile provided',
16:       }
17:     }
18: 
19:     console.log(`attempting to update ${profile.given_name} with id ${userId}`)
20:     const { data, error } = await client
21:       .from('user_profiles')
22:       .update(profile)
23:       .eq('email', profile.email)
24:       .select()
25: 
26:     if (error) {
27:       throw createError({ message: `error updating users: ${error.message}` })
28:     }
29: 
30:     console.log(`User ${data.email} updated successfully`)
31: 
32:     return {
33:       status: 200,
34:       message: 'Users have been inserted successfully',
35:       data,
36:     }
37:   } catch (error) {
38:     console.error(`Error updating user ${userId}:`, error)
39:     return {
40:       status: 500,
41:       message: 'Error updating user profile',
42:     }
43:   }
44: })
```

## File: apps/admin-dashboard/server/api/users/bulk-upload.ts
```typescript
 1: import { readMultipartFormData, type MultiPartData } from 'h3'
 2: import { serverSupabaseServiceRole } from '#supabase/server'
 3: 
 4: async function upload(path: string, file: MultiPartData) {
 5:   const supabase = serverSupabaseServiceRole(useEvent())
 6:   const { data, error } = await supabase.storage.from('profile-public').upload(path, file.data, {
 7:     cacheControl: '3600',
 8:     contentType: file.type,
 9:     upsert: true,
10:   })
11:   console.log('uploadResponse', data, error)
12: }
13: 
14: export default defineEventHandler(async (event) => {
15:   console.log('upload eventHandler')
16:   const form = await readMultipartFormData(event)
17:   console.log('workingUpload', form)
18:   if (!form?.length) {
19:     return console.log('no form data')
20:   }
21: 
22:   console.log('file', form)
23: 
24:   // we would need to fetch all users based on the file name
25: 
26:   try {
27:     const userRepository = new UserRepository()
28:     const users = await userRepository.selectMany<'user_profiles'>({
29:       tableName: 'user_profiles',
30:       selectStatement: 'id, given_name, surname',
31:     })
32: 
33:     form.forEach(async (file) => {
34:       console.log('uploading file', file)
35:       const fileName = file.filename
36:       if (!fileName) {
37:         console.log('no filename found')
38:         return
39:       }
40:       const fullName = fileName.split('.')[0]
41:       const [given_name, surname] = fullName.split('-')
42:       console.log('searching for', given_name, surname)
43:       const userId = users.find((user) => {
44:         if (!user.given_name || !user.surname) {
45:           return false
46:         }
47:         return (
48:           user.given_name.toLowerCase() === given_name && user.surname.toLowerCase() === surname
49:         )
50:       })?.id
51: 
52:       if (!userId) {
53:         console.log('no user found for', given_name, surname)
54:         return
55:       }
56:       console.log('name and id', given_name, surname, userId)
57:       console.log('uploading file for', userId, fileName)
58:       const newFileName = `avatar_${userId}.jpg`
59:       await upload(`${userId}/avatar/${newFileName}`, file)
60:     })
61:   } catch (error) {
62:     console.log('upload error', error)
63:     throw createError({ statusMessage: error.message })
64:   }
65: 
66:   return {
67:     statusCode: 200,
68:     message: 'successfully uploaded files',
69:   }
70: })
```

## File: apps/admin-dashboard/server/api/users/update.ts
```typescript
 1: export default defineEventHandler(async (event) => {
 2:   console.log('update user endpoint fired')
 3:   const { id, data } = await readBody(event)
 4: 
 5:   console.log('have body', data)
 6: 
 7:   try {
 8:     return {
 9:       error: null,
10:       data: [],
11:       status: 200,
12:       message: 'User fetched',
13:     }
14:   } catch (error: any) {
15:     console.error('update user error', error.message)
16:     return {
17:       error,
18:       data: null,
19:       status: 500,
20:       message: error.message,
21:     }
22:   }
23: })
```

## File: apps/admin-dashboard/server/api/_ws.ts
```typescript
 1: export default defineWebSocketHandler({
 2:   open(peer) {
 3:     console.log('[ws] open', peer)
 4:   },
 5: 
 6:   message(peer, message) {
 7:     console.log('[ws] message', peer, message)
 8:     if (message.text().includes('ping')) {
 9:       peer.send('pong')
10:     }
11:   },
12: 
13:   close(peer, event) {
14:     console.log('[ws] close', peer, event)
15:   },
16: 
17:   error(peer, error) {
18:     console.log('[ws] error', peer, error)
19:   },
20: })
```

## File: apps/admin-dashboard/server/api/cron-jobs.post.ts
```typescript
 1: import jwt from 'jsonwebtoken'
 2: 
 3: export default defineEventHandler(async (event) => {
 4:   const body = await readBody(event)
 5:   const { action } = body
 6: 
 7:   const scraperKey = useRuntimeConfig().scraperKey
 8:   const token = jwt.sign({ sender: 'AstronEra' }, scraperKey, {
 9:     algorithm: 'HS256',
10:   })
11: 
12:   const scraperBaseURL = useRuntimeConfig().public.scraperUrl
13: 
14:   let endpoint = ''
15:   switch (action) {
16:     case 'scrapeNewsLinks':
17:       endpoint = '/trigger/news_links'
18:       break
19:     case 'scrapeNewsArticles':
20:       endpoint = '/trigger/news_pages'
21:       break
22:     default:
23:       throw createError({
24:         statusCode: 400,
25:         statusMessage: 'Invalid action',
26:       })
27:   }
28: 
29:   try {
30:     const response = await $fetch(`${scraperBaseURL}${endpoint}`, {
31:       method: 'POST',
32:       headers: {
33:         'Authorization': `Bearer ${token}`,
34:         'Content-Type': 'application/json',
35:       },
36:     })
37: 
38:     return response
39:   } catch (error) {
40:     console.error(`Error in scraper request: ${error}`)
41:     throw createError({
42:       statusCode: 500,
43:       statusMessage: 'Error communicating with scraper',
44:     })
45:   }
46: })
```

## File: apps/admin-dashboard/server/api/execute-script.ts
```typescript
 1: import { execFile } from 'child_process'
 2: import { promisify } from 'util'
 3: import path from 'path'
 4: import fs from 'fs'
 5: 
 6: const execFileAsync = promisify(execFile)
 7: 
 8: type ScriptName = 'build-all' | 'db-setup' | 'generate-lazy-routes' | 'clean-packages'
 9: 
10: const scriptConfigs = {
11:   'build-all': { type: 'sh', file: 'build-all.sh' },
12:   'db-setup': { type: 'ts', file: 'db-setup.ts' },
13:   'generate-lazy-routes': { type: 'ts', file: 'generate-lazy-routes.ts' },
14:   'clean-packages': { type: 'sh', file: 'clean-packages.sh' },
15:   // Add more scripts as needed
16: }
17: 
18: export default defineEventHandler(async (event) => {
19:   const { scriptName } = (await readBody(event)) as { scriptName: ScriptName }
20: 
21:   if (!scriptConfigs[scriptName]) {
22:     throw createError({
23:       statusCode: 400,
24:       statusMessage: 'Invalid script name',
25:     })
26:   }
27: 
28:   const { type, file } = scriptConfigs[scriptName]
29: 
30:   const baseDir = process.cwd()
31:   const scriptPath = path.join('/app', 'scripts', file)
32: 
33:   console.log(`Current working directory: ${process.cwd()}`)
34:   console.log(`Script path: ${scriptPath}`)
35:   console.log('Files in current directory:', fs.readdirSync(process.cwd()))
36:   console.log('Files in /app/scripts:', fs.readdirSync('/app/scripts'))
37:   console.log(`Current working directory: ${baseDir}`)
38:   console.log(`Attempting to execute script: ${scriptPath}`)
39: 
40:   // Check if the script file exists
41:   if (!fs.existsSync(scriptPath)) {
42:     console.error(`Script file not found: ${scriptPath}`)
43:     throw createError({
44:       statusCode: 500,
45:       statusMessage: 'Script file not found',
46:     })
47:   }
48: 
49:   try {
50:     let output
51:     if (type === 'sh') {
52:       const { stdout, stderr } = await execFileAsync('sh', [scriptPath], { cwd: baseDir })
53:       output = stdout + stderr
54:     } else if (type === 'ts') {
55:       const { stdout, stderr } = await execFileAsync('npx', ['tsx', scriptPath], { cwd: baseDir })
56:       output = stdout + stderr
57:     } else {
58:       throw new Error('Unsupported script type')
59:     }
60: 
61:     console.log(`Script execution completed: ${scriptName}`)
62:     return { output }
63:   } catch (error) {
64:     console.error(`Error executing script ${scriptName}:`, error)
65:     throw createError({
66:       statusCode: 500,
67:       statusMessage: 'Error executing script',
68:     })
69:   }
70: })
```

## File: apps/admin-dashboard/server/api/goals.ts
```typescript
 1: import { promises as fs } from 'fs'
 2: import { resolve } from 'path'
 3: import { defineEventHandler, readBody } from 'h3'
 4: 
 5: const goalsFilePath = resolve(process.cwd(), 'data', 'tasks/goals.json')
 6: 
 7: export interface Goal {
 8:   id: number
 9:   title: string
10:   date: string
11:   category: 'financial' | 'metrics' | 'hiring' | 'events' | 'development' | 'milestone'
12:   assigneeId: number
13:   completed: boolean
14:   progress: number
15:   priority: 'low' | 'medium' | 'high'
16:   timeSpent: number
17:   description: string
18:   milestoneId?: number
19:   recurrence?: {
20:     frequency: 'daily' | 'weekly' | 'monthly' | 'yearly'
21:     interval: number
22:     endDate?: string
23:   }
24: }
25: 
26: export default defineEventHandler(async (event) => {
27:   const body = await readBody(event)
28:   const { action, goal } = body
29: 
30:   async function readGoals(): Promise<Goal[]> {
31:     try {
32:       const data = await fs.readFile(goalsFilePath, 'utf-8')
33:       return JSON.parse(data)
34:     } catch (error) {
35:       if (error.code === 'ENOENT') {
36:         return []
37:       }
38:       throw error
39:     }
40:   }
41: 
42:   async function writeGoals(goals: Goal[]): Promise<void> {
43:     await fs.writeFile(goalsFilePath, JSON.stringify(goals, null, 2), 'utf-8')
44:   }
45: 
46:   try {
47:     let goals = await readGoals()
48: 
49:     switch (action) {
50:       case 'read':
51:         return {
52:           success: true,
53:           goals: goals,
54:           totalCount: goals.length,
55:         }
56:       case 'create':
57:         goals.push(goal)
58:         await writeGoals(goals)
59:         break
60:       case 'update':
61:         const index = goals.findIndex((g) => g.id === goal.id)
62:         if (index !== -1) {
63:           goals[index] = { ...goals[index], ...goal }
64:           await writeGoals(goals)
65:         }
66:         break
67:       case 'delete':
68:         goals = goals.filter((g) => g.id !== goal.id)
69:         await writeGoals(goals)
70:         break
71:       default:
72:         throw new Error(`Invalid action: ${action}`)
73:     }
74: 
75:     return {
76:       success: true,
77:       message: action === 'read' ? 'Goals fetched successfully' : `Goal ${action}d successfully`,
78:     }
79:   } catch (error) {
80:     console.error('Error performing goal action:', error)
81:     return { success: false, message: `Failed to ${action} goal`, error: error.message }
82:   }
83: })
```

## File: apps/admin-dashboard/server/api/healthy.ts
```typescript
 1: import { defineEventHandler } from 'h3'
 2: 
 3: export default defineEventHandler(async (event) => {
 4:   const startTime = Date.now()
 5:   const env = useRuntimeConfig().public
 6:   const port = process.env.PORT
 7: 
 8:   try {
 9:     // You can add more checks here, e.g., Redis connection, external API calls, etc.
10: 
11:     const uptime = process.uptime()
12:     const memoryUsage = process.memoryUsage()
13: 
14:     console.log('Health check successful', env)
15:     console.log('Process Port:', port)
16:     console.log('Nitro Port: ')
17: 
18:     return {
19:       status: 'healthy',
20:       timestamp: new Date().toISOString(),
21:       uptime: uptime,
22:       memory: {
23:         rss: memoryUsage.rss,
24:         heapTotal: memoryUsage.heapTotal,
25:         heapUsed: memoryUsage.heapUsed,
26:         external: memoryUsage.external,
27:       },
28:       environment: process.env.NODE_ENV,
29:       databaseConnection: 'ok',
30:       responseTime: Date.now() - startTime,
31:     }
32:   } catch (error: any) {
33:     console.error('Health check failed:', error)
34: 
35:     return {
36:       status: 'unhealthy',
37:       timestamp: new Date().toISOString(),
38:       error: error.message,
39:       responseTime: Date.now() - startTime,
40:     }
41:   }
42: })
```

## File: apps/admin-dashboard/server/api/milestones.ts
```typescript
 1: import { promises as fs } from 'fs'
 2: import { resolve } from 'path'
 3: import { defineEventHandler, readBody } from 'h3'
 4: 
 5: const milestonesFilePath = resolve(process.cwd(), 'data', 'tasks', 'milestones.json')
 6: 
 7: export default defineEventHandler(async (event) => {
 8:   const method = event.node.req.method
 9: 
10:   if (method === 'GET') {
11:     try {
12:       const data = await fs.readFile(milestonesFilePath, 'utf-8')
13:       return JSON.parse(data)
14:     } catch (error) {
15:       console.error('Error reading milestones:', error)
16:       throw createError({
17:         statusCode: 500,
18:         statusMessage: 'Failed to read milestones',
19:       })
20:     }
21:   } else if (method === 'POST') {
22:     const body = await readBody(event)
23:     const { action, milestone } = body
24: 
25:     try {
26:       const data = await fs.readFile(milestonesFilePath, 'utf-8')
27:       let milestones = JSON.parse(data)
28: 
29:       switch (action) {
30:         case 'create':
31:           milestone.id = Math.max(...milestones.map((m: Milestone) => m.id)) + 1
32:           milestones.push(milestone)
33:           break
34:         case 'update':
35:           const index = milestones.findIndex((m: Milestone) => m.id === milestone.id)
36:           if (index !== -1) {
37:             milestones[index] = milestone
38:           }
39:           break
40:         case 'delete':
41:           milestones = milestones.filter((m: Milestone) => m.id !== milestone.id)
42:           break
43:         default:
44:           throw new Error(`Invalid action: ${action}`)
45:       }
46: 
47:       await fs.writeFile(milestonesFilePath, JSON.stringify(milestones, null, 2), 'utf-8')
48:       return { success: true, message: `Milestone ${action}d successfully` }
49:     } catch (error) {
50:       console.error(`Error ${action}ing milestone:`, error)
51:       throw createError({
52:         statusCode: 500,
53:         statusMessage: `Failed to ${action} milestone`,
54:       })
55:     }
56:   }
57: })
```

## File: apps/admin-dashboard/server/api/server-jobs.ts
```typescript
  1: import { defineWebSocketHandler } from 'h3'
  2: import { WebSocket } from 'ws'
  3: import jwt from 'jsonwebtoken'
  4: 
  5: const clients = new Set()
  6: let serverWs: WebSocket | null = null
  7: let reconnectTimeout: NodeJS.Timeout | null = null
  8: let reconnectAttempts = 0
  9: const maxReconnectAttempts = 5
 10: let reconnectInterval = 5000 // 5 seconds
 11: 
 12: let selectedMetrics: string[] = ['all']
 13: 
 14: const connectToAnalyticsServer = () => {
 15:   if (reconnectAttempts >= maxReconnectAttempts) {
 16:     console.log('Max reconnect attempts reached. Stopping reconnection attempts.')
 17:     return
 18:   }
 19: 
 20:   const scraperKey = useRuntimeConfig().scraperKey
 21:   const token = jwt.sign({ sender: 'AstronEra' }, scraperKey, {
 22:     algorithm: 'HS256',
 23:   })
 24: 
 25:   const scraperBaseURL = useRuntimeConfig().public.scraperUrl
 26:   const wsUrl = `${scraperBaseURL.replace(/^http/, 'ws')}/analytics`
 27: 
 28:   console.log(`Connecting to WebSocket URL: ${wsUrl}`)
 29: 
 30:   serverWs = new WebSocket(wsUrl, {
 31:     headers: { Authorization: `Bearer ${token}` },
 32:   })
 33: 
 34:   serverWs.on('open', () => {
 35:     console.log('Connected to Analytics WebSocket server')
 36:     reconnectAttempts = 0
 37:     if (reconnectTimeout) {
 38:       clearTimeout(reconnectTimeout)
 39:       reconnectTimeout = null
 40:     }
 41:     // Send initial subscription with the selected metrics
 42: 
 43:     console.log('Subscribing to metrics:', selectedMetrics)
 44:     serverWs.send(
 45:       JSON.stringify({
 46:         action: 'subscribe',
 47:         metrics: selectedMetrics,
 48:       }),
 49:     )
 50:   })
 51: 
 52:   serverWs.on('message', (data) => {
 53:     // Broadcast the message to all connected Nuxt clients
 54:     console.log('Received message from Analytics server:', data.toString())
 55:     for (const client of clients) {
 56:       client.send(data)
 57:     }
 58:   })
 59: 
 60:   serverWs.on('close', (code, reason) => {
 61:     console.log(`Disconnected from Analytics WebSocket server: ${code} - ${reason}`)
 62:     serverWs = null
 63:     scheduleReconnect()
 64:   })
 65: 
 66:   serverWs.on('error', (error) => {
 67:     console.error('Error with Analytics WebSocket connection:', error)
 68:     if (serverWs) {
 69:       serverWs.close()
 70:     }
 71:   })
 72: }
 73: 
 74: const scheduleReconnect = () => {
 75:   if (reconnectAttempts < maxReconnectAttempts) {
 76:     reconnectAttempts++
 77:     console.log(
 78:       `Scheduling reconnection attempt ${reconnectAttempts}/${maxReconnectAttempts} in ${reconnectInterval}ms`,
 79:     )
 80:     reconnectTimeout = setTimeout(() => {
 81:       console.log(`Executing reconnection attempt ${reconnectAttempts}`)
 82:       connectToAnalyticsServer()
 83:     }, reconnectInterval)
 84:   } else {
 85:     console.log('Max reconnect attempts reached. Please check the server.')
 86:   }
 87: }
 88: 
 89: export default defineWebSocketHandler({
 90:   async open(peer) {
 91:     console.log('Nuxt client connected')
 92:     clients.add(peer)
 93: 
 94:     if (!serverWs) {
 95:       connectToAnalyticsServer()
 96:     }
 97:   },
 98: 
 99:   message(peer, message) {
100:     console.log('Received message from Nuxt client:', message)
101:     try {
102:       const parsedMessage = JSON.parse(message)
103:       selectedMetrics = parsedMessage.metrics
104:       console.log('Updated selectedMetrics:', selectedMetrics)
105: 
106:       if (serverWs && serverWs.readyState === WebSocket.OPEN) {
107:         console.log(
108:           'Forwarding message to Analytics server:',
109:           JSON.stringify({
110:             action: 'subscribe',
111:             subscribedMetrics: parsedMessage.metrics,
112:           }),
113:         )
114:         serverWs.send(
115:           JSON.stringify({
116:             action: 'subscribe',
117:             subscribedMetrics: parsedMessage.metrics,
118:           }),
119:         )
120:       } else {
121:         console.log(
122:           'Cannot forward message: serverWs not ready. Current state:',
123:           serverWs ? serverWs.readyState : 'null',
124:         )
125:       }
126:     } catch (error) {
127:       console.error('Error parsing or handling message:', error)
128:     }
129:   },
130: 
131:   close(peer) {
132:     console.log('Nuxt client disconnected')
133:     clients.delete(peer)
134: 
135:     if (clients.size === 0 && serverWs) {
136:       console.log('No more clients, closing server connection')
137:       serverWs.close()
138:       serverWs = null
139:       if (reconnectInterval) {
140:         clearInterval(reconnectInterval)
141:         reconnectInterval = null
142:       }
143:     }
144:   },
145: 
146:   error(peer, error) {
147:     console.error('Error with Nuxt client connection:', error)
148:     clients.delete(peer)
149:   },
150: })
```

## File: apps/admin-dashboard/server/api/store-image.ts
```typescript
 1: export default defineEventHandler(async (event) => {
 2:   try {
 3:     console.log('store-image start')
 4:     // !todo: I envision this endpoint being called, fetching all the image URLs that need to be stored
 5:     // We would need to check if we have already stored the image, and if not, fetch and store it
 6:     // When storing it would need to be stored in a folder using the news.id as the folder name
 7:     // image name doesn't matter
 8:     // then we would need to update the news.featured_image with the new URL
 9: 
10:     // Fetch the image as a blob
11:     const imgBlob = await $fetch(
12:       'https://cdn.mos.cms.futurecdn.net/594rdNk4Ci9qT8e2XKsQ7Q-970-80.jpg.webp',
13:       { responseType: 'blob' },
14:     )
15: 
16:     console.log('Image fetched', imgBlob)
17: 
18:     // Get the Supabase client
19:     const supabase = await dbClient(event)
20: 
21:     // Upload the blob to Supabase Storage
22:     const { data, error } = await supabase.storage.from('posts').upload('public/test.webp', imgBlob)
23: 
24:     if (error) {
25:       throw createError({ message: `Error uploading image: ${error.message}` })
26:     }
27: 
28:     console.log('Image uploaded successfully')
29: 
30:     return {
31:       status: 200,
32:       message: 'Image Stored',
33:     }
34:   } catch (error: any) {
35:     console.error('store-image error', error.message)
36:     return {
37:       status: 500,
38:       message: 'Error Storing Image',
39:       error,
40:     }
41:   }
42: })
```

## File: apps/admin-dashboard/server/utils/socials/getYoutubeContent.ts
```typescript
  1: import { useErrorHandler } from '@ib/logger'
  2: 
  3: interface YouTubeVideo {
  4:   title: string
  5:   description: string
  6:   publishedAt: string
  7:   videoId: string
  8: }
  9: 
 10: interface YouTubeProfile {
 11:   name: string
 12:   description: string
 13:   subscriberCount: number
 14:   videos: YouTubeVideo[]
 15: }
 16: 
 17: const YOUTUBE_API_URL = 'https://www.googleapis.com/youtube/v3/'
 18: const GOOGLE_API_KEY = useRuntimeConfig().googleApiKey
 19: 
 20: export async function getYoutubeContent(username: string): Promise<YouTubeProfile | null> {
 21:   try {
 22:     // Fetch the channel details by username
 23:     const channelResponse = await $fetch(`${YOUTUBE_API_URL}channels`, {
 24:       params: {
 25:         forHandle: username,
 26:         part: 'snippet,contentDetails,statistics',
 27:         key: GOOGLE_API_KEY,
 28:       },
 29:     })
 30: 
 31:     console.log('channelRes', channelResponse)
 32: 
 33:     if (channelResponse.items.length === 0) {
 34:       return null
 35:       // No channel found
 36:     }
 37: 
 38:     const channel = channelResponse.items[0]
 39:     const uploadsPlaylistId = channel.contentDetails.relatedPlaylists.uploads
 40: 
 41:     // Fetch the latest videos from the uploads playlist
 42:     const videosResponse = await $fetch(`${YOUTUBE_API_URL}playlistItems`, {
 43:       params: {
 44:         part: 'id,snippet,contentDetails',
 45:         maxResults: 12,
 46:         playlistId: uploadsPlaylistId,
 47:         key: GOOGLE_API_KEY,
 48:       },
 49:     })
 50: 
 51:     const videos = videosResponse.items.map((item: any) => ({
 52:       title: item.snippet.title,
 53:       description: item.snippet.description,
 54:       publishedAt: item.snippet.publishedAt,
 55:       videoId: item.contentDetails.videoId,
 56:     }))
 57: 
 58:     console.log('videos', videos)
 59: 
 60:     return {
 61:       name: channel.snippet.title,
 62:       description: channel.snippet.description,
 63:       subscriberCount: channel.statistics.subscriberCount,
 64:       videos,
 65:     }
 66:   } catch (error) {
 67:     console.error('Failed to fetch YouTube profile details:', error)
 68:     return null
 69:   }
 70: }
 71: 
 72: export function useYoutubeChannel(channelId: string) {
 73:   const errors = useErrorHandler('getYoutubeChannelAnalytics')
 74: 
 75:   async function fetchChannelStatistics() {
 76:     const url = `${YOUTUBE_API_URL}channels?part=statistics&id=${channelId}&key=${GOOGLE_API_KEY}`
 77:     const response = await $fetch(url)
 78:     const data = errors.handleFetchError({
 79:       response,
 80:       devMessage: `Failed to fetch channel statistics for ${channelId}`,
 81:       userMessage: `Failed to fetch statistics for channel ${channelId}`,
 82:     })
 83:     return data.items[0].statistics
 84:   }
 85: 
 86:   async function fetchChannelVideos() {
 87:     const url = `${YOUTUBE_API_URL}search?key=${GOOGLE_API_KEY}&channelId=${channelId}&part=snippet,id&order=date&maxResults=5`
 88:     const response = await $fetch(url)
 89:     const data = errors.handleFetchError({
 90:       response,
 91:       devMessage: `Failed to fetch channel videos for ${channelId}`,
 92:       userMessage: `Failed to fetch videos for channel ${channelId}`,
 93:     })
 94: 
 95:     return data.items
 96:   }
 97: 
 98:   async function fetchVideoStatistics(videoId: string) {
 99:     const url = `${YOUTUBE_API_URL}videos?part=statistics&id=${videoId}&key=${GOOGLE_API_KEY}`
100:     const response = await $fetch(url)
101:     const data = errors.handleFetchError({
102:       response,
103:       devMessage: `Failed to fetch video statistics for ${channelId}`,
104:       userMessage: `Failed to fetch video statistics for channel ${channelId}`,
105:     })
106:     return data.items[0].statistics
107:   }
108: 
109:   return {
110:     fetchChannelStatistics,
111:     fetchChannelVideos,
112:     fetchVideoStatistics,
113:   }
114: }
```

## File: apps/admin-dashboard/server/utils/socials/useInstagramAnalytics.ts
```typescript
 1: import { useErrorHandler, useLoggerAsync } from '@ib/logger'
 2: 
 3: const INSTAGRAM_API_URL = 'https://graph.instagram.com'
 4: const ACCESS_TOKEN = 'YOUR_INSTAGRAM_ACCESS_TOKEN'
 5: const PREFIX = 'useInstagramAnalytics'
 6: 
 7: export async function useInstagramAnalytics() {
 8:   const log = await useLoggerAsync(PREFIX)
 9:   const errors = useErrorHandler(PREFIX)
10: 
11:   async function fetchProfileStatistics(userId: string) {
12:     log.info(`Fetching instagram profile statistics for: ${userId}`)
13:     const url = `${INSTAGRAM_API_URL}/${userId}?fields=id,username,media_count,followers_count,follows_count&access_token=${ACCESS_TOKEN}`
14:     const response = await $fetch(url)
15:     const data = errors.handleFetchError({
16:       response,
17:       devMessage: `Failed to fetch profile statistics for ${userId}`,
18:       userMessage: `Failed to fetch statistics for profile ${userId}`,
19:     })
20:     return data
21:   }
22: 
23:   async function fetchBusinessAnalytics(username: string) {
24:     const url = `${INSTAGRAM_API_URL}/${userId}?fields=business_discovery.username(${username}){followers_count,media_count,media{comments_count,like_count}}&access_token=${ACCESS_TOKEN}`
25:     const response = await $fetch(url, {
26:       headers: {
27:         Authorization: `Bearer ${ACCESS_TOKEN}`,
28:       },
29:     })
30:     const data = errors.handleFetchError({
31:       response,
32:       devMessage: `Failed to fetch business analytics for ${username}`,
33:       userMessage: `Failed to fetch analytics for ${username}`,
34:     })
35:     return {
36:       followers_count: data.business_discovery.followers_count,
37:       media_count: data.business_discovery.media_count,
38:       media: data.business_discovery.media.data.map((mediaItem: any) => ({
39:         id: mediaItem.id,
40:         comments_count: mediaItem.comments_count,
41:         like_count: mediaItem.like_count,
42:       })),
43:     }
44:   }
45: 
46:   return {
47:     fetchProfileStatistics,
48:     fetchBusinessAnalytics,
49:   }
50: }
```

## File: apps/admin-dashboard/server/utils/socials/useLinkedinAnalytics.ts
```typescript
 1: import { useErrorHandler } from '@ib/logger'
 2: 
 3: const LINKEDIN_API_URL = 'https://api.linkedin.com/rest/dmaOrganizationalPageContentAnalytics'
 4: const ACCESS_TOKEN = 'YOUR_LINKEDIN_ACCESS_TOKEN'
 5: 
 6: export function useLinkedinAnalytics(postId: string) {
 7:   const errors = useErrorHandler('getLinkedInPageAnalytics')
 8: 
 9:   // https://learn.microsoft.com/en-us/linkedin/dma/analytics/organizational-page-content-analytics?tabs=http%2Cnon-obfuscated
10:   async function fetchPostAnalytics() {
11:     const url = `${LINKEDIN_API_URL}?q=postDimension&sourcePostEntity=${postId}&metricType=IMPRESSIONS,REPOSTS,COMMENTS,REACTIONS&dimensionType=STAFF_COUNT_RANGE&access_token=${ACCESS_TOKEN}`
12:     const response = await $fetch(url, {
13:       headers: {
14:         Authorization: `Bearer ${ACCESS_TOKEN}`,
15:       },
16:     })
17:     const data = errors.handleFetchError({
18:       response,
19:       devMessage: `Failed to fetch post analytics for ${postId}`,
20:       userMessage: `Failed to fetch analytics for post ${postId}`,
21:     })
22:     return data.elements.map((element: any) => ({
23:       type: element.type,
24:       value: element.metric.value.totalCount.long,
25:     }))
26:   }
27: 
28:   // Fetch trend data for the LinkedIn organizational page
29:   async function fetchTrendAnalytics(startDate: number, endDate: number, pageId: string) {
30:     const url = `${LINKEDIN_API_URL}?q=trend&sourceEntity=urn:li:organizationalPage:${pageId}&metricTypes=List(IMPRESSIONS,COMMENTS,REACTIONS,REPOSTS,ENGAGEMENT_RATE,CTR,ACQUIRED_FOLLOWS)&timeIntervals=(timeRange:(start:${startDate},end:${endDate}))`
31: 
32:     const response = await $fetch(url, {
33:       headers: {
34:         Authorization: `Bearer ${ACCESS_TOKEN}`,
35:       },
36:     })
37: 
38:     const data = errors.handleFetchError({
39:       response,
40:       devMessage: `Failed to fetch trend analytics for page ${pageId}`,
41:       userMessage: `Failed to fetch trend analytics for page ${pageId}`,
42:     })
43: 
44:     return data.elements.map((element: any) => ({
45:       type: element.type,
46:       value: element.metric.value.totalCount.long || element.metric.value.totalCount.bigDecimal,
47:     }))
48:   }
49: 
50:   return {
51:     fetchPostAnalytics,
52:     fetchTrendAnalytics,
53:   }
54: }
```

## File: apps/admin-dashboard/server/utils/socials/useTwitterAnalytics.ts
```typescript
 1: import { useErrorHandler } from '@ib/logger'
 2: 
 3: // user tweet timeline
 4: // https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets
 5: 
 6: // mentions timeline
 7: // https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions
 8: 
 9: // api reference
10: // https://github.com/xdevplatform/twitter-api-typescript-sdk
11: 
12: // LINKEDIN
13: 
14: // MANAGE ACCOUNTS
15: // https://github.com/linkedin-developers/linkedin-api-js-client
16: 
17: // NON OFFICIAL API: https://github.com/tomquirk/linkedin-api
18: 
19: const TWITTER_API_URL = 'https://api.twitter.com/2/tweets'
20: const BEARER_TOKEN = 'YOUR_TWITTER_BEARER_TOKEN'
21: 
22: export function useTwitterAnalytics(postId: string) {
23:   const errors = useErrorHandler('getTwitterPostAnalytics')
24: 
25:   //
26:   async function fetchPostAnalytics() {
27:     const url = `${TWITTER_API_URL}/${postId}?tweet.fields=non_public_metrics,organic_metrics&expansions=attachments.media_keys&media.fields=non_public_metrics,organic_metrics`
28:     const response = await $fetch(url, {
29:       headers: {
30:         Authorization: `Bearer ${BEARER_TOKEN}`,
31:       },
32:     })
33:     const data = errors.handleFetchError({
34:       response,
35:       devMessage: `Failed to fetch post analytics for ${postId}`,
36:       userMessage: `Failed to fetch analytics for post ${postId}`,
37:     })
38:     return {
39:       impression_count: data.data.non_public_metrics.impression_count,
40:       like_count: data.data.organic_metrics.like_count,
41:       reply_count: data.data.organic_metrics.reply_count,
42:       retweet_count: data.data.organic_metrics.retweet_count,
43:       quote_count: data.data.public_metrics.quote_count,
44:       url_link_clicks: data.data.non_public_metrics.url_link_clicks,
45:       user_profile_clicks: data.data.non_public_metrics.user_profile_clicks,
46:       media: data.includes.media,
47:     }
48:   }
49: 
50:   async function fetchUserProfile(userId: string) {
51:     const url = `${TWITTER_API_URL}/users/${userId}?user.fields=created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,url,username,verified,withheld&expansions=pinned_tweet_id`
52:     const response = await $fetch(url, {
53:       headers: {
54:         Authorization: `Bearer ${BEARER_TOKEN}`,
55:       },
56:     })
57:     const data = errors.handleFetchError({
58:       response,
59:       devMessage: `Failed to fetch user profile for ${userId}`,
60:       userMessage: `Failed to fetch profile for user ${userId}`,
61:     })
62:     return {
63:       id: data.data.id,
64:       name: data.data.name,
65:       username: data.data.username,
66:       created_at: data.data.created_at,
67:       description: data.data.description,
68:       entities: data.data.entities,
69:       location: data.data.location,
70:       pinned_tweet_id: data.data.pinned_tweet_id,
71:       profile_image_url: data.data.profile_image_url,
72:       protected: data.data.protected,
73:       url: data.data.url,
74:       verified: data.data.verified,
75:       withheld: data.data.withheld,
76:       pinned_tweet: data.includes.tweets ? data.includes.tweets[0] : null,
77:     }
78:   }
79: 
80:   return {
81:     fetchPostAnalytics,
82:     fetchUserProfile,
83:   }
84: }
```

## File: apps/admin-dashboard/app.vue
```vue
 1: <script setup lang="ts">
 2: import { onMounted, onUnmounted } from 'vue'
 3: import { useServerAnalyticsStore } from '#imports'
 4: 
 5: const serverAnalyticsStore = useServerAnalyticsStore()
 6: 
 7: onMounted(() => {
 8:   serverAnalyticsStore.connectWebSocket()
 9:   serverAnalyticsStore.subscribeToMetrics(['all'])
10: })
11: 
12: onUnmounted(() => {
13:   serverAnalyticsStore.disconnectWebSocket()
14: })
15: </script>
16: 
17: <template>
18:   <div class="h-full w-full">
19:     <NuxtLoadingIndicator />
20:     <NuxtLayout>
21:       <NuxtPage />
22:     </NuxtLayout>
23:     <PrimeToast position="bottom-right" />
24:   </div>
25: </template>
26: 
27: <style>
28: html {
29:   margin: 0;
30:   padding: 0;
31: }
32: 
33: #__nuxt {
34:   width: 100%;
35:   height: 100%;
36:   padding: 0;
37:   margin: 0;
38: }
39: 
40: .layout-enter-active,
41: .layout-leave-active {
42:   transition: all 0.4s;
43: }
44: 
45: .layout-enter-from,
46: .layout-leave-to {
47:   opacity: 0;
48:   filter: blur(1rem);
49: }
50: </style>
```

## File: apps/admin-dashboard/nuxt.config.ts
```typescript
 1: import { fileURLToPath } from 'url'
 2: import { dirname, join, resolve } from 'path'
 3: import { defineNuxtConfig } from 'nuxt/config'
 4: import runtimeConfig from '../../shared-runtime.config'
 5: 
 6: const currentDir = dirname(fileURLToPath(import.meta.url))
 7: 
 8: export default defineNuxtConfig({
 9:   workspaceDir: '../../',
10:   srcDir: '.',
11:   extends: ['../../layers/base', '../../layers/auth', '../../layers/crud', '../../layers/advert'],
12:   modules: [
13:     '@nuxt/devtools',
14:     '@vueuse/nuxt',
15:     '@nuxt/content',
16:     '@nuxt/image',
17:     '@pinia/nuxt',
18:     '@nuxt/icon',
19:     '@nuxt/eslint',
20:     '@nuxtjs/tailwindcss',
21:     '@nuxtjs/supabase',
22:     '@primevue/nuxt-module',
23:   ],
24: 
25:   ssr: false,
26: 
27:   nitro: {
28:     experimental: {
29:       websocket: true,
30:     },
31:   },
32: 
33:   // tailwindcss: {
34:   //   configPath: `${currentDir}/tailwind.config.ts`,
35:   // cssPath: [`${currentDir}/assets/css/tailwind.css`, { injectPosition: 0 }],
36:   //   exposeConfig: true,
37:   //   viewer: true,
38:   // },
39: 
40:   primevue: {
41:     importPT: { from: resolve(currentDir, '../../theme/index.js') },
42:     autoImport: true,
43:     components: {
44:       prefix: 'Prime',
45:       include: '*',
46:       exclude: ['Editor'],
47:     },
48: 
49:     composables: {
50:       include: '*',
51:     },
52: 
53:     options: {
54:       ripple: true,
55:       unstyled: true,
56:       theme: {
57:         options: {
58:           cssLayer: {
59:             name: 'primevue',
60:             order: 'tailwind-base, primevue, tailwind-utilities',
61:           },
62:         },
63:       },
64:     },
65:   },
66: 
67:   ...runtimeConfig,
68: })
```

## File: apps/admin-dashboard/tailwind.config.ts
```typescript
 1: import { fileURLToPath } from 'url'
 2: import { dirname, resolve } from 'path'
 3: import type { Config } from 'tailwindcss'
 4: import baseConfig from '../../tailwind.config.base'
 5: 
 6: const currentDir = dirname(fileURLToPath(import.meta.url))
 7: 
 8: const config: Partial<Config> = {
 9:   presets: [baseConfig],
10:   content: [
11:     resolve(currentDir, 'pages/**/*.{js,vue,ts}'),
12:     resolve(currentDir, 'layouts/**/*.{js,vue,ts}'),
13:     resolve(currentDir, 'composables/**/*.{js,vue,ts}'),
14:     resolve(currentDir, 'components/**/*.{js,vue,ts}'),
15:     '../../theme/**/*.{js,css,ts}',
16:   ],
17:   exclude: ['server/**/*'],
18: }
19: 
20: export default config
```

## File: layers/advert/.playground/app.config.ts
```typescript
1: export default defineAppConfig({
2:   myLayer: {
3:     name: 'My amazing Nuxt layer (overwritten)'
4:   }
5: })
```

## File: layers/advert/.playground/nuxt.config.ts
```typescript
1: export default defineNuxtConfig({
2:   extends: ['..'],
3:   modules: ['@nuxt/eslint']
4: })
```

## File: layers/advert/components/Advertisement.vue
```vue
  1: <script setup lang="ts">
  2: import { useStorage } from '@vueuse/core'
  3: import advertisements from '../assets/advertisements.json'
  4: 
  5: const showAds = ref(false)
  6: const userShowAds = useStorage('userShowAds', true)
  7: 
  8: interface Advertisement {
  9:   id: number
 10:   title: string
 11:   description: string
 12:   imageUrl: string
 13:   link: string
 14:   active: boolean
 15: }
 16: 
 17: interface AdMetric {
 18:   adId: number
 19:   impressions: number
 20:   clicks: number
 21:   uniqueViews: number // Changed to number
 22:   deviceType: string
 23:   viewTimes: number[]
 24: }
 25: 
 26: const activeAds = ref<Advertisement[]>([])
 27: const adMetrics = useStorage<Record<number, AdMetric>>('adMetrics', {})
 28: const viewedAds = useStorage<Set<number>>('viewedAds', new Set())
 29: const sendInterval = 10000 // 10 seconds
 30: 
 31: const loadActiveAds = () => {
 32:   activeAds.value = advertisements.filter((ad) => ad.active).slice(0, 3)
 33: }
 34: 
 35: const getDeviceType = () => {
 36:   const userAgent = navigator.userAgent
 37:   if (/mobile/i.test(userAgent)) return 'Mobile'
 38:   if (/tablet/i.test(userAgent)) return 'Tablet'
 39:   return 'Desktop'
 40: }
 41: 
 42: const trackImpression = (adId: number) => {
 43:   if (!adMetrics.value[adId]) {
 44:     adMetrics.value[adId] = {
 45:       adId,
 46:       impressions: 0,
 47:       clicks: 0,
 48:       uniqueViews: 0,
 49:       deviceType: getDeviceType(),
 50:       viewTimes: [],
 51:     }
 52:   }
 53:   adMetrics.value[adId].impressions++
 54:   adMetrics.value[adId].viewTimes.push(Date.now())
 55: 
 56:   // Increment uniqueViews only if it's the first time this ad is viewed
 57:   if (!viewedAds.value.has(adId)) {
 58:     adMetrics.value[adId].uniqueViews++
 59:     viewedAds.value.add(adId)
 60:   }
 61: }
 62: 
 63: const trackInteraction = (adId: number) => {
 64:   if (adMetrics.value[adId]) {
 65:     adMetrics.value[adId].clicks++
 66:   }
 67: }
 68: 
 69: const sendMetrics = async () => {
 70:   const metricsToSend = JSON.parse(JSON.stringify(adMetrics.value))
 71: 
 72:   try {
 73:     // Send metrics to admin server (not implemented)
 74:     await $fetch('/api/advertisement/metrics', {
 75:       method: 'POST',
 76:       body: { metrics: metricsToSend },
 77:     })
 78: 
 79:     console.log('Metrics sent successfully')
 80:     // Clear the local metrics after successful send
 81:     adMetrics.value = {}
 82:   } catch (error) {
 83:     console.error('Failed to send metrics:', error)
 84:   }
 85: }
 86: 
 87: const intervalId = ref(null as NodeJS.Timeout | null)
 88: onMounted(() => {
 89:   intervalId.value = setInterval(sendMetrics, sendInterval)
 90:   loadActiveAds()
 91:   activeAds.value.forEach((ad) => trackImpression(ad.id))
 92: })
 93: 
 94: watch(
 95:   activeAds,
 96:   (newAds) => {
 97:     newAds.forEach((ad) => trackImpression(ad.id))
 98:   },
 99:   { deep: true },
100: )
101: 
102: onUnmounted(() => {
103:   clearInterval(intervalId.value!)
104:   sendMetrics() // Send any remaining metrics before unmounting
105: })
106: </script>
107: 
108: <template>
109:   <aside class="mx-auto min-h-72 w-72 space-y-4 p-4">
110:     <div class="mb-4 flex items-center justify-between">
111:       <label
112:         for="show-ads-toggle"
113:         class="pr-2 text-sm"
114:       >
115:         Toggle Ads
116:       </label>
117:       <PrimeToggleSwitch
118:         v-model="showAds"
119:         input-id="show-ads-toggle"
120:       />
121:     </div>
122:     <div
123:       v-for="ad in activeAds"
124:       :key="ad.id"
125:       class="border-color overflow-hidden rounded-lg"
126:       :class="!showAds ? '' : 'border'"
127:     >
128:       <a
129:         :href="showAds ? ad.link : undefined"
130:         target="_blank"
131:         rel="noopener noreferrer"
132:         class="block h-full w-full"
133:         :class="{ invisible: !showAds }"
134:         @click="trackInteraction(ad.id)"
135:       >
136:         <div class="max-h-72 w-full">
137:           <NuxtImg
138:             v-if="showAds"
139:             :src="ad.imageUrl"
140:             :alt="ad.title"
141:             class="w-full object-cover"
142:           />
143:         </div>
144:         <div class="p-4">
145:           <h3
146:             v-if="showAds"
147:             class="text-lg font-semibold"
148:           >
149:             {{ ad.title }}
150:           </h3>
151:           <p
152:             v-if="showAds"
153:             class="text-sm"
154:           >
155:             {{ ad.description }}
156:           </p>
157:         </div>
158:       </a>
159:     </div>
160:   </aside>
161: </template>
```

## File: layers/advert/plugins/error-handler.ts
```typescript
 1: import { useErrorHandler } from '@ib/logger'
 2: 
 3: export default defineNuxtPlugin((nuxtApp) => {
 4:   const { handleError } = useErrorHandler()
 5: 
 6:   // Set up global error handlers
 7:   if (import.meta.client) {
 8:     window.addEventListener('error', (event) => {
 9:       handleError(event.error, 'Uncaught Exception')
10:     })
11: 
12:     window.addEventListener('unhandledrejection', (event) => {
13:       handleError(event.reason, 'Unhandled Promise Rejection')
14:     })
15:   }
16: })
```

## File: layers/advert/plugins/sentry.server.ts
```typescript
1: export default defineNuxtPlugin(() => {
2:   const environment = useRuntimeConfig().public.nodeEnv
3: })
```

## File: layers/advert/server/api/advertisement/metrics.get.ts
```typescript
 1: import { promises as fs } from 'fs'
 2: import { resolve } from 'path'
 3: import { defineEventHandler } from 'h3'
 4: 
 5: interface AdMetric {
 6:   adId: number
 7:   impressions: number
 8:   clicks: number
 9:   uniqueViews: number
10:   deviceType: string
11:   viewTimes: number[]
12: }
13: 
14: const adMetricsFilePath = resolve(process.cwd(), 'data', 'advertising', 'metrics.json')
15: 
16: export default defineEventHandler(async (event) => {
17:   try {
18:     const data = await fs.readFile(adMetricsFilePath, 'utf-8')
19:     const metrics: AdMetric[] = JSON.parse(data)
20: 
21:     // Calculate additional metrics
22:     const processedMetrics = Object.values(metrics).map((metric: AdMetric) => {
23:       const ctr = metric.impressions > 0 ? (metric.clicks / metric.impressions) * 100 : 0
24:       const frequency = metric.impressions / metric.uniqueViews
25:       const timeOfDay = metric.viewTimes.map((time) => new Date(time).getHours())
26: 
27:       return {
28:         ...metric,
29:         ctr: ctr.toFixed(2) + '%',
30:         frequency: frequency.toFixed(2),
31:         timeOfDay: timeOfDay.reduce(
32:           (acc, hour) => {
33:             acc[hour] = (acc[hour] || 0) + 1
34:             return acc
35:           },
36:           {} as Record<number, number>,
37:         ),
38:       }
39:     })
40: 
41:     return processedMetrics
42:   } catch (error) {
43:     console.error('Error reading ad metrics:', error)
44:     throw createError({
45:       statusCode: 500,
46:       statusMessage: 'Failed to read ad metrics',
47:     })
48:   }
49: })
```

## File: layers/advert/server/api/advertisement/metrics.post.ts
```typescript
 1: import { promises as fs } from 'fs'
 2: import { resolve } from 'path'
 3: import { defineEventHandler, readBody } from 'h3'
 4: 
 5: const adMetricsFilePath = resolve(process.cwd(), 'data', 'advertising', 'metrics.json')
 6: 
 7: interface AdMetric {
 8:   adId: number
 9:   impressions: number
10:   clicks: number
11:   uniqueViews: number
12:   deviceType: string
13:   viewTimes: number[]
14: }
15: 
16: let batchedMetrics: Record<number, AdMetric> = {}
17: let lastWriteTime = Date.now()
18: const WRITE_INTERVAL = 60000 // 1 minute
19: 
20: const writeMetricsToFile = async () => {
21:   try {
22:     let existingMetrics: Record<number, AdMetric> = {}
23:     try {
24:       const data = await fs.readFile(adMetricsFilePath, 'utf-8')
25:       existingMetrics = JSON.parse(data)
26:     } catch (error) {
27:       console.warn('No existing ad metrics found:', error)
28:       // File doesn't exist yet, start with empty object
29:     }
30: 
31:     // Merge batched metrics with existing metrics
32:     for (const [adId, metric] of Object.entries(batchedMetrics)) {
33:       if (!existingMetrics[adId]) {
34:         existingMetrics[adId] = metric
35:       } else {
36:         existingMetrics[adId].impressions += metric.impressions
37:         existingMetrics[adId].clicks += metric.clicks
38:         existingMetrics[adId].uniqueViews += metric.uniqueViews
39:         existingMetrics[adId].viewTimes.push(...metric.viewTimes)
40:       }
41:     }
42: 
43:     await fs.writeFile(adMetricsFilePath, JSON.stringify(existingMetrics, null, 2), 'utf-8')
44:     batchedMetrics = {} // Clear batched metrics after writing
45:     lastWriteTime = Date.now()
46:   } catch (error) {
47:     console.error('Error writing ad metrics:', error)
48:   }
49: }
50: 
51: export default defineEventHandler(async (event) => {
52:   const body = await readBody(event)
53:   const { metrics } = body as { metrics: Record<number, AdMetric> }
54: 
55:   if (!metrics) {
56:     return { success: false, message: 'No ad metrics received' }
57:   }
58: 
59:   console.log('Received ad metrics:', metrics)
60:   // Merge incoming metrics with batched metrics
61:   for (const [adId, metric] of Object.entries(metrics)) {
62:     if (!batchedMetrics[adId]) {
63:       batchedMetrics[adId] = metric
64:     } else {
65:       batchedMetrics[adId].impressions += metric.impressions
66:       batchedMetrics[adId].clicks += metric.clicks
67:       batchedMetrics[adId].uniqueViews += metric.uniqueViews
68:       batchedMetrics[adId].viewTimes.push(...metric.viewTimes)
69:     }
70:   }
71: 
72:   // Check if it's time to write to file
73:   if (Date.now() - lastWriteTime > WRITE_INTERVAL) {
74:     await writeMetricsToFile()
75:   }
76: 
77:   return { success: true, message: 'Ad metrics received and batched' }
78: })
```

## File: layers/advert/nuxt.config.ts
```typescript
1: import { defineNuxtConfig } from 'nuxt/config'
2: 
3: export default defineNuxtConfig({
4:   workspaceDir: '../../',
5:   srcDir: '.',
6: })
```

## File: layers/auth/.playground/app.config.ts
```typescript
1: export default defineAppConfig({
2:   myLayer: {
3:     name: 'My amazing Nuxt layer (overwritten)'
4:   }
5: })
```

## File: layers/auth/.playground/nuxt.config.ts
```typescript
1: export default defineNuxtConfig({
2:   extends: ['..'],
3:   modules: ['@nuxt/eslint']
4: })
```

## File: layers/auth/composables/user.current.store.ts
```typescript
  1: import { useLogger } from '@ib/logger'
  2: 
  3: const DOMAIN_KEY = 'currentUser'
  4: 
  5: export const useCurrentUser = defineStore(DOMAIN_KEY, () => {
  6:   const authUrl = useRuntimeConfig().public.aeAuthUrl
  7:   const logger = useLogger(DOMAIN_KEY)
  8:   const errors = useBaseError()
  9:   const loading = useLoadingStore()
 10:   const { fetch } = useBaseFetch()
 11:   const userId = useCookie('userId')
 12:   const user = useSupabaseUser()
 13: 
 14:   // check:critical - user should only be able to fetch their own full profile
 15:   // check:critical - user should only be able to update their own profile
 16:   // todo:high - allow user to update their profile info
 17:   // todo:med - merge currentUser and profile into one, store all required data everything in their session
 18:   // assign Posthog identify
 19: 
 20:   console.log('user', user.value)
 21: 
 22:   const profile = computed(() => ({
 23:     id: user.value?.id,
 24:     given_name: user.value?.user_metadata?.given_name,
 25:     email_confirmed_at: user.value?.email_confirmed_at,
 26:     confirmation_sent_at: user.value?.confirmation_sent_at,
 27:     confirmed_at: user.value?.confirmed_at,
 28:     created_at: user.value?.created_at,
 29:     surname: user.value?.user_metadata?.surname,
 30:     last_sign_in_at: user.value?.last_sign_in_at,
 31:     email: user.value?.email,
 32:     providers: user.value?.app_metadata.providers,
 33:     avatar: user.value?.user_metadata.avatar || user.value?.user_metadata.avatar_url,
 34:     provider: user.value?.provider,
 35:     user_role: user.value?.app_metadata?.role,
 36:     user_plan: user.value?.app_metadata?.plan,
 37:   }))
 38: 
 39:   // extract as util func
 40:   function hasValueChanged(newValue: any, currentValue: any): boolean {
 41:     console.log('hasValueChanged', newValue, currentValue)
 42:     if (
 43:       typeof newValue === 'string' ||
 44:       typeof newValue === 'boolean' ||
 45:       typeof newValue === 'number'
 46:     ) {
 47:       return newValue !== currentValue
 48:     } else if (Array.isArray(newValue)) {
 49:       return JSON.stringify(newValue) !== JSON.stringify(currentValue)
 50:     } else if (typeof newValue === 'object' && newValue !== null) {
 51:       return JSON.stringify(newValue) !== JSON.stringify(currentValue)
 52:     } else {
 53:       return newValue !== currentValue
 54:     }
 55:   }
 56: 
 57:   function cleanDataForUpdate(newData: any, previousData: any) {
 58:     const updatedData: any = {}
 59:     for (const key in newData) {
 60:       if (
 61:         Object.hasOwnProperty.call(newData, key) &&
 62:         hasValueChanged(newData[key], previousData[key])
 63:       ) {
 64:         updatedData[key] = newData[key]
 65:       }
 66:     }
 67: 
 68:     return { data: updatedData, noDataUpdated: Object.keys(updatedData).length === 0 }
 69:   }
 70: 
 71:   async function updateProfile(newData: any, isMock: boolean = false) {
 72:     logger.info('Starting updateProfile function', { newData, isMock })
 73:     const updatedData: any = {}
 74:     const toast = useNotification()
 75: 
 76:     logger.debug('Cleaning data for update')
 77:     // Compare newData with fullProfile and only include changed values
 78:     const { noDataUpdated, data } = cleanDataForUpdate(newData, profile.value)
 79: 
 80:     if (noDataUpdated) {
 81:       logger.info('No changes detected, no update necessary')
 82:       return
 83:     }
 84: 
 85:     logger.debug('Changes detected', { changedData: data })
 86: 
 87:     try {
 88:       logger.info('Sending update request to server')
 89:       let response
 90:       if (isMock) {
 91:         logger.info('Using mock API call')
 92:         // response = await mockApiCall(data)
 93:       } else {
 94:         response = await $fetch('/api/users/update', {
 95:           method: 'POST',
 96:           body: JSON.stringify(data),
 97:         })
 98:       }
 99:       logger.debug('Received response from server', { response })
100: 
101:       const validData = errors.server({
102:         response,
103:         devOnly: false,
104:         devMessage: 'Error updating user profile',
105:         userMessage: 'There was an error updating your profile after action',
106:       })
107: 
108:       if (response.error) {
109:         toast.error({ summary: 'Could not update profile', message: response.error.message })
110:         return
111:       } else {
112:         toast.success({
113:           summary: 'Profile updated successfully',
114:           message: 'Your profile was updated',
115:         })
116:       }
117: 
118:       logger.info('Successfully validated server response', { validData })
119: 
120:       // update state
121:       logger.debug('Updating user profile state')
122:       for (const key in data) {
123:         if (Object.hasOwnProperty.call(data, key)) {
124:           profile.value[key] = data[key]
125:           logger.debug(`Updating profile field: ${key}`, {
126:             newValue: data[key],
127:           })
128:         }
129:       }
130:       logger.info('Profile update completed successfully')
131:     } catch (error) {
132:       logger.error('Error occurred during profile update', { error })
133:       throw error // Re-throw the error for the caller to handle
134:     }
135:   }
136: 
137:   // Test function
138:   async function testUpdateProfile() {
139:     const testCases = [
140:       { name: 'John Doe', email: 'john@example.com' },
141:       { name: 'Jane Doe', email: 'error@example.com' }, // This will trigger an error
142:       {}, // This should result in no update
143:     ]
144: 
145:     for (const testCase of testCases) {
146:       try {
147:         console.log('Testing with data:', testCase)
148:         await updateProfile(testCase, true) // Use mock API
149:         console.log('Test passed successfully')
150:       } catch (error) {
151:         console.error('Test failed:', error.message)
152:       }
153:       console.log('---')
154:     }
155:   }
156: 
157:   type FileType = 'avatar'
158:   async function uploadImage(fileType: FileType, blob: Blob) {
159:     // currentFileName is the current file name in the database eg. avatar-drew-macgibbon.jpg
160:     const formData = new FormData()
161:     formData.append('file', blob)
162: 
163:     const response = await $fetch('/api/users/insert/image', {
164:       method: 'POST',
165:       body: formData,
166:       params: {
167:         fileType,
168:         userId: userId.value,
169:       },
170:     })
171: 
172:     console.log('fileName', response)
173: 
174:     const fileName = errors.server({
175:       response,
176:       devOnly: false,
177:       devMessage: `Error uploading ${fileType} image`,
178:       userMessage: `There was an error uploading your ${fileType}`,
179:     })
180: 
181:     let newData = {}
182: 
183:     console.log('fileName', fileName)
184: 
185:     if (fileType === 'avatar') {
186:       newData = {
187:         avatar: fileName,
188:       }
189:     }
190: 
191:     updateProfile(newData)
192:   }
193: 
194:   // first check if the user has an avatar in their profile
195:   // if not, check if the user has an avatar in their identities
196:   // cycle through identities check identities_data for picture
197: 
198:   return {
199:     haveUserSession: computed(() => !!profile.value),
200:     isAdmin: computed(
201:       () => profile.value?.user_role === 'admin' || profile.value?.user_role === 'super_admin',
202:     ),
203:     registeredWithProvider: computed(() => profile.value?.provider),
204:     profile,
205:     uploadImage,
206:     updateProfile,
207:     testUpdateProfile,
208:   }
209: })
210: 
211: if (import.meta.hot) {
212:   import.meta.hot.accept(acceptHMRUpdate(useCurrentUser, import.meta.hot))
213: }
```

## File: layers/auth/server/middleware/cors.ts
```typescript
 1: import { defineEventHandler, getRequestHeader, setResponseHeaders } from 'h3'
 2: 
 3: export default defineEventHandler((event) => {
 4:   const allowedDomains = ['astronera.org', 'up.railway.app', 'rlwy.net', 'localhost']
 5: 
 6:   const origin = getRequestHeader(event, 'origin') || ''
 7: 
 8:   const isAllowedOrigin = allowedDomains.some(
 9:     (domain) =>
10:       origin.startsWith('http://localhost:') || // Allow any localhost port
11:       origin.endsWith(`.${domain}`) || // Allow all subdomains
12:       origin === `https://${domain}`, // Allow apex domain
13:   )
14: 
15:   if (isAllowedOrigin || process.env.NODE_ENV !== 'production') {
16:     setResponseHeaders(event, {
17:       'Access-Control-Allow-Methods': 'GET,HEAD,PUT,PATCH,POST,DELETE',
18:       'Access-Control-Allow-Origin': origin,
19:       'Access-Control-Allow-Credentials': 'true',
20:       'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',
21:       'Access-Control-Expose-Headers': 'Content-Length, X-JSON',
22:     })
23:   }
24: 
25:   console.log('CORS', origin, isAllowedOrigin)
26: 
27:   if (event.method === 'OPTIONS') {
28:     event.node.res.statusCode = 204
29:     event.node.res.statusMessage = 'No Content.'
30:     return 'OK'
31:   }
32: })
```

## File: layers/auth/nuxt.config.ts
```typescript
 1: import { fileURLToPath } from 'url'
 2: import { dirname, join, resolve } from 'path'
 3: import { defineNuxtConfig } from 'nuxt/config'
 4: import tsconfigPaths from 'vite-tsconfig-paths'
 5: 
 6: const currentDir = dirname(fileURLToPath(import.meta.url))
 7: 
 8: console.log('Node Env:', process.env.NODE_ENV)
 9: 
10: export default defineNuxtConfig({
11:   workspaceDir: '../../',
12:   srcDir: '.',
13: 
14:   modules: ['@nuxtjs/supabase'],
15: 
16:   supabase: {
17:     redirect: false,
18:     clientOptions: {
19:       auth: {
20:         flowType: 'pkce',
21:         detectSessionInUrl: true,
22:         persistSession: true,
23:         autoRefreshToken: true,
24:       },
25:     },
26:     cookieOptions: {
27:       domain:
28:         process.env.NODE_ENV === 'production'
29:           ? 'astronera.org' // This will work for all subdomains
30:           : 'localhost',
31:       maxAge: 60 * 60 * 8,
32:       path: '/',
33:       sameSite: 'lax',
34:       secure: process.env.NODE_ENV === 'production' ? true : false,
35:     },
36:     cookieName: 'sb',
37:   },
38: })
```

## File: layers/base/.playground/app.config.ts
```typescript
1: export default defineAppConfig({
2:   myLayer: {
3:     name: 'My amazing Nuxt layer (overwritten)',
4:   },
5: })
```

## File: layers/base/.playground/nuxt.config.ts
```typescript
1: export default defineNuxtConfig({
2:   extends: ['..'],
3:   modules: ['@nuxt/eslint'],
4: })
```

## File: layers/base/components/image/ImageHero.vue
```vue
 1: <script setup lang="ts">
 2: import type { TitleType, ImageType } from '../../types/content'
 3: 
 4: defineProps({
 5:   fit: {
 6:     type: String,
 7:     default: 'cover',
 8:   },
 9:   objectPosition: {
10:     type: String,
11:     default: 'center',
12:   },
13:   title: {
14:     type: Object as () => TitleType,
15:     required: true,
16:   },
17:   img: {
18:     type: Object as () => ImageType,
19:     required: true,
20:   },
21: })
22: 
23: // consider turning the images into short videos using AI
24: // consider using mix-blend-mode for cool text effect with video
25: </script>
26: 
27: <template>
28:   <div class="relative flex items-center justify-center">
29:     <IBImage
30:       :img="{
31:         src: img.src,
32:         alt: img.alt,
33:         width: img.width,
34:         height: img.height,
35:       }"
36:       :class="`w-full object-${fit} ${objectPosition} h-screen`"
37:     />
38:     <div
39:       class="absolute z-10 flex flex-col items-center justify-center gap-8 px-4 text-white lg:flex-row lg:gap-16 xl:px-8"
40:     >
41:       <slot />
42:       <div class="flex flex-col gap-4">
43:         <h2
44:           :class="`rounded-md bg-black/30 px-4 py-1 text-3xl font-bold shadow-xl lg:text-5xl xl:px-8 text-${title.centered ? 'center' : 'left'}`"
45:         >
46:           {{ title.main }}
47:         </h2>
48:         <p
49:           v-if="title.subtitle"
50:           :class="`inline-block w-auto max-w-2xl rounded-sm px-4 pb-4 text-xl font-semibold lg:text-3xl xl:px-8 text-${title.centered ? 'center' : 'left'}`"
51:         >
52:           {{ title.subtitle }}
53:         </p>
54:       </div>
55:     </div>
56:     <div class="absolute left-0 top-0 h-full w-full bg-black/50" />
57:   </div>
58: </template>
59: 
60: <style scoped></style>
```

## File: layers/base/components/image/ImageWithFallback.vue
```vue
 1: <script setup lang="ts">
 2: interface Image {
 3:   src: string
 4:   alt: string | null
 5:   caption: string | null
 6:   credit: string | null
 7: }
 8: 
 9: interface Options {
10:   width: number
11:   height: number
12:   sizes: string | undefined | null
13:   quality: number | undefined | null
14: }
15: 
16: defineProps({
17:   image: {
18:     type: Object as () => Image | undefined,
19:     default: undefined,
20:   },
21:   options: {
22:     type: Object as () => Options | undefined,
23:     default: () => ({
24:       width: 50,
25:       height: 50,
26:       sizes: null,
27:       quality: 80,
28:     }),
29:   },
30: })
31: </script>
32: 
33: <template>
34:   <div class="relative h-full w-full overflow-hidden rounded-md object-cover">
35:     <IBImage
36:       :img="{
37:         src: image?.src || 'hero-image.jpg',
38:         alt: image?.alt || 'this is a default fallback for when an image is not present',
39:         width: options?.width || 60,
40:         height: options?.height || 37,
41:         quality: options?.quality || 80,
42:       }"
43:       class="h-full w-full object-cover"
44:     />
45:     <div
46:       v-if="!image?.src"
47:       class="absolute left-0 top-0 z-50 flex h-full w-full items-center justify-center bg-black/40"
48:     >
49:       <h3 class="foreground rounded-lg px-3 py-1 text-base"> NO IMAGE </h3>
50:     </div>
51:   </div>
52: </template>
```

## File: layers/base/components/Background.vue
```vue
 1: <template>
 2:   <canvas
 3:     ref="canvas"
 4:     class="w-full h-full"
 5:   />
 6: </template>
 7: 
 8: <script setup lang="ts">
 9: const CANVAS_WIDTH = computed(() => (window ? window.innerWidth : 0))
10: const CANVAS_HEIGHT = computed(() => (window ? window.innerHeight + 800 : 0))
11: const STAR_COUNT = 300 // Number of stars
12: const COLORS = ['#ffffff', '#ffcccb', '#add8e6'] // White, red, blue
13: 
14: // Refs
15: const canvas = ref<HTMLCanvasElement | null>(null)
16: let ctx: CanvasRenderingContext2D | null = null
17: let animationFrameId: number
18: 
19: // Utility function to get random number within a range
20: function getRandom(min: number, max: number): number {
21:   return Math.random() * (max - min) + min
22: }
23: 
24: // Create stars array
25: const stars = Array.from({ length: STAR_COUNT }, () => ({
26:   x: getRandom(0, CANVAS_WIDTH.value),
27:   y: getRandom(0, CANVAS_HEIGHT.value),
28:   radius: getRandom(0.5, 2),
29:   color: COLORS[Math.floor(Math.random() * COLORS.length)],
30:   speed: 0.01, // Speed of movement
31:   initialX: 0,
32:   initialY: 0,
33: }))
34: 
35: // Initialize star positions
36: stars.forEach((star) => {
37:   star.initialX = star.x
38:   star.initialY = star.y
39: })
40: 
41: // Draw stars on canvas
42: function drawStars() {
43:   if (!ctx) {
44:     return
45:   }
46: 
47:   ctx.clearRect(0, 0, CANVAS_WIDTH.value, CANVAS_HEIGHT.value)
48: 
49:   stars.forEach((star) => {
50:     ctx.beginPath()
51:     ctx.arc(star.x, star.y, star.radius, 0, 2 * Math.PI, false)
52:     ctx.fillStyle = star.color
53:     ctx.shadowColor = star.color
54:     ctx.shadowBlur = 8
55:     ctx.fill()
56:     ctx.closePath()
57: 
58:     // Update star position to follow an inverted arc path
59:     star.x -= star.speed
60:     star.y =
61:       star.initialY - Math.sin((star.x / CANVAS_WIDTH.value) * Math.PI) * (CANVAS_HEIGHT.value / 4)
62: 
63:     // Wrap stars around edges
64:     if (star.x < 0) {
65:       star.x = CANVAS_WIDTH.value
66:       star.initialY = getRandom(0, CANVAS_HEIGHT.value)
67:     }
68:   })
69: 
70:   // Request next animation frame
71:   animationFrameId = requestAnimationFrame(drawStars)
72: }
73: 
74: // Set up canvas and start animation
75: onMounted(() => {
76:   if (canvas.value) {
77:     canvas.value.width = CANVAS_WIDTH.value
78:     canvas.value.height = CANVAS_HEIGHT.value
79:     ctx = canvas.value.getContext('2d')
80:     if (ctx) {
81:       ctx.fillStyle = 'black'
82:       ctx.fillRect(0, 0, CANVAS_WIDTH.value, CANVAS_HEIGHT.value)
83:       drawStars()
84:     }
85:   }
86: })
87: 
88: // Clean up animation on component unmount
89: onBeforeUnmount(() => {
90:   cancelAnimationFrame(animationFrameId)
91: })
92: </script>
93: 
94: <style scoped>
95: canvas {
96:   width: 100vw;
97:   height: 120vh;
98: }
99: </style>
```

## File: layers/base/components/Breadcrumbs.vue
```vue
 1: <script lang="ts" setup>
 2: const route = useRoute()
 3: 
 4: const generateBreadcrumbs = (path: string) => {
 5:   const pathParts = path.split('/').filter(Boolean)
 6:   let currentPath = ''
 7:   return pathParts.map((part) => {
 8:     currentPath += `/${part}`
 9:     return {
10:       to: currentPath,
11:       label: part.charAt(0).toUpperCase() + part.slice(1),
12:       ariaLabel: part.charAt(0).toUpperCase() + part.slice(1),
13:     }
14:   })
15: }
16: 
17: const links = computed(() => generateBreadcrumbs(route.path))
18: 
19: // Prepare links by filtering and adjusting labels
20: const formattedLinks = computed(() => {
21:   if (!links.value) return []
22:   console.log('Formatting links', links.value)
23:   return links.value
24:     .map((link) => {
25:       if (!link) return null // Skip if link is undefined or null
26: 
27:       // Filter out the home link if in app route
28:       if (link.to === '/') {
29:         console.log('Filtering out home link', link)
30:         return null
31:       }
32: 
33:       // Special handling for the 'astrotribe' path
34:       if (link.to === '/') {
35:         return { ...link, label: 'Home', ariaLabel: 'Home' }
36:       }
37: 
38:       if (link.to === '/ask') {
39:         return { ...link, label: 'Q&A', ariaLabel: 'Q&A' }
40:       }
41: 
42:       return link // Return unmodified link
43:     })
44:     .filter(Boolean) // Remove null entries
45: })
46: </script>
47: 
48: <template>
49:   <PrimeBreadcrumb
50:     v-if="formattedLinks.length"
51:     :model="formattedLinks"
52:     :pt="{
53:       root: 'foreground p-0 flex items-center justify-start',
54:       menu: '!mb-0',
55:     }"
56:   >
57:     <template #item="{ item }">
58:       <NuxtLink :to="item.to">
59:         <span
60:           class="text-primary font-semibold"
61:           :class="item.current ? 'link-active' : ''"
62:         >
63:           {{ item.label }}
64:         </span>
65:       </NuxtLink>
66:     </template>
67:   </PrimeBreadcrumb>
68: </template>
69: 
70: <style></style>
```

## File: layers/base/components/Glass.vue
```vue
  1: <script setup lang="ts">
  2: const uniqueId = useId()
  3: 
  4: const tailwindColors = [
  5:   'slate',
  6:   'gray',
  7:   'zinc',
  8:   'neutral',
  9:   'stone',
 10:   'red',
 11:   'orange',
 12:   'amber',
 13:   'yellow',
 14:   'lime',
 15:   'green',
 16:   'emerald',
 17:   'teal',
 18:   'cyan',
 19:   'sky',
 20:   'blue',
 21:   'indigo',
 22:   'violet',
 23:   'purple',
 24:   'fuchsia',
 25:   'pink',
 26:   'rose',
 27:   'primary', // Assuming you have a custom 'primary' color
 28: ] as const
 29: 
 30: type TailwindColor = (typeof tailwindColors)[number]
 31: 
 32: const props = defineProps({
 33:   color: { type: String as PropType<TailwindColor>, default: 'slate' },
 34:   bgOpacity: { type: Number, default: 20 },
 35:   gradientOpacity: { type: Number, default: 10 },
 36:   blurIntensity: { type: String, default: 'md' },
 37:   disableHover: { type: Boolean, default: false },
 38:   padding: { type: String, default: '6' },
 39:   loading: { type: Boolean, default: false },
 40:   ariaLabel: { type: String, default: 'Glass card' },
 41: })
 42: 
 43: const cardRef = ref<HTMLElement | null>(null)
 44: const gravityAreaRef = ref<HTMLElement | null>(null)
 45: 
 46: const {
 47:   handleMouseMove,
 48:   handleMouseLeave,
 49:   cardStyle,
 50:   spotlightStyle,
 51:   bgClasses,
 52:   borderClasses,
 53:   textClasses,
 54:   gradientClasses,
 55:   hoverClasses,
 56: } = useGlassCard(props, uniqueId)
 57: </script>
 58: 
 59: <template>
 60:   <div
 61:     :id="uniqueId"
 62:     class="relative"
 63:   >
 64:     <div
 65:       ref="gravityAreaRef"
 66:       class="pointer-events-none absolute -inset-[30%] z-0"
 67:     ></div>
 68:     <div
 69:       ref="cardRef"
 70:       :class="[
 71:         'glass-card relative overflow-hidden rounded-md shadow-xl',
 72:         'ring-2 ring-inset ring-white/10',
 73:         `backdrop-blur-${blurIntensity}`,
 74:         `p-${padding}`,
 75:         bgClasses,
 76:         borderClasses,
 77:         textClasses,
 78:         ...hoverClasses,
 79:       ]"
 80:       :style="cardStyle"
 81:       role="region"
 82:       :aria-label="ariaLabel"
 83:       @mousemove="(e) => handleMouseMove(e)"
 84:       @mouseleave="handleMouseLeave"
 85:     >
 86:       <div class="glass-card-content relative z-20">
 87:         <slot name="header"></slot>
 88:         <slot></slot>
 89:       </div>
 90:       <div
 91:         :class="['absolute inset-0 z-10 h-full w-full bg-gradient-to-br', gradientClasses]"
 92:       ></div>
 93:       <div
 94:         class="glass-effect"
 95:         :style="spotlightStyle"
 96:       ></div>
 97:       <div
 98:         v-if="loading"
 99:         class="animate-shimmer absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent"
100:       ></div>
101:     </div>
102:   </div>
103: </template>
104: 
105: <style scoped>
106: .glass-card {
107:   transition: all 0.3s ease;
108: }
109: 
110: .glass-effect {
111:   position: absolute;
112:   inset: 0;
113:   pointer-events: none;
114:   transition: opacity 0.2s;
115: }
116: 
117: .glass-card-content {
118:   transition: transform 0.3s ease;
119: }
120: 
121: .glass-card:hover .glass-card-content {
122:   transform: translateY(-5px);
123: }
124: 
125: @keyframes shimmer {
126:   0% {
127:     transform: translateX(-100%);
128:   }
129:   100% {
130:     transform: translateX(100%);
131:   }
132: }
133: 
134: .animate-shimmer {
135:   animation: shimmer 1.5s infinite;
136: }
137: 
138: .spotlight {
139:   backdrop-filter: blur(2px) contrast(1.2);
140:   mix-blend-mode: overlay;
141: }
142: </style>
```

## File: layers/base/components/GlobalTimer.vue
```vue
  1: <script setup lang="ts">
  2: const isVisible = ref(true)
  3: const isTracking = ref(false)
  4: const elapsedTime = ref(0)
  5: const currentTask = ref('')
  6: let timer: NodeJS.Timeout | null = null
  7: let startTime: number
  8: let pausedTime = 0
  9: 
 10: function startTimer() {
 11:   if (!import.meta.client) return
 12: 
 13:   if (!isTracking.value) {
 14:     isTracking.value = true
 15:     startTime = Date.now() - pausedTime
 16:     timer = setInterval(() => {
 17:       elapsedTime.value = Math.floor((Date.now() - startTime) / 1000)
 18:     }, 1000)
 19:   }
 20: }
 21: 
 22: function pauseTimer() {
 23:   if (isTracking.value) {
 24:     isTracking.value = false
 25:     if (timer) {
 26:       clearInterval(timer)
 27:       timer = null
 28:     }
 29:     pausedTime = Date.now() - startTime
 30:   }
 31: }
 32: 
 33: function stopTimer() {
 34:   isTracking.value = false
 35:   isVisible.value = false
 36:   if (timer) {
 37:     clearInterval(timer)
 38:     timer = null
 39:   }
 40:   elapsedTime.value = 0
 41:   pausedTime = 0
 42:   currentTask.value = ''
 43: }
 44: 
 45: function showTimer(taskTitle: string) {
 46:   currentTask.value = taskTitle
 47:   isVisible.value = true
 48:   startTimer()
 49: }
 50: 
 51: function formatTime(seconds: number) {
 52:   const hours = Math.floor(seconds / 3600)
 53:   const minutes = Math.floor((seconds % 3600) / 60)
 54:   const secs = seconds % 60
 55:   return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
 56: }
 57: 
 58: onUnmounted(() => {
 59:   if (timer) clearInterval(timer)
 60: })
 61: 
 62: defineExpose({
 63:   showTimer,
 64:   stopTimer,
 65: })
 66: </script>
 67: 
 68: <template>
 69:   <div
 70:     v-if="isVisible"
 71:     class="flex items-center gap-2 rounded-lg bg-gray-800 p-2 text-white shadow-lg"
 72:   >
 73:     <div class="text-sm font-bold">
 74:       {{ currentTask }}
 75:     </div>
 76:     <div class="text-xl"> ⏱️ {{ formatTime(elapsedTime) }} </div>
 77:     <div class="flex space-x-2">
 78:       <PrimeButton
 79:         v-if="!isTracking"
 80:         size="small"
 81:         class="rounded-full bg-green-500 p-2 hover:bg-green-600"
 82:         @click="startTimer"
 83:       >
 84:         <Icon
 85:           name="mdi:play"
 86:           size="24px"
 87:         />
 88:       </PrimeButton>
 89:       <PrimeButton
 90:         v-else
 91:         size="small"
 92:         class="rounded-full bg-yellow-500 p-2 hover:bg-yellow-600"
 93:         @click="pauseTimer"
 94:       >
 95:         <Icon
 96:           name="mdi:pause"
 97:           size="24px"
 98:         />
 99:       </PrimeButton>
100:       <PrimeButton
101:         size="small"
102:         class="rounded-full bg-red-500 p-2 hover:bg-red-600"
103:         @click="stopTimer"
104:       >
105:         <Icon
106:           name="mdi:stop"
107:           size="24px"
108:         />
109:       </PrimeButton>
110:     </div>
111:   </div>
112: </template>
```

## File: layers/base/components/Grid.vue
```vue
1: <script setup lang="ts"></script>
2: 
3: <template>
4:   <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 md:gap-4 xl:gap-8">
5:     <slot />
6:   </div>
7: </template>
8: 
9: <style scoped></style>
```

## File: layers/base/components/HelloWorld.vue
```vue
 1: <script setup lang="ts">
 2: const { myLayer } = useAppConfig()
 3: </script>
 4: 
 5: <template>
 6:   <div>
 7:     <h1>Hello World!</h1>
 8:     <pre>{{ myLayer }}</pre>
 9:   </div>
10: </template>
```

## File: layers/base/components/HoverCard.vue
```vue
 1: <script setup lang="ts">
 2: const enableHoverEffect = ref(false)
 3: const hoverPosition = ref(null as null | 'up' | 'down') // 'up', 'center', or 'down'
 4: 
 5: function checkHoverPosition(event) {
 6:   if (!enableHoverEffect.value) {
 7:     return // Do nothing if hover effects are disabled
 8:   }
 9:   const rect = event.target.getBoundingClientRect()
10:   const halfScreen = window.innerHeight / 2
11:   if (rect.top < halfScreen) {
12:     console.log('top')
13:     // If the card is in the top third, expand downwards
14:     hoverPosition.value = 'down'
15:   } else {
16:     console.log('bottom')
17:     // If the card is in the bottom third, expand upwards
18:     hoverPosition.value = 'up'
19:   }
20: }
21: 
22: const checkScreenSize = () => {
23:   enableHoverEffect.value = window.innerWidth >= 1024 // Tailwind's 'lg' breakpoint
24: }
25: 
26: const paddingSize = computed(() => (window.innerWidth >= 1280 ? 32 : 16))
27: 
28: onMounted(() => {
29:   window.addEventListener('resize', checkScreenSize)
30:   checkScreenSize()
31:   return () => window.removeEventListener('resize', checkScreenSize)
32: })
33: 
34: // ui:med:easy:1 - if there is only one card in the grid row, we need to set min h of 100% to prevent the card from collapsing
35: </script>
36: 
37: <template>
38:   <div
39:     class="group relative hover:z-50"
40:     @mouseenter="checkHoverPosition"
41:     @mouseleave="hoverPosition = null"
42:   >
43:     <div
44:       :class="[
45:         'transition-all duration-300 delay-200 p-4 border-b-2 md:border border-color overflow-hidden background',
46:         'flex flex-col gap-4 w-full h-full md:rounded-md md:shadow-md',
47:         {
48:           'lg:group-hover:absolute': enableHoverEffect && !!hoverPosition,
49:           'top-0': enableHoverEffect && hoverPosition === 'down',
50:           'bottom-0': enableHoverEffect && hoverPosition === 'up',
51:         },
52:       ]"
53:       :style="{
54:         height: enableHoverEffect && !!hoverPosition ? `calc(200% + ${paddingSize}px)` : '100%',
55:       }"
56:     >
57:       <slot></slot>
58:     </div>
59:   </div>
60: </template>
61: 
62: <style scoped>
63: /* Extra styles if needed */
64: </style>
```

## File: layers/base/components/Image.vue
```vue
 1: <script lang="ts" setup>
 2: const uuid = useId()
 3: 
 4: const props = defineProps({
 5:   img: {
 6:     type: Object,
 7:     required: true,
 8:   },
 9:   noShrink: {
10:     type: Boolean,
11:     default: false,
12:   },
13: })
14: 
15: const imageUrl = ref(null)
16: 
17: watch(
18:   () => props.img.src,
19:   (newVal) => {
20:     imageUrl.value = newVal
21:   },
22:   { immediate: true },
23: )
24: 
25: function loadFallbackImage(error: Error) {
26:   console.error('Image loading error:', error)
27:   imageUrl.value = `images/defaults/${props.img.type ?? 'fallback'}.jpg`
28: }
29: </script>
30: 
31: <template>
32:   <NuxtImg
33:     v-if="imageUrl"
34:     :key="`image-${uuid}`"
35:     v-bind="$attrs"
36:     :src="imageUrl"
37:     :alt="img.alt"
38:     :width="img.width"
39:     :height="img.height"
40:     :format="img.format"
41:     :quality="img.quality"
42:     :loading="img.loading"
43:     crossorigin="anonymous"
44:     :class="{ 'flex shrink-0': !noShrink }"
45:     @error="loadFallbackImage"
46:   />
47: </template>
```

## File: layers/base/components/InfiniteScroll.vue
```vue
 1: <script setup lang="ts">
 2: const emit = defineEmits(['update:scrollEnd'])
 3: const scrollContainer = ref<HTMLElement | null>(null)
 4: const observer = ref<IntersectionObserver | null>(null)
 5: 
 6: onMounted(() => {
 7:   if ('IntersectionObserver' in window) {
 8:     observer.value = new IntersectionObserver(
 9:       (entries) => {
10:         if (entries[0].isIntersecting) {
11:           emit('update:scrollEnd')
12:         }
13:       },
14:       {
15:         root: null,
16:         rootMargin: '200px', // Load more content when within 200px of the bottom
17:         threshold: 0.1, // Trigger when at least 10% of the target is visible
18:       },
19:     )
20: 
21:     if (scrollContainer.value) {
22:       observer.value.observe(scrollContainer.value)
23:     }
24:   } else {
25:     // Fallback for browsers that don't support IntersectionObserver
26:     window.addEventListener('scroll', handleScroll)
27:   }
28: })
29: 
30: onUnmounted(() => {
31:   if (observer.value && scrollContainer.value) {
32:     observer.value.unobserve(scrollContainer.value)
33:   }
34:   window.removeEventListener('scroll', handleScroll)
35: })
36: 
37: const handleScroll = () => {
38:   if (scrollContainer.value) {
39:     const rect = scrollContainer.value.getBoundingClientRect()
40:     if (rect.top <= window.innerHeight) {
41:       emit('update:scrollEnd')
42:     }
43:   }
44: }
45: </script>
46: 
47: <template>
48:   <div>
49:     <slot />
50:     <div
51:       ref="scrollContainer"
52:       class="h-10 bg-transparent"
53:       aria-hidden="true"
54:     />
55:   </div>
56: </template>
```

## File: layers/base/components/Loader.vue
```vue
 1: <script setup lang="ts">
 2: const loaderWidth = ref('100%')
 3: const loaderHeight = ref('100%')
 4: 
 5: defineProps({
 6:   width: {
 7:     type: String,
 8:     default: '100%',
 9:   },
10:   height: {
11:     type: String,
12:     default: '100%',
13:   },
14: })
15: </script>
16: 
17: <template>
18:   <div
19:     class="skeleton-loader"
20:     :style="{ width: loaderWidth, height: loaderHeight }"
21:   ></div>
22: </template>
23: 
24: <style scoped>
25: .skeleton-loader {
26:   background-color: #f3f3f3;
27:   animation: skeleton-loading 1s infinite linear;
28: }
29: 
30: @keyframes skeleton-loading {
31:   0% {
32:     background-position: -200px 0;
33:   }
34:   100% {
35:     background-position: 200px 0;
36:   }
37: }
38: </style>
```

## File: layers/base/components/Modal.vue
```vue
 1: <script setup lang="ts">
 2: const isOpen = ref(false)
 3: 
 4: const toggleModalOpen = () => {
 5:   isOpen.value = !isOpen.value
 6: }
 7: 
 8: const options = ref({
 9:   isOpen,
10:   toggleModalOpen,
11: })
12: </script>
13: 
14: <template>
15:   <div>
16:     <slot
17:       name="button"
18:       v-bind="options"
19:     />
20:     <PrimeDialog
21:       v-model:visible="isOpen"
22:       modal
23:       :pt="{
24:         root: 'max-w-2xl w-full',
25:         content: 'w-full aspect-square',
26:       }"
27:       :pt-options="{ mergeProps: true, mergeSections: true }"
28:     >
29:       <template #header>
30:         <slot name="modal:header" />
31:       </template>
32:       <slot name="modal:default" />
33:       <template #footer>
34:         <slot
35:           name="modal:footer"
36:           v-bind="options"
37:         />
38:       </template>
39:     </PrimeDialog>
40:   </div>
41: </template>
42: 
43: <style scoped></style>
```

## File: layers/base/components/NavHamburger.vue
```vue
 1: <!-- components/nav/NavHamburger.vue -->
 2: <template>
 3:   <button
 4:     class="md:hidden p-2 hover:bg-gray-800 rounded-lg transition-colors flex"
 5:     @click="toggleMobileNav"
 6:   >
 7:     <Icon
 8:       :name="isMobileSidebarOpen ? 'mdi:close' : 'mdi:menu'"
 9:       size="24px"
10:     />
11:   </button>
12: </template>
13: 
14: <script setup lang="ts">
15: const { isMobileSidebarOpen } = useNavigation()
16: 
17: const toggleMobileNav = () => {
18:   isMobileSidebarOpen.value = !isMobileSidebarOpen.value
19: }
20: </script>
```

## File: layers/base/components/NewLabel.vue
```vue
 1: <script setup lang="ts">
 2: const props = defineProps({
 3:   date: {
 4:     type: String,
 5:     required: true,
 6:   },
 7:   maxAge: {
 8:     type: Number,
 9:     required: true,
10:   },
11: })
12: 
13: const isWithinNumberOfDays = computed(() => {
14:   const currentDate = new Date()
15:   const itemDate = new Date(props.date)
16:   const differenceInDays = Math.floor(
17:     (currentDate.getTime() - itemDate.getTime()) / (1000 * 3600 * 24),
18:   )
19:   return differenceInDays <= props.maxAge
20: })
21: </script>
22: 
23: <template>
24:   <PrimeTag
25:     v-if="isWithinNumberOfDays"
26:     severity="success"
27:     value="NEW"
28:   />
29: </template>
```

## File: layers/base/components/Pagination.vue
```vue
 1: <script setup>
 2: import { onMounted, ref } from 'vue'
 3: import { useRoute } from 'vue-router'
 4: 
 5: // todo:high:1 - implement and test on component
 6: 
 7: const route = useRoute()
 8: const slug = route.params.slug // Dynamic slug based on the current route
 9: const items = ref([])
10: const currentPage = ref(1)
11: 
12: // Store and restore pagination state using session storage
13: const sessionStorageKey = `pagination-${slug}`
14: 
15: function restoreState() {
16:   const savedState = sessionStorage.getItem(sessionStorageKey)
17:   if (savedState) {
18:     const state = JSON.parse(savedState)
19:     currentPage.value = state.currentPage
20:     items.value = state.items
21:   }
22: }
23: 
24: function storeState() {
25:   const state = {
26:     currentPage: currentPage.value,
27:     items: items.value,
28:   }
29:   sessionStorage.setItem(sessionStorageKey, JSON.stringify(state))
30: }
31: 
32: async function fetchItems() {
33:   // Placeholder function to simulate fetching items
34:   const newItems = [{ id: Date.now(), content: `Item ${currentPage.value}` }]
35:   items.value.push(...newItems)
36:   currentPage.value += 1
37:   storeState()
38: }
39: 
40: function loadMore() {
41:   fetchItems()
42: }
43: 
44: onMounted(() => {
45:   restoreState()
46:   if (items.value.length === 0) {
47:     fetchItems()
48:   }
49: })
50: </script>
51: 
52: <template>
53:   <div>
54:     <ul v-if="items.length">
55:       <li
56:         v-for="item in items"
57:         :key="item.id"
58:       >
59:         {{ item.content }}
60:       </li>
61:     </ul>
62:     <button @click="loadMore"> Load More </button>
63:   </div>
64: </template>
```

## File: layers/base/components/Popover.vue
```vue
 1: <script setup lang="ts">
 2: const props = defineProps({
 3:   buttonLabel: { type: String, required: true },
 4: })
 5: 
 6: const popover = ref(null)
 7: 
 8: const toggle = (event) => {
 9:   popover.value?.toggle(event)
10: }
11: </script>
12: 
13: <template>
14:   <div>
15:     <PrimeButton
16:       type="button"
17:       size="small"
18:       severity="secondary"
19:       :label="buttonLabel"
20:       @click="toggle"
21:     />
22:     <PrimePopover ref="popover">
23:       <slot></slot>
24:     </PrimePopover>
25:   </div>
26: </template>
27: 
28: <style scoped></style>
```

## File: layers/base/components/Resizable.vue
```vue
 1: <script lang="ts" setup>
 2: const props = defineProps<{
 3:   slots: Record<string, string>
 4: }>()
 5: 
 6: const container = ref<HTMLElement | null>(null)
 7: const resizer = ref<HTMLElement | null>(null)
 8: const sizes = ref<number[]>([1, 1])
 9: 
10: const startResize = (e: MouseEvent) => {
11:   e.preventDefault()
12:   window.addEventListener('mousemove', resize)
13:   window.addEventListener('mouseup', stopResize)
14: }
15: 
16: const resize = (e: MouseEvent) => {
17:   if (!container.value) return
18:   const containerRect = container.value.getBoundingClientRect()
19:   const newLeftWidth = e.clientX - containerRect.left
20:   const containerWidth = containerRect.width
21: 
22:   sizes.value = [newLeftWidth / containerWidth, 1 - newLeftWidth / containerWidth]
23: }
24: 
25: const stopResize = () => {
26:   window.removeEventListener('mousemove', resize)
27:   window.removeEventListener('mouseup', stopResize)
28: }
29: 
30: onMounted(() => {
31:   if (resizer.value) {
32:     resizer.value.addEventListener('mousedown', startResize)
33:   }
34: })
35: 
36: onUnmounted(() => {
37:   if (resizer.value) {
38:     resizer.value.removeEventListener('mousedown', startResize)
39:   }
40:   window.removeEventListener('mousemove', resize)
41:   window.removeEventListener('mouseup', stopResize)
42: })
43: </script>
44: 
45: <template>
46:   <div
47:     ref="container"
48:     class="relative flex h-full w-full"
49:   >
50:     <div
51:       v-for="(componentId, index) in Object.values(slots)"
52:       :key="componentId"
53:       :class="['overflow-auto', index === 0 ? 'pr-4' : 'pl-4']"
54:       :style="{ flex: sizes[index] }"
55:     >
56:       <slot :name="componentId"></slot>
57:     </div>
58:     <div
59:       ref="resizer"
60:       class="w-2 cursor-col-resize bg-gray-200 hover:bg-gray-300"
61:       @mousedown="startResize"
62:     ></div>
63:   </div>
64: </template>
65: 
66: <style scoped>
67: /* Add any additional styles here */
68: </style>
```

## File: layers/base/components/Sidebar.vue
```vue
 1: <script setup lang="ts">
 2: const isSideVisible = ref(true)
 3: </script>
 4: 
 5: <template>
 6:   <div class="top-0 space-y-4 p-8 md:sticky">
 7:     <div class="flex flex-col justify-center md:justify-start">
 8:       <div class="flex gap-4">
 9:         <!-- <PrimeToggleButton
10:           v-model="isSideVisible"
11:           on-label="Hide"
12:           off-label="Show"
13:         >
14:           <Icon :name="isSideVisible ? 'mdi:eye' : 'mdi:sun'" />
15:         </PrimeToggleButton> -->
16:         <!-- <Transition name="slide-fade">
17:           <PrimeMessage
18:             v-show="isSideVisible"
19:             severity="info"
20:             :pt="{ root: '', text: 'text-sm text-left' }"
21:           >
22:             Filters Coming Soon
23:           </PrimeMessage>
24:         </Transition> -->
25:       </div>
26:     </div>
27:   </div>
28: </template>
29: 
30: <style scoped>
31: /*
32:   Enter and leave animations can use different
33:   durations and timing functions.
34: */
35: .slide-fade-enter-active {
36:   transition: all 0.3s ease-out;
37: }
38: 
39: .slide-fade-leave-active {
40:   transition: all 0.8s cubic-bezier(1, 0.5, 0.8, 1);
41: }
42: 
43: .slide-fade-enter-from,
44: .slide-fade-leave-to {
45:   transform: translateX(-20px);
46:   opacity: 0;
47: }
48: 
49: .slide-top-enter-active {
50:   transition: all 0.3s ease-out;
51: }
52: 
53: .slide-top-leave-active {
54:   transition: all 0.8s cubic-bezier(1, 0.5, 0.8, 1);
55: }
56: 
57: .slide-top-enter-from,
58: .slide-top-leave-to {
59:   transform: translateY(-20px);
60:   opacity: 0;
61: }
62: </style>
```

## File: layers/base/components/SideNav.vue
```vue
  1: <script setup lang="ts">
  2: const props = defineProps({
  3:   categories: {
  4:     type: Array,
  5:     required: true,
  6:   },
  7:   showDevHelpers: {
  8:     type: Boolean,
  9:     default: false,
 10:   },
 11:   isMobile: {
 12:     type: Boolean,
 13:     default: false,
 14:   },
 15:   isSidebarOpen: {
 16:     type: Boolean,
 17:     required: true,
 18:   },
 19:   isMobileSidebarOpen: {
 20:     type: Boolean,
 21:     required: true,
 22:   },
 23: })
 24: 
 25: const route = useRoute()
 26: const emit = defineEmits(['update:isSidebarOpen', 'update:isMobileSidebarOpen'])
 27: // Handle navigation - close mobile nav when navigating
 28: const handleNavigation = () => {
 29:   if (props.isMobile) {
 30:     emit('update:isMobileSidebarOpen', false)
 31:   }
 32: }
 33: 
 34: // Watch route changes to close mobile nav
 35: watch(
 36:   () => route.path,
 37:   () => {
 38:     if (props.isMobile) {
 39:       emit('update:isMobileSidebarOpen', false)
 40:     }
 41:   },
 42: )
 43: </script>
 44: 
 45: <template>
 46:   <div class="relative z-50">
 47:     <!-- Mobile Overlay -->
 48:     <div
 49:       v-if="isMobile"
 50:       class="fixed inset-0 z-[90] bg-black/50 transition-opacity duration-300"
 51:       :class="
 52:         isMobileSidebarOpen ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'
 53:       "
 54:       @click="$emit('update:isMobileSidebarOpen', false)"
 55:     />
 56:     <div
 57:       class="flex flex-col background text-gray-300 shadow-lg transition-all duration-300 group"
 58:       :class="[
 59:         // Shared styles
 60:         'h-full',
 61: 
 62:         // Mobile styles
 63:         isMobile && [
 64:           'fixed left-0 top-0 bottom-0 z-[100]',
 65:           'w-[70vw]',
 66:           isMobileSidebarOpen ? 'translate-x-0' : '-translate-x-full',
 67:         ],
 68: 
 69:         // Desktop styles
 70:         !isMobile && ['relative', 'md:translate-x-0', isSidebarOpen ? 'md:w-60' : 'md:w-14'],
 71:       ]"
 72:     >
 73:       <!-- Toggle button (desktop only) -->
 74:       <button
 75:         v-if="!isMobile"
 76:         class="absolute !z-[1000] -right-3 top-24 hidden h-6 w-6 -translate-y-1/2 items-center justify-center rounded-full bg-primary-600 text-gray-300 transition-opacity duration-300 hover:bg-primary-400 group-hover:opacity-100 md:flex"
 77:         :class="[
 78:           'z-[110]', // Ensure button is above other elements
 79:           isSidebarOpen ? 'opacity-0' : 'opacity-100',
 80:         ]"
 81:         :title="isSidebarOpen ? 'Collapse sidebar' : 'Expand sidebar'"
 82:         @click="$emit('update:isSidebarOpen', !isSidebarOpen)"
 83:       >
 84:         <Icon
 85:           :name="isSidebarOpen ? 'mdi:chevron-left' : 'mdi:chevron-right'"
 86:           size="12px"
 87:         />
 88:       </button>
 89: 
 90:       <div class="flex h-full flex-col overflow-hidden">
 91:         <!-- Logo -->
 92:         <div
 93:           class="flex items-center px-4 py-3 transition-all duration-300"
 94:           :class="isMobile || isSidebarOpen ? 'gap-3' : 'justify-center'"
 95:         >
 96:           <div
 97:             class="flex items-center justify-center rounded-md border bg-white transition-all duration-300 delay-150"
 98:             :class="isMobile || isSidebarOpen ? 'h-10 w-10' : 'h-6 w-6'"
 99:           >
100:             <NuxtLink
101:               to="/"
102:               class="flex h-full w-full items-center justify-center"
103:             >
104:               <IBImage
105:                 :img="{ src: '/astronera-logo.jpg', width: 36, height: 36 }"
106:                 class="h-full w-full transition-all duration-300"
107:                 :class="isMobile || isSidebarOpen ? 'p-0.5' : 'p-1'"
108:                 no-shrink
109:               />
110:             </NuxtLink>
111:           </div>
112:           <Transition
113:             enter-active-class="transition-all duration-150 ease-out"
114:             leave-active-class="transition-all duration-150 ease-in"
115:             enter-from-class="opacity-0 -translate-x-4"
116:             leave-to-class="opacity-0 -translate-x-4"
117:           >
118:             <div
119:               v-if="isMobile || isSidebarOpen"
120:               class="flex cursor-pointer flex-col items-start justify-center text-sm font-bold uppercase leading-none tracking-normal"
121:             >
122:               Astron
123:               <strong class="font-extrabold text-primary-400">Era</strong>
124:             </div>
125:           </Transition>
126:         </div>
127: 
128:         <!-- Navigation Categories - always expanded on mobile -->
129:         <nav class="flex-1 space-y-4 px-2 py-4">
130:           <div
131:             v-for="category in categories"
132:             :key="category.id"
133:             class="space-y-1"
134:           >
135:             <div
136:               v-if="isMobile || isSidebarOpen"
137:               class="px-2 text-xs font-semibold uppercase text-gray-400"
138:             >
139:               {{ category.label }}
140:             </div>
141:             <ul>
142:               <li
143:                 v-for="item in category.items"
144:                 :key="item.slug"
145:               >
146:                 <NuxtLink
147:                   :to="item.slug"
148:                   class="flex items-center rounded-lg px-2 py-2 text-sm font-medium hover:bg-primary-700"
149:                   :class="{ 'bg-primary-800': route.path === item.slug }"
150:                   @click="handleNavigation"
151:                 >
152:                   <Icon
153:                     :name="item.icon"
154:                     size="20px"
155:                     class="mr-3 flex-shrink-0"
156:                   />
157:                   <span v-if="isMobile || isSidebarOpen">{{ item.label }}</span>
158:                 </NuxtLink>
159:               </li>
160:             </ul>
161:           </div>
162:         </nav>
163:       </div>
164:     </div>
165:   </div>
166: </template>
167: 
168: <style>
169: .transition-transform {
170:   transition-property: transform, width, height;
171: }
172: </style>
```

## File: layers/base/components/SocialBlock.vue
```vue
 1: <script setup lang="ts">
 2: interface Socials {
 3:   [key: string]: string
 4: }
 5: 
 6: const props = defineProps({
 7:   socials: {
 8:     type: Object as PropType<Socials>,
 9:     required: true,
10:   },
11:   size: {
12:     type: String,
13:     default: '24px',
14:   },
15: })
16: 
17: const socialIcon = (platform: string) => {
18:   switch (platform) {
19:     case 'linkedin':
20:       return 'mdi:linkedin'
21:     case 'youtube':
22:       return 'mdi:youtube'
23:     case 'instagram':
24:       return 'mdi:instagram'
25:     case 'facebook':
26:       return 'mdi:facebook'
27:     case 'twitter':
28:       return 'mdi:twitter'
29:     default:
30:       return ''
31:   }
32: }
33: 
34: const formattedSocials = computed(() => {
35:   if (!props.socials) return []
36:   return Object.entries(props.socials).map(([platform, url]) => {
37:     return {
38:       platform: platform.split('_')[0],
39:       url,
40:       icon: socialIcon(platform.split('_')[0]),
41:     }
42:   })
43: })
44: </script>
45: 
46: <template>
47:   <div
48:     v-if="formattedSocials.length > 0"
49:     class="flex gap-2"
50:   >
51:     <a
52:       v-for="social in formattedSocials"
53:       :key="`${social.platform}-icon`"
54:       class="flex cursor-pointer items-center"
55:       target="_blank"
56:       :href="social.url"
57:     >
58:       <Icon
59:         :name="social.icon"
60:         :size="size"
61:       />
62:     </a>
63:   </div>
64: </template>
65: 
66: <style scoped></style>
```

## File: layers/base/components/TabView.vue
```vue
 1: <script setup lang="ts">
 2: interface Tab {
 3:   title: string
 4:   slotName: string
 5:   value: string
 6: }
 7: 
 8: defineProps<{
 9:   tabs: Tab[]
10: }>()
11: </script>
12: 
13: <template>
14:   <PrimeTabs
15:     value="0"
16:     class="h-full"
17:     scrollable
18:     :pt="{
19:       root: 'w-full h-full',
20:     }"
21:     :pt-options="{ mergeSections: true }"
22:   >
23:     <PrimeTabList
24:       :pt="{
25:         root: 'gap-4 sticky top-0 left-0 z-50 flex text-nowrap flex-grow w-full overflow-scroll bg-black no-scrollbar border-b border-color',
26:       }"
27:       :pt-options="{ mergeSections: true, mergeProps: true }"
28:     >
29:       <PrimeTab
30:         v-for="tab in tabs"
31:         :key="tab.title"
32:         :value="tab.value"
33:         :pt="{
34:           root: ({ context }) => ({
35:             class: [
36:               'text-nowrap px-6 py-4 border-x border-color h-full',
37:               { 'bg-primary-900': context.active },
38:             ],
39:           }),
40:         }"
41:         :pt-options="{ mergeSections: true, mergeProps: true }"
42:       >
43:         {{ tab.title }}
44:       </PrimeTab>
45:     </PrimeTabList>
46:     <PrimeTabPanel
47:       v-for="tab in tabs"
48:       :key="`tab-index-${tab.title}`"
49:       :value="tab.value"
50:       :pt="{
51:         root: 'overflow-scroll h-full',
52:       }"
53:       :pt-options="{ mergeProps: true, mergeSections: true }"
54:     >
55:       <slot :name="tab.slotName" />
56:     </PrimeTabPanel>
57:   </PrimeTabs>
58: </template>
59: 
60: <style></style>
```

## File: layers/base/components/YT.client.vue
```vue
 1: <template>
 2:   <div id="player"></div>
 3: </template>
 4: 
 5: <script setup lang="ts">
 6: const player = ref(null)
 7: 
 8: onMounted(() => {
 9:   // Load the YouTube IFrame API dynamically if it's not already loaded
10:   if (!window.YT) {
11:     // Check if YT object is already present
12:     const tag = document.createElement('script')
13:     tag.src = 'https://www.youtube.com/iframe_api'
14:     const firstScriptTag = document.getElementsByTagName('script')[0]
15:     firstScriptTag.parentNode.insertBefore(tag, firstScriptTag)
16: 
17:     // Define the callback globally to initialize player when API is ready
18:     window.onYouTubeIframeAPIReady = initializePlayer
19:   } else {
20:     // Initialize the player immediately if YT is already loaded
21:     initializePlayer()
22:   }
23: })
24: 
25: function initializePlayer() {
26:   // Make sure the YT object and YT.Player are defined
27:   if (typeof YT !== 'undefined' && YT.Player) {
28:     player.value = new YT.Player('player', {
29:       // Ensure the element ID matches your template
30:       height: '390',
31:       width: '640',
32:       listType: 'user_uploads',
33:       list: 'Fireship', // Make sure 'Fireship' is a correct videoId or replace it with a valid one
34:       events: {
35:         onReady: onPlayerReady,
36:       },
37:     })
38:   }
39: }
40: 
41: function onPlayerReady(event) {
42:   event.target.playVideo()
43: }
44: 
45: onBeforeUnmount(() => {
46:   if (player.value) {
47:     player.value.destroy()
48:   }
49: })
50: </script>
```

## File: layers/base/composables/utils/arrays.ts
```typescript
1: export const removeDuplicates = <T>(arr: T[]): T[] => [...new Set(arr)]
2: 
3: export const sortBy = <T, K extends keyof T>(arr: T[], key: K): T[] =>
4:   arr.sort((a, b) => (a[key] > b[key] ? 1 : a[key] < b[key] ? -1 : 0))
```

## File: layers/base/composables/utils/hasValueChanged.ts
```typescript
 1: export function deepEqual(obj1: any, obj2: any): boolean {
 2:   if (obj1 === obj2) {
 3:     return true
 4:   }
 5: 
 6:   if (typeof obj1 !== 'object' || typeof obj2 !== 'object' || obj1 === null || obj2 === null) {
 7:     return false
 8:   }
 9: 
10:   if (Array.isArray(obj1) && Array.isArray(obj2)) {
11:     if (obj1.length !== obj2.length) {
12:       return false
13:     }
14:     for (let i = 0; i < obj1.length; i++) {
15:       if (!deepEqual(obj1[i], obj2[i])) {
16:         return false
17:       }
18:     }
19:     return true
20:   }
21: 
22:   if (Array.isArray(obj1) || Array.isArray(obj2)) {
23:     return false // One is an array, the other is not
24:   }
25: 
26:   const keys1 = Object.keys(obj1)
27:   const keys2 = Object.keys(obj2)
28: 
29:   if (keys1.length !== keys2.length) {
30:     return false
31:   }
32: 
33:   for (const key of keys1) {
34:     if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {
35:       return false
36:     }
37:   }
38: 
39:   return true
40: }
41: 
42: export function hasValueChanged(newValue: any, currentValue: any): boolean {
43:   if (
44:     typeof newValue === 'string'
45:     || typeof newValue === 'boolean'
46:     || typeof newValue === 'number'
47:     || newValue === null
48:   ) {
49:     return newValue !== currentValue
50:   }
51: 
52:   if (Array.isArray(newValue) || typeof newValue === 'object') {
53:     return !deepEqual(newValue, currentValue)
54:   }
55: 
56:   return newValue !== currentValue
57: }
58: 
59: interface UpdateData {
60:   [key: string]: any
61: }
62: 
63: interface CleanDataResult {
64:   data: UpdateData
65:   noDataUpdated: boolean
66: }
67: 
68: export function wasRowDataUpdated(newData: UpdateData, previousData: UpdateData): CleanDataResult {
69:   const updatedData: UpdateData = {}
70: 
71:   Object.entries(newData).forEach(([key, value]) => {
72:     if (hasValueChanged(value, previousData[key])) {
73:       updatedData[key] = value
74:     }
75:   })
76: 
77:   return { data: updatedData, noDataUpdated: Object.keys(updatedData).length === 0 }
78: }
```

## File: layers/base/composables/utils/objects.ts
```typescript
1: export const pluck = <T, K extends keyof T>(objs: T[], key: K): T[K][] =>
2:   objs.map((obj) => obj[key])
```

## File: layers/base/composables/utils/strings.ts
```typescript
 1: export const slugify = (str: string): string => {
 2:   str = str.replace(/^\s+|\s+$/g, '')
 3:   str = str.toLowerCase()
 4: 
 5:   const from
 6:     = 'ÁÄÂÀÃÅČÇĆĎÉĚËÈÊẼĔȆÍÌÎÏŇÑÓÖÒÔÕØŘŔŠŤÚŮÜÙÛÝŸŽáäâàãåčçćďéěëèêẽĕȇíìîïňñóöòôõøðřŕšťúůüùûýÿžþÞĐđßÆa·/_,:;'
 7:   const to
 8:     = 'AAAAAACCCDEEEEEEEEIIIINNOOOOOORRSTUUUUUYYZaaaaaacccdeeeeeeeeiiiinnooooooorrstuuuuuyyzbBDdBAa------'
 9:   for (let i = 0, l = from.length; i < l; i++) {
10:     str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i))
11:   }
12: 
13:   str = str
14:     .replace(/[^a-z0-9 -]/g, '')
15:     .replace(/\s+/g, '-')
16:     .replace(/-+/g, '-')
17:   return str
18: }
19: 
20: export function upperCaseFirstLetter(str: string): string {
21:   const firstLetter = str.slice(0, 1)
22:   return firstLetter.toUpperCase() + str.substring(1)
23: }
24: 
25: export const stringIsNull = (value: any): boolean =>
26:   value === null || value === undefined || value === '' || value.length === 0
```

## File: layers/base/composables/utils/time.ts
```typescript
 1: export function toDateObject(inputDate = '2022-03-01T10:30:00-05:00') {
 2:   // !todo - add support for internationalization
 3:   // !todo - add support for dynamic length
 4:   const length = 'short'
 5:   // convert date to local time
 6:   const date = new Date(inputDate.toLocaleString())
 7: 
 8:   const formattedDate = new Intl.DateTimeFormat('en-US', {
 9:     weekday: length,
10:     year: 'numeric',
11:     month: length,
12:     day: 'numeric',
13:     hour: 'numeric',
14:     minute: 'numeric',
15:     timeZoneName: length,
16:   }).format(date)
17: 
18:   const dateArray = formattedDate.split(', ')
19: 
20:   return {
21:     weekday: dateArray[0],
22:     month: dateArray[1].split(' ')[0],
23:     day: dateArray[1].split(' ')[1],
24:     time: dateArray[3].split(' ')[0],
25:     ampm: dateArray[3].split(' ')[1],
26:     timezone: dateArray[3].split(' ')[2],
27:     year: dateArray[2],
28:   }
29: }
30: 
31: export function lastSeen(lastSeenTimestamp: string): string {
32:   const now = new Date()
33:   const lastSeen = new Date(lastSeenTimestamp)
34:   const secondsSinceLastSeen = Math.round((now.getTime() - lastSeen.getTime()) / 1000)
35: 
36:   if (secondsSinceLastSeen < 60) {
37:     return `${secondsSinceLastSeen} second${secondsSinceLastSeen === 1 ? '' : 's'} ago`
38:   }
39: 
40:   const minutesSinceLastSeen = Math.round(secondsSinceLastSeen / 60)
41: 
42:   if (minutesSinceLastSeen < 60) {
43:     return `${minutesSinceLastSeen} minute${minutesSinceLastSeen === 1 ? '' : 's'} ago`
44:   }
45: 
46:   const hoursSinceLastSeen = Math.round(minutesSinceLastSeen / 60)
47: 
48:   if (hoursSinceLastSeen < 24) {
49:     return `${hoursSinceLastSeen} hour${hoursSinceLastSeen === 1 ? '' : 's'} ago`
50:   }
51: 
52:   const daysSinceLastSeen = Math.round(hoursSinceLastSeen / 24)
53:   return `${daysSinceLastSeen} day${daysSinceLastSeen === 1 ? '' : 's'} ago`
54: }
```

## File: layers/base/composables/ab-test.ts
```typescript
 1: import type { DefineComponent } from 'vue'
 2: 
 3: export enum TestGoal {
 4:   SignUp = 'sign_up',
 5:   Purchase = 'purchase',
 6:   FeatureUsage = 'feature_usage',
 7:   TimeOnPage = 'time_on_page',
 8:   ClickThroughRate = 'click_through_rate',
 9: }
10: 
11: interface ABTestVariant<T> {
12:   name: string
13:   value: T
14: }
15: 
16: interface ABTestConfig<T> {
17:   experimentName: string
18:   variants: ABTestVariant<T>[]
19:   defaultVariant: ABTestVariant<T>
20:   goals: TestGoal[]
21: }
22: 
23: export function useABTest<T>({ experimentName, variants, defaultVariant, goals }: ABTestConfig<T>) {
24:   const { $posthog } = useNuxtApp()
25: 
26:   const selectedVariant = ref<ABTestVariant<T>>(defaultVariant)
27: 
28:   // Use PostHog's experiment feature to get the variant
29:   const variantName = $posthog.getFeatureFlag(experimentName)
30:   selectedVariant.value = variants.find((v) => v.name === variantName) || defaultVariant
31: 
32:   // Capture experiment exposure
33:   $posthog.capture('$experiment_started', {
34:     experiment: experimentName,
35:     variant: selectedVariant.value.name,
36:     goals: goals,
37:   })
38: 
39:   const value = computed(() => selectedVariant.value.value)
40: 
41:   // Function to track goal completion
42:   const trackGoal = (goal: TestGoal, properties: Record<string, any> = {}) => {
43:     $posthog.capture(goal, {
44:       ...properties,
45:       $experiment_name: experimentName,
46:       $variant: selectedVariant.value.name,
47:     })
48:   }
49: 
50:   return {
51:     variant: selectedVariant,
52:     value,
53:     trackGoal,
54:   }
55: }
56: 
57: // Helper function for component-based A/B tests
58: type ComponentVariant = ABTestVariant<DefineComponent<any, any, any>>
59: 
60: export function useComponentABTest(config: ABTestConfig<DefineComponent<any, any, any>>) {
61:   const { variant, trackGoal } = useABTest(config)
62: 
63:   const TestComponent = computed(() => ({
64:     render() {
65:       return h(variant.value.value.component)
66:     },
67:   }))
68: 
69:   return {
70:     TestComponent,
71:     trackGoal,
72:   }
73: }
```

## File: layers/base/composables/analytics.ts
```typescript
  1: import { ref, onMounted, onUnmounted } from 'vue'
  2: import { useRoute } from 'vue-router'
  3: 
  4: export enum UserAcquisitionMetric {
  5:   SignUpConversion = 'sign_up_conversion',
  6:   DemoRequest = 'demo_request',
  7:   ContactFormSubmission = 'contact_form_submission',
  8:   FeaturePageEngagement = 'feature_page_engagement',
  9:   BlogTraffic = 'blog_traffic',
 10: }
 11: 
 12: export enum OnboardingMetric {
 13:   StartRate = 'start_rate',
 14:   StepCompletion = 'step_completion',
 15:   DropOff = 'drop_off',
 16:   CompletionTime = 'completion_time',
 17: }
 18: 
 19: export enum UserEngagementMetric {
 20:   SessionDuration = 'session_duration',
 21:   ActionsPerSession = 'actions_per_session',
 22:   VisitFrequency = 'visit_frequency',
 23:   FeatureAdoption = 'feature_adoption',
 24: }
 25: 
 26: export enum ContentPerformanceMetric {
 27:   ArticleView = 'article_view',
 28:   ReadTime = 'read_time',
 29:   Share = 'share',
 30:   Like = 'like',
 31:   Comment = 'comment',
 32: }
 33: 
 34: export enum JobMarketMetric {
 35:   JobListing = 'job_listing',
 36:   JobView = 'job_view',
 37:   JobApplication = 'job_application',
 38:   CompanyProfileCreation = 'company_profile_creation',
 39:   CompanyFollow = 'company_follow',
 40: }
 41: 
 42: export enum TechnicalPerformanceMetric {
 43:   PageLoadTime = 'page_load_time',
 44:   APIResponseTime = 'api_response_time',
 45:   ErrorRate = 'error_rate',
 46:   Uptime = 'uptime',
 47: }
 48: 
 49: export type ContentType = 'blog_post' | 'news_article' | 'company_profile' | 'job_listing'
 50: 
 51: export type ErrorType = 'javascript_error' | 'api_error' | '404_error'
 52: 
 53: export interface AnalyticsEventProperties {
 54:   [key: string]: any
 55: }
 56: 
 57: export function useAnalytics() {
 58:   const { $posthog } = useNuxtApp()
 59:   const route = useRoute()
 60:   const pageEnterTime = ref(Date.now())
 61: 
 62:   const trackEvent = (eventName: string, properties?: AnalyticsEventProperties) => {
 63:     $posthog.capture(eventName, properties)
 64:   }
 65: 
 66:   const trackPageView = (properties?: AnalyticsEventProperties) => {
 67:     const timeSpent = Date.now() - pageEnterTime.value
 68:     $posthog.capture('$pageview', {
 69:       path: route.path,
 70:       title: document.title,
 71:       timeSpent,
 72:       ...properties,
 73:     })
 74:     pageEnterTime.value = Date.now()
 75:   }
 76: 
 77:   const identifyUser = (userId: string, properties?: AnalyticsEventProperties) => {
 78:     $posthog.identify(userId, properties)
 79:   }
 80: 
 81:   const trackError = (errorType: ErrorType, errorDetails: string, componentName?: string) => {
 82:     $posthog.capture('Error Occurred', {
 83:       errorType,
 84:       errorDetails,
 85:       componentName,
 86:     })
 87:   }
 88: 
 89:   const trackUserAcquisition = (
 90:     metric: UserAcquisitionMetric,
 91:     properties?: AnalyticsEventProperties,
 92:   ) => {
 93:     $posthog.capture(`User Acquisition - ${metric}`, properties)
 94:   }
 95: 
 96:   const trackOnboarding = (metric: OnboardingMetric, properties?: AnalyticsEventProperties) => {
 97:     $posthog.capture(`Onboarding - ${metric}`, properties)
 98:   }
 99: 
100:   const trackUserEngagement = (
101:     metric: UserEngagementMetric,
102:     properties?: AnalyticsEventProperties,
103:   ) => {
104:     $posthog.capture(`User Engagement - ${metric}`, properties)
105:   }
106: 
107:   const trackContentPerformance = (
108:     metric: ContentPerformanceMetric,
109:     contentType: ContentType,
110:     properties?: AnalyticsEventProperties,
111:   ) => {
112:     $posthog.capture(`Content Performance - ${contentType} - ${metric}`, properties)
113:   }
114: 
115:   const trackJobMarketActivity = (
116:     metric: JobMarketMetric,
117:     properties?: AnalyticsEventProperties,
118:   ) => {
119:     $posthog.capture(`Job Market - ${metric}`, properties)
120:   }
121: 
122:   const trackTechnicalPerformance = (
123:     metric: TechnicalPerformanceMetric,
124:     value: number,
125:     properties?: AnalyticsEventProperties,
126:   ) => {
127:     $posthog.capture(`Technical Performance - ${metric}`, { value, ...properties })
128:   }
129: 
130:   // Session tracking
131:   onMounted(() => {
132:     trackPageView()
133:     $posthog.capture('Session Started')
134:   })
135: 
136:   onUnmounted(() => {
137:     trackPageView()
138:     $posthog.capture('Session Ended', {
139:       sessionDuration: Date.now() - pageEnterTime.value,
140:     })
141:   })
142: 
143:   return {
144:     trackEvent,
145:     trackPageView,
146:     identifyUser,
147:     trackUserAcquisition,
148:     trackOnboarding,
149:     trackUserEngagement,
150:     trackContentPerformance,
151:     trackJobMarketActivity,
152:     trackTechnicalPerformance,
153:     trackError,
154:   }
155: }
156: 
157: // import {
158: //   UserAcquisitionMetric,
159: //   OnboardingMetric,
160: //   UserEngagementMetric,
161: //   ContentPerformanceMetric,
162: //   JobMarketMetric,
163: //   TechnicalPerformanceMetric,
164: //   ContentType,
165: //   ErrorType
166: // } from '~/types/analytics'
167: 
168: // const {
169: //   trackUserAcquisition,
170: //   trackOnboarding,
171: //   trackUserEngagement,
172: //   trackContentPerformance,
173: //   trackJobMarketActivity,
174: //   trackTechnicalPerformance,
175: //   trackError
176: // } = useAnalytics()
177: 
178: // // Track a sign-up conversion
179: // trackUserAcquisition(UserAcquisitionMetric.SignUpConversion, { source: 'organic' })
180: 
181: // // Track an onboarding step completion
182: // trackOnboarding(OnboardingMetric.StepCompletion, { step: 'personal_info', timeSpent: 120 })
183: 
184: // // Track a feature adoption
185: // trackUserEngagement(UserEngagementMetric.FeatureAdoption, { feature: 'job_search' })
186: 
187: // // Track a blog post share
188: // trackContentPerformance(ContentPerformanceMetric.Share, 'blog_post', { postId: '123', platform: 'twitter' })
189: 
190: // // Track a job application
191: // trackJobMarketActivity(JobMarketMetric.JobApplication, { jobId: '456', companyId: '789' })
192: 
193: // // Track page load time
194: // trackTechnicalPerformance(TechnicalPerformanceMetric.PageLoadTime, performance.now())
195: 
196: // // Track an error
197: // trackError(ErrorType.APIError, 'Failed to fetch job listings', 'JobSearchComponent')
```

## File: layers/base/composables/glass-card.ts
```typescript
  1: interface GlassCardProps {
  2:   color: string
  3:   bgOpacity: number
  4:   gradientOpacity: number
  5:   blurIntensity: string
  6:   disableHover: boolean
  7:   padding: string
  8:   loading: boolean
  9:   ariaLabel: string
 10: }
 11: 
 12: const cardStates = reactive<Record<string, any>>({})
 13: 
 14: export function useGlassCard(props: GlassCardProps, uniqueId: string) {
 15:   if (!cardStates[uniqueId]) {
 16:     cardStates[uniqueId] = {
 17:       tiltFactor: 0,
 18:       mouseX: 0,
 19:       mouseY: 0,
 20:       isOutside: true,
 21:       cardWidth: 0,
 22:       cardHeight: 0,
 23:     }
 24:   }
 25: 
 26:   const state = cardStates[uniqueId]
 27: 
 28:   const handleMouseMove = (event: MouseEvent) => {
 29:     const cardElement = document.getElementById(uniqueId)?.querySelector('.glass-card')
 30:     if (!cardElement) return
 31: 
 32:     const cardRect = cardElement.getBoundingClientRect()
 33: 
 34:     state.cardWidth = cardRect.width
 35:     state.cardHeight = cardRect.height
 36: 
 37:     const gravityArea = 100 // pixels around the card
 38:     const x = event.clientX - cardRect.left
 39:     const y = event.clientY - cardRect.top
 40: 
 41:     // Check if the mouse is within the gravity field
 42:     if (
 43:       x >= -gravityArea &&
 44:       x <= cardRect.width + gravityArea &&
 45:       y >= -gravityArea &&
 46:       y <= cardRect.height + gravityArea
 47:     ) {
 48:       state.mouseX = x
 49:       state.mouseY = y
 50:       state.isOutside = false
 51: 
 52:       // Calculate distance from the edge of the card
 53:       const distanceX = Math.max(0, -x, x - cardRect.width)
 54:       const distanceY = Math.max(0, -y, y - cardRect.height)
 55:       const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY)
 56: 
 57:       // Calculate tilt factor
 58:       if (x >= 0 && x <= cardRect.width && y >= 0 && y <= cardRect.height) {
 59:         state.tiltFactor = 1 // Cursor is directly over the card
 60:       } else {
 61:         // Smooth transition in the gravity area
 62:         state.tiltFactor = Math.max(0, 1 - distance / gravityArea)
 63:       }
 64:     } else {
 65:       state.tiltFactor = 0
 66:       state.isOutside = true
 67:     }
 68:   }
 69: 
 70:   const handleMouseLeave = () => {
 71:     state.tiltFactor = 0
 72:     state.isOutside = true
 73:   }
 74: 
 75:   const cardStyle = computed(() => {
 76:     if (state.isOutside) return {}
 77: 
 78:     const maxTilt = 4 // maximum tilt in degrees
 79: 
 80:     // Use cardWidth and cardHeight from state instead of getting them from cardRef
 81:     const centerX = state.cardWidth / 2
 82:     const centerY = state.cardHeight / 2
 83: 
 84:     const tiltY = ((state.mouseX - centerX) / centerX) * maxTilt * state.tiltFactor
 85:     const tiltX = ((centerY - state.mouseY) / centerY) * maxTilt * state.tiltFactor
 86: 
 87:     return {
 88:       transform: `perspective(1000px) rotateX(${tiltX}deg) rotateY(${tiltY}deg)`,
 89:       transition: state.isOutside ? 'transform 0.3s ease-out' : 'none',
 90:     }
 91:   })
 92: 
 93:   const spotlightColor = computed(() => {
 94:     const hue = (state.mouseX / state.cardWidth) * 360
 95:     return `hsl(${hue}, 100%, 70%)`
 96:   })
 97: 
 98:   const spotlightStyle = computed(() => {
 99:     if (state.isOutside) return { opacity: 0 }
100: 
101:     const spotlightSize = 300 // Fixed 300px radius
102:     const opacity = 0.07 + state.tiltFactor * 0.08
103: 
104:     return {
105:       background: `
106:       radial-gradient(circle ${spotlightSize}px at ${state.mouseX}px ${state.mouseY}px, 
107:       ${spotlightColor.value}, 
108:       transparent 70%),
109:       radial-gradient(circle ${spotlightSize * 0.8}px at ${state.mouseX}px ${state.mouseY}px, 
110:       ${spotlightColor.value}, 
111:       transparent 70%)
112:     `,
113:       opacity: opacity,
114:       transition: 'opacity 0.3s ease-out',
115:       mixBlendMode: 'soft-light',
116:     }
117:   })
118: 
119:   const bgClasses = computed(() => [
120:     `bg-${props.color}-950/${props.bgOpacity}`,
121:     `hover:bg-${props.color}-900/${props.bgOpacity + 10}`,
122:   ])
123: 
124:   const borderClasses = computed(() => [
125:     'border',
126:     'border-color',
127:     `hover:border-${props.color}-400/40`,
128:   ])
129: 
130:   const textClasses = computed(() => [`text-${props.color}-100`])
131: 
132:   const gradientClasses = computed(() => [
133:     `from-${props.color}-100/${props.gradientOpacity}`,
134:     `to-${props.color}-500/${props.gradientOpacity}`,
135:   ])
136: 
137:   const hoverClasses = computed(() =>
138:     props.disableHover
139:       ? []
140:       : ['hover:shadow-2xl', `hover:bg-${props.color}-800/${props.bgOpacity + 10}`],
141:   )
142: 
143:   return {
144:     handleMouseMove,
145:     handleMouseLeave,
146:     cardStyle,
147:     spotlightStyle,
148:     bgClasses,
149:     borderClasses,
150:     textClasses,
151:     gradientClasses,
152:     hoverClasses,
153:   }
154: }
```

## File: layers/base/composables/metrics.ts
```typescript
 1: function roundToNDecimalPlaces(value: number, n: number): number {
 2:   return Number(value.toFixed(n))
 3: }
 4: 
 5: function calculateMedian(arr: number[]): number {
 6:   const sorted = arr.slice().sort((a, b) => a - b)
 7:   const mid = Math.floor(sorted.length / 2)
 8:   return sorted.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2
 9: }
10: 
11: function calculateStandardDeviation(valuesArray: number[]): number {
12:   const mean = valuesArray.reduce((a, b) => a + b) / valuesArray.length
13:   return Math.sqrt(
14:     valuesArray.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / valuesArray.length,
15:   )
16: }
17: 
18: function calculateMean(arr: number[]): number {
19:   return arr.reduce((a, b) => a + b) / arr.length
20: }
21: 
22: function calculateVariance(arr: number[]): number {
23:   const mean = calculateMean(arr)
24:   return arr.reduce((sum, value) => sum + Math.pow(value - mean, 2), 0) / arr.length
25: }
26: 
27: function calculateRange(arr: number[]): number {
28:   return Math.max(...arr) - Math.min(...arr)
29: }
30: 
31: function calculateSum(arr: number[]): number {
32:   return arr.reduce((a, b) => a + b, 0)
33: }
34: 
35: function calculateMode(arr: number[]): number | number[] {
36:   const frequency: { [key: number]: number } = {}
37:   let maxFreq = 0
38:   let modes: number[] = []
39: 
40:   arr.forEach((value) => {
41:     frequency[value] = (frequency[value] || 0) + 1
42:     if (frequency[value] > maxFreq) {
43:       maxFreq = frequency[value]
44:       modes = [value]
45:     } else if (frequency[value] === maxFreq) {
46:       modes.push(value)
47:     }
48:   })
49: 
50:   return modes.length === 1 ? modes[0] : modes
51: }
52: 
53: function calculateMin(arr: number[]): number {
54:   return Math.min(...arr)
55: }
56: 
57: function calculateMax(arr: number[]): number {
58:   return Math.max(...arr)
59: }
60: 
61: function calculatePercentile(arr: number[], percentile: number): number {
62:   if (percentile < 0 || percentile > 100) {
63:     throw new Error('Percentile must be between 0 and 100')
64:   }
65:   const sorted = arr.slice().sort((a, b) => a - b)
66:   const index = (percentile / 100) * (sorted.length - 1)
67:   const lower = Math.floor(index)
68:   const upper = lower + 1
69:   const weight = index % 1
70: 
71:   if (upper >= sorted.length) {
72:     return sorted[lower]
73:   }
74: 
75:   return sorted[lower] * (1 - weight) + sorted[upper] * weight
76: }
77: 
78: export function useBaseMetrics() {
79:   return {
80:     format: {
81:       roundToN: roundToNDecimalPlaces,
82:     },
83:     calculate: {
84:       median: calculateMedian,
85:       standardDeviation: calculateStandardDeviation,
86:       mean: calculateMean,
87:       variance: calculateVariance,
88:       range: calculateRange,
89:       sum: calculateSum,
90:       mode: calculateMode,
91:       min: calculateMin,
92:       max: calculateMax,
93:       percentile: calculatePercentile,
94:     },
95:   }
96: }
```

## File: layers/base/composables/modal.ts
```typescript
 1: export function useModal() {
 2:   // was used for news modals at one point
 3:   const currentPost = computed(() => news.value[currentIndex.value])
 4:   const nextPost = computed(() => news.value[nextIndex.value])
 5:   const previousPost = computed(() => news.value[previousIndex.value])
 6:   const isModalOpen = ref(false)
 7:   const currentIndex = ref(0)
 8:   const previousIndex = computed(() => (currentIndex.value > 0 ? currentIndex.value - 1 : 0))
 9:   const nextIndex = computed(() =>
10:     currentIndex.value < news.value.length - 1 ? currentIndex.value + 1 : currentIndex.value,
11:   )
12: 
13:   const toggleModal = (postIndex?: number) => {
14:     isModalOpen.value = !isModalOpen.value
15:     if (postIndex !== undefined) {
16:       currentIndex.value = postIndex
17:     }
18:   }
19: 
20:   const next = () => {
21:     if (currentIndex.value < news.value.length - 1) {
22:       currentIndex.value++
23:     }
24:   }
25: 
26:   const previous = () => {
27:     if (currentIndex.value > 0) {
28:       currentIndex.value--
29:     }
30:   }
31: }
```

## File: layers/base/composables/notification.ts
```typescript
 1: import type { useToast } from 'primevue/usetoast'
 2: 
 3: interface BaseNotification {
 4:   summary: string
 5:   message: string
 6: }
 7: 
 8: export function useNotification() {
 9:   const nuxtApp = useNuxtApp()
10:   const getToast: typeof useToast = () => nuxtApp.vueApp.config.globalProperties.$toast
11:   const toast = getToast()
12: 
13:   const success = ({ summary, message }: BaseNotification) => {
14:     toast.add({
15:       severity: 'success',
16:       summary: `Success: ${summary}`,
17:       detail: message,
18:       life: 5000,
19:       closable: true,
20:     })
21:   }
22: 
23:   const error = ({ summary, message }: BaseNotification) => {
24:     toast.add({
25:       severity: 'error',
26:       summary: `Error: ${summary}`,
27:       detail: message,
28:       life: 0,
29:       closable: true,
30:     })
31:   }
32: 
33:   const info = ({ summary, message }: BaseNotification) => {
34:     toast.add({
35:       severity: 'info',
36:       summary: `Info: ${summary}`,
37:       detail: message,
38:       life: 5000,
39:       closable: true,
40:     })
41:   }
42: 
43:   const warn = ({ summary, message }: BaseNotification) => {
44:     toast.add({
45:       severity: 'warn',
46:       summary: `Warning: ${summary}`,
47:       detail: message,
48:       life: 5000,
49:       closable: true,
50:     })
51:   }
52: 
53:   const feature = ({ summary, message }: BaseNotification) => {
54:     toast.add({
55:       severity: 'warn',
56:       group: 'cta',
57:       summary: summary,
58:       detail: message,
59:       life: 0,
60:       closable: true,
61:     })
62:   }
63: 
64:   return {
65:     success,
66:     error,
67:     info,
68:     warn,
69:     feature,
70:   }
71: }
```

## File: layers/base/composables/settings.store.ts
```typescript
 1: type SettingsKey = 'usersStore' | 'storeNews'
 2: 
 3: export const useSettingsStore = defineStore('settingsStore', () => {
 4:   const settings = ref({} as Settings)
 5:   const summaryLevel = ref('beginner' as SummaryLevel)
 6: 
 7:   function toggleSettings(key: SettingsKey) {
 8:     settings.value[key] = !settings.value[key]
 9:   }
10: 
11:   function isSettingsOn(key: SettingsKey) {
12:     return !settings.value[key]
13:   }
14: 
15:   const changeSummaryLevel = (level: 'beginner' | 'intermediate' | 'expert') => {
16:     summaryLevel.value = level
17:   }
18: 
19:   return {
20:     toggleSettings,
21:     isSettingsOn,
22:   }
23: })
24: 
25: if (import.meta.hot) {
26:   import.meta.hot.accept(acceptHMRUpdate(useSettingsStore, import.meta.hot))
27: }
```

## File: layers/base/composables/social.store.ts
```typescript
  1: import { useLogger } from '@ib/logger'
  2: 
  3: export const useSocialStore = defineStore('settingsStore', () => {
  4:   const errors = useBaseError()
  5:   const logger = useLogger('useSocialStore')
  6:   const { fetch } = useBaseFetch()
  7: 
  8:   const youtube = ref({})
  9:   async function getYoutubeAnalytics(channelName: string) {
 10:     logger.info(`getting youtube analytics for ${channelName}`)
 11:     const response = await fetch('/api/social/youtube/analytics', {
 12:       method: 'GET',
 13:       query: {
 14:         channelName,
 15:       },
 16:     })
 17: 
 18:     const data = errors.server({
 19:       response,
 20:       devOnly: false,
 21:       devMessage: 'error getting youtube analytics',
 22:       userMessage: 'something went wrong when getting youtube analytics',
 23:     })
 24: 
 25:     youtube.value = data
 26:   }
 27: 
 28:   const instagram = ref<any>(null)
 29:   async function getInstagramAnalytics(userId: string) {
 30:     const logger = useLogger('getInstagramAnalytics')
 31:     logger.info(`Fetching Instagram analytics for ${userId}`)
 32:     try {
 33:       const response = await $fetch(`/api/social/instagram/analytics?userId=${userId}`, {
 34:         method: 'GET',
 35:       })
 36: 
 37:       const data = errors.server({
 38:         response,
 39:         devOnly: false,
 40:         devMessage: 'Error getting Instagram analytics',
 41:         userMessage: 'Something went wrong when getting Instagram analytics',
 42:       })
 43: 
 44:       instagram.value = data
 45:     } catch (error) {
 46:       errors.client({
 47:         error,
 48:         devOnly: false,
 49:         devMessage: 'Error getting Instagram analytics',
 50:         userMessage: 'Something went wrong when getting Instagram analytics',
 51:       })
 52:     }
 53:   }
 54: 
 55:   const linkedin = ref<any>(null)
 56:   async function getLinkedInAnalytics(postId: string) {
 57:     const logger = useLogger('getLinkedInAnalytics')
 58:     logger.info(`Fetching LinkedIn analytics for post ${postId}`)
 59:     try {
 60:       const response = await $fetch(`/api/social/linkedin/analytics?postId=${postId}`, {
 61:         method: 'GET',
 62:       })
 63: 
 64:       const data = errors.server({
 65:         response,
 66:         devOnly: false,
 67:         devMessage: 'Error getting LinkedIn analytics',
 68:         userMessage: 'Something went wrong when getting LinkedIn analytics',
 69:       })
 70: 
 71:       linkedin.value = data
 72:     } catch (error) {
 73:       errors.client({
 74:         error,
 75:         devOnly: false,
 76:         devMessage: 'Error getting LinkedIn analytics',
 77:         userMessage: 'Something went wrong when getting LinkedIn analytics',
 78:       })
 79:     }
 80:   }
 81: 
 82:   const twitter = ref<any>(null)
 83:   async function getTwitterAnalytics(postId: string) {
 84:     const logger = useLogger('getTwitterAnalytics')
 85:     logger.info(`Fetching Twitter analytics for post ${postId}`)
 86:     try {
 87:       const response = await fetch(`/api/social/twitter/analytics?postId=${postId}`, {
 88:         method: 'GET',
 89:       })
 90: 
 91:       const data = errors.server({
 92:         response,
 93:         devOnly: false,
 94:         devMessage: 'Error getting Twitter analytics',
 95:         userMessage: 'Something went wrong when getting Twitter analytics',
 96:       })
 97: 
 98:       twitter.value = data
 99:     } catch (error) {
100:       errors.client({
101:         error,
102:         devOnly: false,
103:         devMessage: 'Error getting Twitter analytics',
104:         userMessage: 'Something went wrong when getting Twitter analytics',
105:       })
106:     }
107:   }
108: 
109:   return {
110:     youtube,
111:     getYoutubeAnalytics,
112:     //
113:     instagram,
114:     getInstagramAnalytics,
115:     //
116:     linkedin,
117:     getLinkedInAnalytics,
118:     //
119:     twitter,
120:     getTwitterAnalytics,
121:   }
122: })
123: 
124: if (import.meta.hot) {
125:   import.meta.hot.accept(acceptHMRUpdate(useSocialStore, import.meta.hot))
126: }
```

## File: layers/base/composables/useMediaQuery.ts
```typescript
 1: // composables/useMediaQuery.ts
 2: export const useMediaQuery = (query: string) => {
 3:   const matches = ref(false)
 4: 
 5:   if (import.meta.client) {
 6:     const mediaQuery = window.matchMedia(query)
 7:     matches.value = mediaQuery.matches
 8: 
 9:     const handler = (event: MediaQueryListEvent) => {
10:       matches.value = event.matches
11:     }
12: 
13:     // Watch for changes
14:     mediaQuery.addEventListener('change', handler)
15: 
16:     // Cleanup
17:     onUnmounted(() => {
18:       mediaQuery.removeEventListener('change', handler)
19:     })
20:   }
21: 
22:   return matches
23: }
```

## File: layers/base/composables/useNavigation.ts
```typescript
 1: // composables/useNavigation.ts
 2: export const useNavigation = () => {
 3:   const isSidebarOpen = useState('nav-sidebar-open', () => true)
 4:   const isMobileSidebarOpen = useState('nav-mobile-sidebar-open', () => false)
 5: 
 6:   // Create our own media query composable
 7:   const isMobile = useMediaQuery('(max-width: 768px)')
 8: 
 9:   // Close mobile nav on route changes
10:   const route = useRoute()
11:   
12:   watch(
13:     () => route.path,
14:     () => {
15:       isMobileSidebarOpen.value = false
16:     },
17:   )
18: 
19:   return {
20:     isSidebarOpen,
21:     isMobileSidebarOpen,
22:     isMobile,
23:   }
24: }
```

## File: layers/base/composables/utils.ts
```typescript
 1: import { wasRowDataUpdated } from './utils/hasValueChanged'
 2: import * as time from './utils/time'
 3: import * as strings from './utils/strings'
 4: import * as objects from './utils/objects'
 5: import * as arrays from './utils/arrays'
 6: 
 7: export function useUtils() {
 8:   return {
 9:     wasRowDataUpdated,
10:     time: {
11:       format: time.toDateObject,
12:       lastSeen: time.lastSeen,
13:     },
14:     strings: {
15:       firstUpper: strings.upperCaseFirstLetter,
16:       slugify: strings.slugify,
17:     },
18:     arrays: {
19:       removeDuplicates: arrays.removeDuplicates,
20:       sortBy: arrays.sortBy,
21:     },
22:     objects: {
23:       pluck: objects.pluck,
24:     },
25:   }
26: }
```

## File: layers/base/plugins/error-handler.ts
```typescript
 1: import { useErrorHandler } from '@ib/logger'
 2: 
 3: export default defineNuxtPlugin((nuxtApp) => {
 4:   const { handleError } = useErrorHandler()
 5: 
 6:   // Set up global error handlers
 7:   if (import.meta.client) {
 8:     window.addEventListener('error', (event) => {
 9:       handleError(event.error, 'Uncaught Exception')
10:     })
11: 
12:     window.addEventListener('unhandledrejection', (event) => {
13:       handleError(event.reason, 'Unhandled Promise Rejection')
14:     })
15:   }
16: })
```

## File: layers/base/plugins/posthog.client.ts
```typescript
 1: import posthog from 'posthog-js'
 2: 
 3: export default defineNuxtPlugin((nuxtApp) => {
 4:   const env = nuxtApp.$config.public
 5:   const env2 = useRuntimeConfig().public
 6: 
 7:   console.log('ENV Key:', env, env2)
 8:   console.log('NODE_ENV:', import.meta.env.NODE_ENV)
 9: 
10:   const posthogKey = env.posthogKey || env2.posthogKey
11:   const posthogUrl = env.posthogUrl || env2.posthogUrl
12: 
13:   // Initialize PostHog
14:   posthog.init(posthogKey, {
15:     api_host: posthogUrl,
16:     autocapture: false, // Disable autocapture as we'll handle events manually
17:     capture_pageview: false, // We'll capture pageviews manually for more control
18:     persistence: 'localStorage+cookie',
19:     // bootstrap: {
20:     //   distinctID: runtimeConfig.public.posthogDistinctId // Set this in your runtime config if you have a user ID
21:     // },
22:     loaded: (posthog) => {
23:       // This function is called once PostHog is loaded
24:       if (import.meta.env.NODE_ENV === 'development') {
25:         // Log to console in development mode
26:         posthog.debug()
27:       }
28:     },
29:   })
30: 
31:   // Capture page views
32:   nuxtApp.hook('page:finish', () => {
33:     posthog.capture('$pageview')
34:   })
35: 
36:   // Expose PostHog instance and utility functions
37:   return {
38:     provide: {
39:       posthog: {
40:         // Expose the raw PostHog instance
41:         raw: posthog,
42: 
43:         // Utility function to capture events
44:         capture: (eventName: string, properties?: Record<string, any>) => {
45:           posthog.capture(eventName, properties)
46:         },
47: 
48:         // Utility function for A/B testing
49:         getFeatureFlag: (flagName: string, defaultValue?: any) => {
50:           return posthog.getFeatureFlag(flagName, defaultValue)
51:         },
52: 
53:         // Utility function to identify users
54:         identify: (distinctId: string, properties?: Record<string, any>) => {
55:           posthog.identify(distinctId, properties)
56:         },
57: 
58:         // Utility function to reset user identity
59:         reset: () => {
60:           posthog.reset()
61:         },
62: 
63:         // Utility function to opt in/out of tracking
64:         optIn: () => {
65:           posthog.opt_in_capturing()
66:         },
67:         optOut: () => {
68:           posthog.opt_out_capturing()
69:         },
70: 
71:         // Utility function for registering super properties
72:         register: (properties: Record<string, any>) => {
73:           posthog.register(properties)
74:         },
75: 
76:         // Utility function for registering one-time super properties
77:         registerOnce: (properties: Record<string, any>) => {
78:           posthog.register_once(properties)
79:         },
80:       },
81:     },
82:   }
83: })
```

## File: layers/base/plugins/sentry.client.ts
```typescript
 1: import * as Sentry from '@sentry/vue'
 2: import { defineNuxtPlugin } from '#app'
 3: 
 4: export default defineNuxtPlugin((nuxtApp) => {
 5:   const app = nuxtApp.vueApp
 6:   const router = useRouter()
 7: 
 8:   Sentry.init({
 9:     app,
10:     dsn: 'https://eec364410b024a5a837f60e00d367513@o1175094.ingest.sentry.io/4504389151621120',
11:     integrations: [Sentry.browserTracingIntegration({ router }), Sentry.replayIntegration()],
12:     tracesSampleRate: process.env.NODE_ENV === 'production' ? 0.2 : 1.0,
13:     tracePropagationTargets: ['localhost', /^https:\/\/yourserver\.io\/api/],
14:     replaysSessionSampleRate: 0.1,
15:     replaysOnErrorSampleRate: 1.0,
16:     attachProps: true,
17:     trackComponents: true,
18:   })
19: 
20:   // Sentry.setUser(useSupabaseUser())
21:   Sentry.setTag('environment', process.env.NODE_ENV)
22: })
```

## File: layers/base/types/content.ts
```typescript
 1: import { z } from 'zod'
 2: 
 3: export const titleSchema = z.object({
 4:   centered: z.boolean().optional(),
 5:   label: z.string().optional(),
 6:   main: z.string(),
 7:   subtitle: z.string().optional(),
 8: })
 9: 
10: export const faqSchema = z.object({
11:   label: z.string(),
12:   description: z.string(),
13: })
14: 
15: export const imageSchema = z.object({
16:   src: z.string(),
17:   alt: z.string(),
18:   width: z.number().optional(),
19:   height: z.number().optional(),
20: })
21: 
22: export type ImageType = z.infer<typeof imageSchema>
23: export type TitleType = z.infer<typeof titleSchema>
24: export type FaqType = z.infer<typeof faqSchema>
```

## File: layers/base/types/database.ts
```typescript
 1: import type { Tables } from '../../../supabase/schema.gen'
 2: 
 3: export type RowUser = Tables<'user_profiles'>
 4: export type RowUserFollowers = Tables<'user_followers'>
 5: export type RowRole = Tables<'roles'>
 6: export type RowRegisterInterest = Tables<'register_interest'>
 7: 
 8: export type RowCategory = Tables<'categories'>
 9: export type RowTag = Tables<'tags'>
10: 
11: export type RowNews = Tables<'news'>
12: export type RowNewsTag = Tables<'news_tags'>
13: 
14: export type RowEmbedding = Tables<'embeddings'>
15: 
16: export type RowPaper = Tables<'papers'>
17: 
18: type ArrayToUnion<A> = A extends readonly (infer T)[] ? T : never
19: 
20: const userCardKeys = [
21:   'id',
22:   'given_name',
23:   'surname',
24:   'username',
25:   'avatar',
26:   'followed_count',
27:   'followers_count',
28:   'plan',
29: ] as const
30: 
31: export type UserCard = Pick<RowUser, ArrayToUnion<typeof userCardKeys>>
```

## File: layers/base/types/index.ts
```typescript
1: export * from './users'
2: export * from './other-type-file'
```

## File: layers/base/types/users.ts
```typescript
 1: // don't forget to add to this file if you make any changes in the database
 2: import * as z from 'zod'
 3: 
 4: export const LocationSchema = z.object({
 5:   id: z.number(),
 6:   created_at: z.string().optional(),
 7:   city: z.string(),
 8:   country: z.string(),
 9:   state: z.string(),
10:   address: z.string().nullable(),
11:   latitude: z.number().optional().nullable(),
12:   longitude: z.number().optional().nullable(),
13: })
14: 
15: export const UserRoleSchema = z.object({
16:   id: z.number(),
17:   name: z.string().nullable(),
18:   body: z.string().nullable().optional(),
19:   created_at: z.string().optional(),
20:   icon: z.string(),
21: })
22: 
23: export const IdName = z.object({
24:   id: z.number(),
25:   name: z.string(),
26: })
27: 
28: export const UserSkillSchema = z.object({
29:   id: z.number(),
30:   title: z.string().nullable(),
31:   body: z.string().nullable().optional(),
32:   total_endorsements: z.number(),
33:   admin_rating: z.number().nullable(),
34:   avg_rating: z.number().nullable(),
35:   created_at: z.string().optional(),
36: })
37: 
38: export const UserSocialSchema = z.object({
39:   id: z.number(),
40:   url: z.string(),
41:   platform: z.string(),
42:   username: z.string(),
43: })
44: 
45: export const UserBasicSchema = z.object({
46:   id: z.string(),
47:   given_name: z.string(),
48:   surname: z.string().nullable(),
49:   username: z.string().nullable(),
50:   avatar: z.string().nullable(),
51:   introduction: z.string().nullable(),
52:   followers_count: z.number().nullable(),
53:   followed_count: z.number().nullable(),
54:   is_following: z.boolean().nullable(),
55:   role: z.number(),
56: })
57: 
58: export const UserFullSchema = UserBasicSchema.extend({
59:   email: z.string(),
60:   dob: z.string().nullable(),
61:   gender_id: z.number().nullable(),
62:   created_at: z.string(),
63:   updated_at: z.string().nullable(),
64:   quote: z.string().nullable(),
65: })
66: 
67: export const UserRowSchema = z.object({
68:   given_name: z.string(),
69:   email: z.string(),
70:   surname: z.string().nullable(),
71:   username: z.string().nullable(),
72:   avatar: z.string().nullable(),
73:   introduction: z.string().nullable(),
74:   plan: z.string().nullish(),
75:   dob: z.string().nullable(),
76:   quote: z.string().nullable(),
77:   gender_id: z.number().nullable(),
78: })
79: 
80: export const UserRolesSchema = z.array(UserRoleSchema)
81: 
82: export type UserType = z.infer<typeof UserBasicSchema>
83: export type UserFullType = z.infer<typeof UserFullSchema>
84: export type UserRoleType = z.infer<typeof UserRoleSchema>
85: export type UserRowType = z.infer<typeof UserRowSchema>
86: export type UserSocialType = z.infer<typeof UserSocialSchema>
```

## File: layers/base/nuxt.config.ts
```typescript
 1: import { defineNuxtConfig } from 'nuxt/config'
 2: 
 3: export default defineNuxtConfig({
 4:   workspaceDir: '../../',
 5:   srcDir: '.',
 6: 
 7:   icon: {
 8:     serverBundle: {
 9:       collections: ['material-symbols', 'mdi'],
10:     },
11:   },
12: 
13:   eslint: {
14:     checker: true,
15:   },
16: 
17:   image: {
18:     providers: {
19:       supabase: {
20:         provider: '../../layers/base/supabase-provider.ts',
21:         options: {
22:           baseURL: process.env.NUXT_PUBLIC_SUPABASE_URL,
23:         },
24:       },
25:     },
26:     presets: {
27:       original: {
28:         modifiers: {
29:           width: 1920,
30:           height: 1080,
31:         },
32:       },
33:       mobile: {
34:         modifiers: {
35:           width: 768,
36:           height: 1024,
37:         },
38:       },
39:       thumbnail: {
40:         modifiers: {
41:           width: 300,
42:           height: 200,
43:         },
44:       },
45:     },
46:   },
47: 
48:   components: [
49:     {
50:       path: './components',
51:       pathPrefix: false,
52:       prefix: 'IB',
53:       global: true,
54:     },
55:   ],
56: })
```

## File: layers/base/supabase-provider.ts
```typescript
 1: export function getImage(
 2:   src,
 3:   {
 4:     modifiers = { width: null, height: null, format: null },
 5:     baseURL = process.env.NUXT_PUBLIC_SUPABASE_URL,
 6:   } = {},
 7: ) {
 8:   const { width, height, format } = modifiers
 9:   const [_, bucket, sizeName, imageFileName] = src.split('/')
10: 
11:   // Determine target size
12:   let targetSizeName = sizeName
13:   if (width && height) {
14:     if (width <= 300 && height <= 200) {
15:       targetSizeName = 'thumbnail'
16:     } else if (width <= 768 && height <= 1024) {
17:       targetSizeName = 'mobile'
18:     } else {
19:       targetSizeName = 'original'
20:     }
21:   }
22: 
23:   const imageNameWithoutExt = imageFileName.split('.')[0]
24:   const imageFormat = format || imageFileName.split('.')[1] || 'jpg'
25: 
26:   return {
27:     url: `${baseURL}/storage/v1/object/public/${bucket}/${targetSizeName}/${imageNameWithoutExt}.${imageFormat}`,
28:   }
29: }
```

## File: layers/crud/.playground/app.config.ts
```typescript
1: export default defineAppConfig({
2:   myLayer: {
3:     name: 'My amazing Nuxt layer (overwritten)'
4:   }
5: })
```

## File: layers/crud/.playground/nuxt.config.ts
```typescript
1: export default defineNuxtConfig({
2:   extends: ['..'],
3:   modules: ['@nuxt/eslint']
4: })
```

## File: layers/crud/components/Feedback.vue
```vue
  1: <script setup lang="ts">
  2: import { z } from 'zod'
  3: 
  4: const feedbackStore = useFeedbackStore()
  5: 
  6: defineProps({
  7:   cta: {
  8:     type: String,
  9:     required: true,
 10:     default: 'How could we improve?',
 11:   },
 12: })
 13: 
 14: interface FeedbackType {
 15:   name: string
 16:   value: string
 17: }
 18: 
 19: const feedbackTypes = [
 20:   { name: 'Bug Report', value: 'bug_report' },
 21:   { name: 'Feature Request', value: 'feature_request' },
 22:   { name: 'User Interface Issue', value: 'user_interface_issue' },
 23:   { name: 'Performance Issue', value: 'performance_issue' },
 24:   { name: 'Documentation', value: 'documentation' },
 25: ]
 26: 
 27: const route = useRoute()
 28: const { userId } = useCurrentUser()
 29: 
 30: const initialFeedback = () => ({
 31:   user_id: userId,
 32:   page_identifier: route.fullPath,
 33:   feedback_type: null,
 34:   message: '',
 35:   device_info: '',
 36:   content_status: 'new',
 37: })
 38: 
 39: const feedback = ref(initialFeedback())
 40: 
 41: const messagePlaceholder = computed(() => {
 42:   if (!feedback.value.feedback_type) {
 43:     return 'Please select a feedback type first'
 44:   }
 45: 
 46:   const type = feedback.value.feedback_type
 47:   if (!type) return ''
 48: 
 49:   switch (type.value) {
 50:     case 'bug_report':
 51:       return 'Describe the bug in detail...'
 52:     case 'feature_request':
 53:       return 'Describe the feature you would like to see...'
 54:     case 'user_interface_issue':
 55:       return 'What UI issue did you encounter?'
 56:     case 'performance_issue':
 57:       return 'Describe the performance issue...'
 58:     case 'documentation':
 59:       return 'What documentation issue did you find?'
 60:     default:
 61:       return 'Enter your message'
 62:   }
 63: })
 64: 
 65: const isMessageDisabled = computed(() => !feedback.value.feedback_type)
 66: 
 67: const messageLength = z.string().min(10)
 68: 
 69: const isMessageInvalid = computed(() => !messageLength.safeParse(feedback.value.message).success)
 70: 
 71: const resetFeedback = () => {
 72:   feedback.value = initialFeedback()
 73: }
 74: 
 75: const submitFeedback = async () => {
 76:   await feedbackStore.submitFeedback(feedback.value)
 77:   resetFeedback()
 78: }
 79: </script>
 80: 
 81: <template>
 82:   <div class="w-52">
 83:     <h2 class="text-lg mb-4 text-left font-bold">
 84:       {{ cta }}
 85:     </h2>
 86:     <form
 87:       class="w-52 space-y-4"
 88:       @submit.prevent="submitFeedback"
 89:     >
 90:       <PrimeSelect
 91:         v-model="feedback.feedback_type"
 92:         :pt="{ root: 'flex text-left pl-1' }"
 93:         :pt-options="{ mergeProps: true, mergeSections: true }"
 94:         :options="feedbackTypes"
 95:         option-label="name"
 96:         placeholder="Feedback Type"
 97:       />
 98:       <PrimeTextarea
 99:         v-show="feedback.feedback_type"
100:         v-model="feedback.message"
101:         class="w-full"
102:         :rows="5"
103:         :placeholder="messagePlaceholder"
104:         :disabled="isMessageDisabled"
105:         :invalid="isMessageInvalid"
106:       />
107:       <div>
108:         <PrimeButton
109:           v-show="feedback.feedback_type"
110:           class="flex w-full justify-between"
111:           :disabled="isMessageInvalid"
112:           :outlined="isMessageInvalid"
113:           @click="submitFeedback"
114:         >
115:           Submit Feedback
116:           <Icon name="mdi:send" />
117:         </PrimeButton>
118:       </div>
119:     </form>
120:   </div>
121: </template>
122: 
123: <style scoped></style>
```

## File: layers/crud/components/Upload.vue
```vue
 1: <script setup lang="ts">
 2: // const toast = useNotification()
 3: 
 4: const props = defineProps({
 5:   name: {
 6:     type: String,
 7:     required: true,
 8:   },
 9:   url: {
10:     type: String,
11:     required: true,
12:   },
13:   multiple: {
14:     type: Boolean,
15:     default: false,
16:   },
17:   accept: {
18:     type: String,
19:     default: '',
20:   },
21:   maxFileSize: {
22:     type: Number,
23:     default: 1000000,
24:   },
25: })
26: 
27: const onAdvancedUpload = () => {
28:   toast.success({ summary: 'File Uploaded', message: `${props.name} files uploaded` })
29: }
30: </script>
31: 
32: <template>
33:   <PrimeCard>
34:     <template #content>
35:       <PrimeFileUpload
36:         :name="name"
37:         :multiple="multiple"
38:         :accept="accept"
39:         :url="url"
40:         :max-file-size="maxFileSize"
41:         @upload="onAdvancedUpload()"
42:       >
43:         <template #empty>
44:           <p>Drag and drop files to here to upload.</p>
45:         </template>
46:       </PrimeFileUpload>
47:     </template>
48:   </PrimeCard>
49: </template>
```

## File: layers/crud/composables/audit.ts
```typescript
  1: export enum AuditLogLevel {
  2:   INFO = 'INFO',
  3:   WARNING = 'WARNING',
  4:   ERROR = 'ERROR',
  5:   CRITICAL = 'CRITICAL',
  6: }
  7: 
  8: export interface AuditLogEntry {
  9:   userId: string
 10:   action: string
 11:   details: any
 12:   level: AuditLogLevel
 13:   timestamp: string
 14:   ipAddress?: string
 15:   userAgent?: string
 16:   resourceId?: string
 17:   resourceType?: string
 18: }
 19: 
 20: interface AuditLogOptions {
 21:   level?: AuditLogLevel
 22:   resourceId?: string
 23:   resourceType?: string
 24:   skipDB?: boolean
 25: }
 26: 
 27: export function useAuditLog() {
 28:   const supabase = useSupabaseClient()
 29:   const user = useSupabaseUser()
 30:   const config = useRuntimeConfig()
 31: 
 32:   const logEvent = async (action: string, details: any, options: AuditLogOptions = {}) => {
 33:     const userId = user.value?.id || 'anonymous'
 34:     const timestamp = new Date().toISOString()
 35:     const level = options.level || AuditLogLevel.INFO
 36: 
 37:     const logEntry: AuditLogEntry = {
 38:       userId,
 39:       action,
 40:       details,
 41:       level,
 42:       timestamp,
 43:       ipAddress: useRequestHeaders(['x-forwarded-for'])['x-forwarded-for'] || '',
 44:       userAgent: useRequestHeaders(['user-agent'])['user-agent'] || '',
 45:       resourceId: options.resourceId,
 46:       resourceType: options.resourceType,
 47:     }
 48: 
 49:     // Remove any sensitive information from the log entry
 50:     sanitizeLogEntry(logEntry)
 51: 
 52:     // Log to console in development
 53:     if (import.meta.dev) {
 54:       console.log('Audit Log:', logEntry)
 55:     }
 56: 
 57:     if (!options.skipDB) {
 58:       try {
 59:         const { error } = await supabase.from('audit_logs').insert(logEntry)
 60: 
 61:         if (error) {
 62:           console.error('Error logging audit event to database:', error)
 63:         }
 64:       } catch (error) {
 65:         console.error('Error logging audit event to database:', error)
 66:       }
 67:     }
 68: 
 69:     // If configured, send logs to an external service
 70:     if (config.public.EXTERNAL_LOGGING_SERVICE) {
 71:       try {
 72:         await $fetch(config.public.EXTERNAL_LOGGING_SERVICE, {
 73:           method: 'POST',
 74:           body: JSON.stringify(logEntry),
 75:         })
 76:       } catch (error) {
 77:         console.error('Error sending log to external service:', error)
 78:       }
 79:     }
 80:   }
 81: 
 82:   const sanitizeLogEntry = (logEntry: AuditLogEntry) => {
 83:     // Remove sensitive information like passwords, tokens, etc.
 84:     if (logEntry.details && typeof logEntry.details === 'object') {
 85:       const sensitiveFields = ['password', 'token', 'secret', 'credit_card']
 86:       for (const field of sensitiveFields) {
 87:         if (field in logEntry.details) {
 88:           logEntry.details[field] = '[REDACTED]'
 89:         }
 90:       }
 91:     }
 92:   }
 93: 
 94:   const getAuditLogs = async (
 95:     filters: Partial<AuditLogEntry>,
 96:     pagination: { page: number, pageSize: number },
 97:   ) => {
 98:     let query = supabase.from('audit_logs').select('*')
 99: 
100:     // Apply filters
101:     Object.entries(filters).forEach(([key, value]) => {
102:       if (value !== undefined) {
103:         query = query.eq(key, value)
104:       }
105:     })
106: 
107:     // Apply pagination
108:     const { data, error, count } = await query
109:       .range(pagination.page * pagination.pageSize, (pagination.page + 1) * pagination.pageSize - 1)
110:       .order('timestamp', { ascending: false })
111: 
112:     if (error) {
113:       console.error('Error fetching audit logs:', error)
114:       throw error
115:     }
116: 
117:     return { logs: data, totalCount: count }
118:   }
119: 
120:   return {
121:     logEvent,
122:     getAuditLogs,
123:     AuditLogLevel,
124:   }
125: }
```

## File: layers/crud/composables/delete.ts
```typescript
 1: import { useErrorHandler, AppError, ErrorSeverity, ErrorType, useLogger } from '@ib/logger'
 2: import { useRateLimit } from './rate-limit'
 3: import { useHttpHandler } from './http-handler'
 4: import { getOrCreateStore } from './main.store'
 5: 
 6: export function useDeleteData<T extends { id: string | number }>(
 7:   tableName: string,
 8:   options: {
 9:     validateDelete?: (id: string | number) => boolean | Promise<boolean>
10:     refreshRelated?: () => Promise<void>
11:     rateLimitMs?: number
12:     auditLog?: (action: string, details: any) => Promise<void>
13:   } = {},
14: ) {
15:   const { remove } = useHttpHandler()
16:   const { handleError } = useErrorHandler()
17:   const logger = useLogger('useDeleteData')
18:   const store = getOrCreateStore<T>(tableName)()
19:   const { checkRateLimit } = useRateLimit()
20:   const isDeleting: Ref<boolean> = ref(false)
21:   let lastDeleteTime = 0
22: 
23:   const deleteData = async (id: string | number | (string | number)[]) => {
24:     isDeleting.value = true
25:     const startTime = Date.now()
26: 
27:     const deleteSingle = async (itemId: string | number): Promise<void> => {
28:       try {
29:         // Rate limiting
30:         if (options.rateLimitMs) {
31:           await checkRateLimit('useDeleteData', { limitMs: options.rateLimitMs })
32:         }
33: 
34:         // Validation
35:         if (options.validateDelete && !(await options.validateDelete(itemId))) {
36:           throw new AppError({
37:             type: ErrorType.VALIDATION_ERROR,
38:             message: 'Delete validation failed',
39:             severity: ErrorSeverity.MEDIUM,
40:             context: 'Data Validation',
41:           })
42:         }
43: 
44:         // Optimistic delete
45:         store.removeItem(itemId)
46: 
47:         // Perform the delete
48:         await remove(tableName, itemId)
49: 
50:         // Refresh related data if needed
51:         if (options.refreshRelated) {
52:           await options.refreshRelated()
53:         }
54: 
55:         // Audit logging
56:         if (options.auditLog) {
57:           await options.auditLog('DELETE', { tableName, id: itemId })
58:         }
59: 
60:         lastDeleteTime = Date.now()
61:       } catch (error: any) {
62:         // Revert optimistic delete
63:         const oldItem = store.getItemById(itemId)
64:         if (oldItem) {
65:           store.addItems([oldItem])
66:         }
67:         throw error
68:       }
69:     }
70: 
71:     try {
72:       if (Array.isArray(id)) {
73:         await Promise.all(id.map(deleteSingle))
74:       } else {
75:         await deleteSingle(id)
76:       }
77:     } catch (error: any) {
78:       handleError(error, 'Error deleting data')
79:       throw error
80:     } finally {
81:       isDeleting.value = false
82:     }
83:   }
84: 
85:   return {
86:     deleteData,
87:     isDeleting,
88:   }
89: }
```

## File: layers/crud/composables/fetch.ts
```typescript
  1: import { useLogger } from '@ib/logger'
  2: import type { FilterBy, DBTable } from '../server/utils/base.interface'
  3: import type { DomainKey } from './pagination.store'
  4: import { useCookie, useRequestHeaders } from '#imports'
  5: import type { FetchResult } from '#app'
  6: 
  7: export interface FetchInput {
  8:   domainKey: DomainKey
  9:   endpoint: string
 10:   pagination?: {
 11:     page: number
 12:     limit: number
 13:   }
 14:   criteria: {
 15:     dto: string
 16:     filterBy?: FilterBy<DBTable>
 17:   }
 18: }
 19: 
 20: function getDataStructure(obj: any): any {
 21:   if (Array.isArray(obj)) {
 22:     return obj.length > 0 ? [getDataStructure(obj[0])] : []
 23:   } else if (typeof obj === 'object' && obj !== null) {
 24:     const structure: Record<string, any> = {}
 25:     for (const key in obj) {
 26:       structure[key] = getDataStructure(obj[key])
 27:     }
 28:     return structure
 29:   } else {
 30:     return typeof obj
 31:   }
 32: }
 33: 
 34: export function useBaseFetch() {
 35:   const errors = useBaseError()
 36:   const paginationStore = usePaginationStore()
 37:   const loading = useLoadingStore()
 38:   const logger = useLogger('useBaseFetch')
 39:   const apiDataStore = useApiDataStore()
 40: 
 41:   const fetch = $fetch.create({
 42:     retryStatusCodes: [408, 409, 425, 500, 502, 503, 504],
 43:     headers: {
 44:       'X-USER-ID': useCookie('userId').value ?? 'no-user-id',
 45:       'cookie': useRequestHeaders(['cookie']).cookie ?? '',
 46:     },
 47:     onResponseError({ error, response, request, options }) {
 48:       console.error('onResponseError', response, response._data, error)
 49:     },
 50:     async onResponse({ request, response, options }) {
 51:       const url = request.toString()
 52:       const structure = getDataStructure(response._data)
 53:       console.log('Captured data structure for:', url, structure)
 54:       apiDataStore.setData(url, structure)
 55:     },
 56:   })
 57: 
 58:   async function fetchPaginatedData(params: FetchInput) {
 59:     const { domainKey, endpoint, criteria } = params
 60: 
 61:     if (loading.isLoading(domainKey)) {
 62:       return null
 63:     }
 64: 
 65:     if (paginationStore.isDataFinished(domainKey)) {
 66:       return null
 67:     }
 68: 
 69:     if (!paginationStore.getPagination(domainKey)) {
 70:       return null
 71:     }
 72: 
 73:     loading.setLoading(domainKey, true)
 74: 
 75:     try {
 76:       logger.info('fetchPaginatedData for', domainKey, endpoint, criteria)
 77:       const response = await fetch(endpoint, {
 78:         method: 'POST',
 79:         params: {
 80:           ...criteria,
 81:           pagination: paginationStore.getPaginationRange(domainKey),
 82:         },
 83:       })
 84: 
 85:       console.log('fetchPaginatedData RESPONSE', response)
 86: 
 87:       const data = errors.server({
 88:         response,
 89:         devOnly: false,
 90:         userMessage: `Sorry there was an error getting ${domainKey} from ${endpoint}`,
 91:         devMessage: `fetchPaginatedData errored selecting paginated ${domainKey} data from ${endpoint}`,
 92:       })
 93: 
 94:       if (!data || !data.length || data.length < paginationStore.getPagination(domainKey)!.limit) {
 95:         paginationStore.setDataFinished(domainKey)
 96:       }
 97: 
 98:       await loading.setLoadingInterval(domainKey, false, 1500)
 99:       paginationStore.incrementPagination(domainKey)
100: 
101:       return data
102:     } catch (error) {
103:       errors.client({
104:         error,
105:         devOnly: false,
106:         userMessage: `Sorry there was an error getting ${domainKey} from ${endpoint}`,
107:         devMessage: `fetchPaginatedData error for ${domainKey}`,
108:       })
109:     }
110:   }
111: 
112:   return {
113:     fetchPaginatedData,
114:     fetch,
115:   }
116: }
```

## File: layers/crud/composables/http-handler.ts
```typescript
  1: import type { PostgrestResponse, PostgrestError } from '@supabase/supabase-js'
  2: import {
  3:   useErrorHandler,
  4:   ErrorType,
  5:   useLogger,
  6:   ErrorSeverity,
  7:   AppError,
  8:   mapErrorSeverity,
  9:   mapErrorType,
 10:   retryableStatusCodes,
 11: } from '@ib/logger'
 12: import { getOrCreateStore } from './main.store'
 13: import { usePaginationStore, type PaginationType } from './pagination.store'
 14: 
 15: type FilterOperator =
 16:   | 'eq'
 17:   | 'neq'
 18:   | 'gt'
 19:   | 'gte'
 20:   | 'lt'
 21:   | 'lte'
 22:   | 'like'
 23:   | 'ilike'
 24:   | 'is'
 25:   | 'in'
 26:   | 'contains'
 27:   | 'containedBy'
 28:   | 'overlaps'
 29:   | 'textSearch'
 30:   | 'match'
 31:   | 'not'
 32:   | 'or'
 33:   | 'and'
 34:   | 'rangeGt'
 35:   | 'rangeGte'
 36:   | 'rangeLt'
 37:   | 'rangeLte'
 38:   | 'rangeAdjacent'
 39: 
 40: type FilterOptionValue = string | number | boolean | null | any[] | Record<string, unknown>
 41: 
 42: type FilterOption = {
 43:   [K in FilterOperator]?: K extends 'not'
 44:     ? FilterOption
 45:     : K extends 'or' | 'and'
 46:       ? string
 47:       : FilterOptionValue
 48: }
 49: 
 50: type Filters = Record<string, FilterOption>
 51: 
 52: interface SelectOptions<T> {
 53:   columns?: keyof T | Array<keyof T> | string
 54:   filters?: Filters
 55:   range?: { from: number; to: number }
 56:   order?: { column: keyof T; ascending: boolean }
 57: }
 58: 
 59: function applyFilter(query: any, column: string, filter: FilterOption): any {
 60:   const [operator, value] = Object.entries(filter)[0]
 61:   switch (operator) {
 62:     case 'eq':
 63:       return query.eq(column, value)
 64:     case 'neq':
 65:       return query.neq(column, value)
 66:     case 'gt':
 67:       return query.gt(column, value)
 68:     case 'gte':
 69:       return query.gte(column, value)
 70:     case 'lt':
 71:       return query.lt(column, value)
 72:     case 'lte':
 73:       return query.lte(column, value)
 74:     case 'like':
 75:       return query.like(column, value)
 76:     case 'ilike':
 77:       return query.ilike(column, value)
 78:     case 'is':
 79:       return query.is(column, value)
 80:     case 'in':
 81:       return query.in(column, value as any[])
 82:     case 'contains':
 83:       return query.contains(column, value)
 84:     case 'containedBy':
 85:       return query.containedBy(column, value)
 86:     case 'rangeGt':
 87:       return query.rangeGt(column, value)
 88:     case 'rangeGte':
 89:       return query.rangeGte(column, value)
 90:     case 'rangeLt':
 91:       return query.rangeLt(column, value)
 92:     case 'rangeLte':
 93:       return query.rangeLte(column, value)
 94:     case 'rangeAdjacent':
 95:       return query.rangeAdjacent(column, value)
 96:     case 'overlaps':
 97:       return query.overlaps(column, value)
 98:     case 'textSearch':
 99:       return query.textSearch(column, value as string, { config: 'english' })
100:     case 'match':
101:       return query.match(column, value as Record<string, unknown>)
102:     case 'not':
103:       return applyFilter(query.not(), column, value as FilterOption)
104:     case 'or':
105:       return query.or(value as string)
106:     case 'and':
107:       return query.and(value as string)
108:     default:
109:       console.warn(`Unsupported filter operator: ${operator}`)
110:       return query
111:   }
112: }
113: 
114: export function useHttpHandler() {
115:   const supabase = useSupabaseClient()
116:   const { handleError } = useErrorHandler()
117:   const logger = useLogger('HttpHandler')
118: 
119:   async function handleDatabaseOperation<T>(
120:     operation: () => Promise<PostgrestResponse<T>>,
121:     context: string,
122:     maxRetries: number = 3,
123:   ): Promise<T> {
124:     let retries = 0
125:     while (retries < maxRetries) {
126:       try {
127:         const response = await operation()
128:         // logger.debug(`${context} response:`, response)
129: 
130:         if (response.error) {
131:           throw response.error
132:         }
133:         return response.data as T
134:       } catch (error: unknown) {
135:         retries++
136:         logger.warn(`${context} failed. Attempt ${retries} of ${maxRetries}`)
137: 
138:         const pgError = error as PostgrestError
139:         const errorType = mapErrorType(pgError)
140:         const errorSeverity = mapErrorSeverity(pgError)
141: 
142:         if (
143:           retries >= maxRetries ||
144:           !Object.keys(retryableStatusCodes).includes(pgError.code?.toString() || '')
145:         ) {
146:           const appError = new AppError({
147:             type: errorType,
148:             message:
149:               pgError.message ||
150:               retryableStatusCodes[pgError.code as keyof typeof retryableStatusCodes] ||
151:               'Database operation failed',
152:             severity: errorSeverity,
153:             code: pgError.code,
154:             context: context,
155:             pgError: pgError.details || pgError.hint || pgError.message,
156:             operation: context,
157:           })
158:           throw handleError(appError)
159:         }
160: 
161:         // Exponential backoff with jitter
162:         const backoffTime = Math.min(1000 * 2 ** retries + Math.random() * 1000, 10000)
163:         await new Promise((resolve) => setTimeout(resolve, backoffTime))
164:       }
165:     }
166:     throw new Error('Max retries reached')
167:   }
168: 
169:   async function insert<T>(
170:     tableName: string,
171:     data: T,
172:     options: { columns?: string } = {},
173:   ): Promise<T> {
174:     return handleDatabaseOperation(
175:       async () =>
176:         await supabase
177:           .from(tableName)
178:           .insert(data)
179:           .select(options.columns || '*'),
180:       `Insert into ${tableName}`,
181:     )
182:   }
183: 
184:   async function update<T>(
185:     tableName: string,
186:     id: string | number,
187:     data: Partial<T>,
188:     options: { columns?: string } = {},
189:   ): Promise<T> {
190:     return handleDatabaseOperation(
191:       async () =>
192:         await supabase
193:           .from(tableName)
194:           .update(data)
195:           .eq('id', id)
196:           .select(options.columns || '*'),
197:       `Update ${tableName}`,
198:     )
199:   }
200: 
201:   async function remove(tableName: string, id: string | number): Promise<void> {
202:     await handleDatabaseOperation(
203:       async () => await supabase.from(tableName).delete().eq('id', id),
204:       `Delete from ${tableName}`,
205:     )
206:   }
207: 
208:   async function select<T>(tableName: string, options: SelectOptions<T> = {}): Promise<T[]> {
209:     let query = supabase.from(tableName).select(options.columns || '*')
210: 
211:     if (options.filters) {
212:       Object.entries(options.filters).forEach(([column, filterOption]) => {
213:         query = applyFilter(query, column, filterOption)
214:       })
215:     }
216: 
217:     if (options.range) {
218:       query = query.range(options.range.from, options.range.to)
219:     }
220: 
221:     if (options.order) {
222:       query = query.order(options.order.column, { ascending: options.order.ascending })
223:     }
224: 
225:     return handleDatabaseOperation(() => query, `Select from ${tableName}`)
226:   }
227: 
228:   return {
229:     insert,
230:     update,
231:     remove,
232:     select,
233:   }
234: }
```

## File: layers/crud/composables/insert.ts
```typescript
  1: import { useErrorHandler, AppError, ErrorType, ErrorSeverity, useLogger } from '@ib/logger'
  2: import { useHttpHandler } from './http-handler'
  3: import { getOrCreateStore } from './main.store'
  4: import { useRateLimit } from './rate-limit'
  5: 
  6: type InsertError =
  7:   | 'VALIDATION_ERROR'
  8:   | 'NETWORK_ERROR'
  9:   | 'SERVER_ERROR'
 10:   | 'RATE_LIMIT_ERROR'
 11:   | 'DUPLICATE_ERROR'
 12: 
 13: export function useInsertData<T extends { id: string | number }>(
 14:   tableName: string,
 15:   options: {
 16:     columns?: string
 17:     validateData?: (data: T) => boolean | Promise<boolean>
 18:     maxRetries?: number
 19:     refreshRelated?: () => Promise<void>
 20:     transformData?: (data: T) => T
 21:     onError?: (error: InsertError, details: any) => void
 22:     rateLimitMs?: number
 23:     auditLog?: (action: string, details: any) => Promise<void>
 24:     generateClientId?: () => string | number
 25:   } = {},
 26: ) {
 27:   const supabase = useSupabaseClient()
 28:   const { insert } = useHttpHandler()
 29:   const { handleError } = useErrorHandler()
 30:   const log = useLogger('useInsertData')
 31:   const store = getOrCreateStore<T>(tableName)()
 32:   const { checkRateLimit } = useRateLimit()
 33:   const isInserting: Ref<boolean> = ref(false)
 34:   let lastInsertTime = 0
 35: 
 36:   const insertData = async (data: T | T[]) => {
 37:     isInserting.value = true
 38:     const startTime = Date.now()
 39: 
 40:     const insertSingle = async (item: T): Promise<T> => {
 41:       try {
 42:         // Rate limiting
 43:         if (options.rateLimitMs) {
 44:           await checkRateLimit('useInsertData', { limitMs: options.rateLimitMs })
 45:         }
 46: 
 47:         // Validation
 48:         if (options.validateData && !(await options.validateData(item))) {
 49:           throw new AppError({
 50:             type: ErrorType.VALIDATION_ERROR,
 51:             message: 'Data validation failed',
 52:             severity: ErrorSeverity.MEDIUM,
 53:             context: 'Data Validation',
 54:           })
 55:         }
 56: 
 57:         // Data transformation
 58:         const transformedData = options.transformData ? options.transformData(item) : item
 59: 
 60:         // Generate client-side ID if needed
 61:         if (options.generateClientId && !transformedData.id) {
 62:           transformedData.id = options.generateClientId()
 63:         }
 64: 
 65:         // Optimistic insert
 66:         store.addItems([transformedData])
 67: 
 68:         // Perform the insert
 69:         const result = await insert(tableName, transformedData, { columns: options.columns })
 70: 
 71:         // Update store with actual server data
 72:         store.updateItem(result)
 73: 
 74:         // Refresh related data if needed
 75:         if (options.refreshRelated) {
 76:           await options.refreshRelated()
 77:         }
 78: 
 79:         // Audit logging
 80:         if (options.auditLog) {
 81:           await options.auditLog('INSERT', { tableName, newData: result })
 82:         }
 83: 
 84:         lastInsertTime = Date.now()
 85:         return result
 86:       } catch (error: any) {
 87:         // Revert optimistic insert
 88:         store.removeItem(item.id)
 89:         throw error // error handler in the HTTP handler deals with this
 90:       }
 91:     }
 92: 
 93:     try {
 94:       if (Array.isArray(data)) {
 95:         const results = await Promise.all(data.map(insertSingle))
 96:         isInserting.value = false
 97:         return results
 98:       } else {
 99:         const result = await insertSingle(data)
100:         isInserting.value = false
101:         return result
102:       }
103:     } catch (error: any) {
104:       handleError(error, 'Error inserting data')
105:       throw error // Re-throw to allow caller to handle if needed
106:     } finally {
107:       isInserting.value = false
108:     }
109:   }
110: 
111:   return {
112:     insertData,
113:     isInserting,
114:   }
115: }
```

## File: layers/crud/composables/loading.store.ts
```typescript
 1: import type { DomainKey } from './pagination.store'
 2: 
 3: type Loaders = {
 4:   [K in DomainKey]?: boolean
 5: }
 6: 
 7: export const useLoadingStore = defineStore('storeLoading', () => {
 8:   const loaders = ref({} as Loaders)
 9: 
10:   function setLoading(key: DomainKey, isLoading: boolean) {
11:     loaders.value[key] = isLoading
12:   }
13: 
14:   async function setLoadingInterval(key: DomainKey, isLoading: boolean, time: number) {
15:     await new Promise<void>((resolve) => {
16:       setTimeout(() => {
17:         setLoading(key, isLoading)
18:         resolve()
19:       }, time)
20:     })
21:   }
22: 
23:   function isLoading(key: DomainKey) {
24:     return !!loaders.value[key]
25:   }
26: 
27:   return {
28:     setLoadingInterval,
29:     setLoading,
30:     isLoading,
31:   }
32: })
33: 
34: if (import.meta.hot) {
35:   import.meta.hot.accept(acceptHMRUpdate(useLoadingStore, import.meta.hot))
36: }
```

## File: layers/crud/composables/local-storage.ts
```typescript
 1: import { useLogger } from '@ib/logger'
 2: 
 3: const CACHE_DURATION = 24 * 60 * 60 * 1000 // 24 hours in milliseconds
 4: const CACHE_VERSION = '1.0' // Increment this when data structure changes
 5: 
 6: const LocalStorageEnum = {
 7:   CATEGORIES: 'astronera-categories',
 8:   TAGS: 'astronera-tags',
 9: } as const
10: 
11: type LocalStorageKey = (typeof LocalStorageEnum)[keyof typeof LocalStorageEnum]
12: 
13: interface CachedData<T> {
14:   version: string
15:   timestamp: number
16:   data: T
17: }
18: 
19: export function useBaseLocalStorage() {
20:   const logger = useLogger('localStorage')
21: 
22:   function getCacheKey(key: LocalStorageKey): string {
23:     return `${key}-${CACHE_VERSION}`
24:   }
25: 
26:   function clearCache(key: LocalStorageKey): void {
27:     localStorage.removeItem(getCacheKey(key))
28:     logger.debug(`Cleared cache for: ${key}`)
29:   }
30: 
31:   function clearAllCaches(): void {
32:     Object.values(LocalStorageEnum).forEach(clearCache)
33:     logger.debug('Cleared all caches')
34:   }
35: 
36:   function getFromCache<T>(key: LocalStorageKey): T | null {
37:     const cacheKey = getCacheKey(key)
38:     const cachedItem = localStorage.getItem(cacheKey)
39: 
40:     if (!cachedItem) {
41:       logger.debug(`No cached data found for: ${key}`)
42:       return null
43:     }
44: 
45:     try {
46:       const parsedData = JSON.parse(cachedItem) as CachedData<T>
47:       const currentTime = Date.now()
48: 
49:       if (
50:         currentTime - parsedData.timestamp <= CACHE_DURATION &&
51:         parsedData.version === CACHE_VERSION
52:       ) {
53:         logger.debug(`Retrieved valid cached data for: ${key}`)
54:         return parsedData.data
55:       } else {
56:         logger.debug(`Cached data for ${key} is outdated or version mismatch`)
57:         clearCache(key)
58:         return null
59:       }
60:     } catch (error) {
61:       logger.error(`Error parsing cached data for ${key}:`, error)
62:       clearCache(key)
63:       return null
64:     }
65:   }
66: 
67:   function setCache<T>(key: LocalStorageKey, data: T): void {
68:     const cacheKey = getCacheKey(key)
69:     const cacheData: CachedData<T> = {
70:       version: CACHE_VERSION,
71:       timestamp: Date.now(),
72:       data,
73:     }
74:     localStorage.setItem(cacheKey, JSON.stringify(cacheData))
75:     logger.debug(`Cached data for: ${key}`)
76:   }
77: 
78:   async function getCachedOrFetch<T>(key: LocalStorageKey, fetchFn: () => Promise<T>): Promise<T> {
79:     const cachedData = getFromCache<T>(key)
80:     if (cachedData) return cachedData
81: 
82:     try {
83:       const fetchedData = await fetchFn()
84:       setCache(key, fetchedData)
85:       return fetchedData
86:     } catch (error) {
87:       logger.error(`Error fetching data for ${key}:`, error)
88:       throw error
89:     }
90:   }
91: 
92:   return {
93:     getFromCache,
94:     setCache,
95:     clearCache,
96:     clearAllCaches,
97:     getCachedOrFetch,
98:   }
99: }
```

## File: layers/crud/composables/main.store.ts
```typescript
 1: import { defineStore } from 'pinia'
 2: import { type Ref, ref } from 'vue'
 3: import type { DomainKey } from './pagination.store'
 4: 
 5: export function createBaseStore<T extends object>(domainKey: DomainKey) {
 6:   return defineStore(`${domainKey}Store`, () => {
 7:     const items = ref<T[]>([]) as Ref<T[]>
 8:     const itemsMap = computed(() => new Map(items.value.map((item) => [item.id, item])))
 9: 
10:     function setItems(newItems: T[]) {
11:       items.value = newItems
12:     }
13: 
14:     function addItems(newItems: T[]) {
15:       const newItemsMap = new Map(newItems.map((item) => [item.id, item]))
16:       items.value = [...items.value.filter((item) => !newItemsMap.has(item.id)), ...newItems]
17:     }
18: 
19:     function updateItem(updatedItem: T) {
20:       const index = items.value.findIndex((item) => item.id === updatedItem.id)
21:       if (index !== -1) {
22:         items.value[index] = { ...items.value[index], ...updatedItem }
23:       } else {
24:         items.value.push(updatedItem)
25:       }
26:     }
27: 
28:     function removeItem(id: string | number) {
29:       items.value = items.value.filter((item) => item.id !== id)
30:     }
31: 
32:     function clearItems() {
33:       items.value = []
34:     }
35: 
36:     function getItemById(id: string | number) {
37:       return itemsMap.value.get(id)
38:     }
39: 
40:     return {
41:       items,
42:       itemsMap,
43:       setItems,
44:       addItems,
45:       updateItem,
46:       removeItem,
47:       clearItems,
48:       getItemById,
49:     }
50:   })
51: }
52: 
53: const storeCache: Partial<Record<DomainKey, ReturnType<typeof createBaseStore>>> = {}
54: 
55: export function getOrCreateStore<T>(domainKey: DomainKey) {
56:   if (!storeCache[domainKey]) {
57:     storeCache[domainKey] = createBaseStore<T>(domainKey)
58:   }
59:   return storeCache[domainKey] as ReturnType<typeof createBaseStore<T>>
60: }
```

## File: layers/crud/composables/notification.ts
```typescript
 1: import type { useToast } from 'primevue/usetoast'
 2: 
 3: interface BaseNotification {
 4:   summary: string
 5:   message: string
 6: }
 7: 
 8: export function useNotification() {
 9:   const nuxtApp = useNuxtApp()
10:   const getToast: typeof useToast = () => nuxtApp.vueApp.config.globalProperties.$toast
11:   const toast = getToast()
12: 
13:   const success = ({ summary, message }: BaseNotification) => {
14:     toast.add({
15:       severity: 'success',
16:       summary: `Success: ${summary}`,
17:       detail: message,
18:       life: 5000,
19:       closable: true,
20:     })
21:   }
22: 
23:   const error = ({ summary, message }: BaseNotification) => {
24:     toast.add({
25:       severity: 'error',
26:       summary: `Error: ${summary}`,
27:       detail: message,
28:       life: 0,
29:       closable: true,
30:     })
31:   }
32: 
33:   const info = ({ summary, message }: BaseNotification) => {
34:     toast.add({
35:       severity: 'info',
36:       summary: `Info: ${summary}`,
37:       detail: message,
38:       life: 5000,
39:       closable: true,
40:     })
41:   }
42: 
43:   const warn = ({ summary, message }: BaseNotification) => {
44:     toast.add({
45:       severity: 'warn',
46:       summary: `Warning: ${summary}`,
47:       detail: message,
48:       life: 5000,
49:       closable: true,
50:     })
51:   }
52: 
53:   const feature = ({ summary, message }: BaseNotification) => {
54:     toast.add({
55:       severity: 'warn',
56:       group: 'cta',
57:       summary: summary,
58:       detail: message,
59:       life: 0,
60:       closable: true,
61:     })
62:   }
63: 
64:   return {
65:     success,
66:     error,
67:     info,
68:     warn,
69:     feature,
70:   }
71: }
```

## File: layers/crud/composables/pagination.store.ts
```typescript
 1: import { useLogger } from '@ib/logger'
 2: 
 3: export type DomainKey =
 4:   | 'users'
 5:   | 'news'
 6:   | 'events'
 7:   | 'venues'
 8:   | 'research'
 9:   | 'companies'
10:   | 'chats'
11:   | 'feedbacks'
12:   | 'currentUser'
13:   | 'chat'
14:   | 'auth'
15: 
16: export type PaginationType = {
17:   page: number
18:   limit: number
19: }
20: 
21: export interface PaginationInput {
22:   domainKey: DomainKey
23:   pagination: PaginationType
24:   force?: boolean
25: }
26: 
27: export const usePaginationStore = defineStore('paginationStore', () => {
28:   const logger = useLogger('paginationStore')
29:   const stores = reactive({} as Record<DomainKey, Ref<{ page: number; limit: number }>>)
30:   const dataFinished = ref({} as Record<DomainKey, boolean>)
31: 
32:   function initPagination(input: PaginationInput) {
33:     if (!stores[input.domainKey] || input.force) {
34:       // -1 for supabase because it is 0 indexed
35:       console.log('initPagination', input.force)
36:       stores[input.domainKey] = {
37:         page: input.pagination.page,
38:         limit: input.pagination.limit - 1,
39:       }
40:     }
41:   }
42: 
43:   function getPagination(domainKey: DomainKey) {
44:     if (!stores[domainKey]) {
45:       logger.warn(`Pagination settings for '${domainKey}' is not initialized.`)
46:       return null
47:     }
48: 
49:     return stores[domainKey]
50:   }
51: 
52:   function getPaginationRange(domainKey: DomainKey) {
53:     const pagination = getPagination(domainKey)
54:     if (pagination) {
55:       logger.info('getPaginationRange', pagination.limit, (pagination.page - 1) * pagination.limit)
56:       return {
57:         from: (pagination.page - 1) * pagination.limit,
58:         to: pagination.limit * pagination.page,
59:       }
60:     }
61:     return undefined
62:   }
63: 
64:   function incrementPagination(domainKey: DomainKey) {
65:     const currentPagination = getPagination(domainKey)
66:     if (currentPagination) {
67:       currentPagination.page++
68:     } else {
69:       logger.warn(`Attempted to increment pagination for an uninitialized store '${domainKey}'.`)
70:     }
71:   }
72: 
73:   function setDataFinished(domainKey: DomainKey) {
74:     if (stores[domainKey]) {
75:       dataFinished.value[domainKey] = true
76:     }
77:   }
78: 
79:   const isDataFinished = (domainKey: DomainKey) => dataFinished.value[domainKey]
80: 
81:   return {
82:     stores,
83:     isDataFinished,
84:     setDataFinished,
85:     initPagination,
86:     getPagination,
87:     incrementPagination,
88:     getPaginationRange,
89:   }
90: })
```

## File: layers/crud/composables/rate-limit.ts
```typescript
 1: interface RateLimitOptions {
 2:   limitMs: number
 3: }
 4: 
 5: export function useRateLimit() {
 6:   const lastActionTimes = ref<Map<string, number>>(new Map())
 7: 
 8:   const checkRateLimit = async (action: string, options: RateLimitOptions): Promise<void> => {
 9:     const now = Date.now()
10:     const lastActionTime = lastActionTimes.value.get(action) || 0
11:     const timeElapsed = now - lastActionTime
12: 
13:     if (timeElapsed < options.limitMs) {
14:       const waitTime = options.limitMs - timeElapsed
15:       await new Promise((resolve) => setTimeout(resolve, waitTime))
16:     }
17: 
18:     lastActionTimes.value.set(action, Date.now())
19:   }
20: 
21:   return {
22:     checkRateLimit,
23:   }
24: }
```

## File: layers/crud/composables/select.ts
```typescript
  1: import { useErrorHandler, AppError, ErrorType, ErrorSeverity, useLogger } from '@ib/logger'
  2: import { useHttpHandler } from './http-handler'
  3: import { getOrCreateStore } from './main.store'
  4: import { usePaginationStore, type PaginationType } from './pagination.store'
  5: import { useRateLimit } from './rate-limit'
  6: 
  7: export function useSelectData<T extends { id: string | number }>(
  8:   tableName: string,
  9:   options: {
 10:     columns?: string
 11:     filters?: Record<string, any>
 12:     orderBy?: { column: string; ascending?: boolean }
 13:     initialFetch?: boolean
 14:     pagination?: PaginationType
 15:     limit?: number
 16:     refreshRelated?: () => Promise<void>
 17:     rateLimitMs?: number
 18:     auditLog?: (action: string, details: any) => Promise<void>
 19:   } = {},
 20: ) {
 21:   const { select } = useHttpHandler()
 22:   const { handleError } = useErrorHandler()
 23:   const logger = useLogger('useSelectData')
 24:   const store = getOrCreateStore<T>(tableName)()
 25:   const { checkRateLimit } = useRateLimit()
 26: 
 27:   const isSelecting: Ref<boolean> = ref(false)
 28:   let lastSelectTime = 0
 29: 
 30:   let paginationStore: ReturnType<typeof usePaginationStore> | null = null
 31: 
 32:   if (options.pagination) {
 33:     paginationStore = usePaginationStore()
 34:     paginationStore.initPagination({
 35:       domainKey: tableName,
 36:       pagination: options.pagination,
 37:       force: true,
 38:     })
 39:   }
 40: 
 41:   const fetchData = async (forceFetch = false) => {
 42:     isSelecting.value = true
 43:     const startTime = Date.now()
 44: 
 45:     try {
 46:       // Rate limiting
 47:       if (options.rateLimitMs && !forceFetch) {
 48:         await checkRateLimit('useSelectData', { limitMs: options.rateLimitMs })
 49:       }
 50: 
 51:       const queryOptions: any = {
 52:         columns: options.columns || '*',
 53:         filters: options.filters,
 54:       }
 55: 
 56:       if (options.orderBy) {
 57:         queryOptions.order = {
 58:           column: options.orderBy.column,
 59:           ascending: options.orderBy.ascending ?? true,
 60:         }
 61:       }
 62: 
 63:       if (paginationStore) {
 64:         const pagination = paginationStore.getPaginationRange(tableName)
 65:         if (pagination) {
 66:           console.log('pagination', pagination)
 67:           queryOptions.range = pagination
 68:         } else {
 69:           throw new AppError({
 70:             type: ErrorType.VALIDATION_ERROR,
 71:             message: `Pagination not initialized for ${tableName}`,
 72:             severity: ErrorSeverity.MEDIUM,
 73:             context: 'Data Fetching',
 74:           })
 75:         }
 76:       } else if (options.limit) {
 77:         queryOptions.range = { from: 0, to: options.limit - 1 }
 78:       }
 79: 
 80:       const result = await select<T>(tableName, queryOptions)
 81:       console.log('Fetch result:', result)
 82: 
 83:       // Audit logging
 84:       if (options.auditLog) {
 85:         await options.auditLog('SELECT', { tableName, options: queryOptions })
 86:       }
 87: 
 88:       lastSelectTime = Date.now()
 89:       return result
 90:     } catch (error: any) {
 91:       handleError(error, 'Error selecting data')
 92:       throw error
 93:     } finally {
 94:       isSelecting.value = false
 95:     }
 96:   }
 97: 
 98:   const loadMore = async () => {
 99:     if (paginationStore) {
100:       console.log('loading more data')
101:       const newData = await fetchData()
102:       if (newData.length === 0) {
103:         paginationStore.setDataFinished(tableName)
104:       } else {
105:         store.addItems(newData)
106:         paginationStore.incrementPagination(tableName)
107:       }
108:     } else {
109:       const data = await fetchData()
110:       store.setItems(data)
111:     }
112: 
113:     // Refresh related data if needed
114:     if (options.refreshRelated) {
115:       await options.refreshRelated()
116:     }
117:   }
118: 
119:   const refresh = async () => {
120:     if (paginationStore) {
121:       paginationStore.initPagination({
122:         domainKey: tableName,
123:         pagination: options.pagination!,
124:         force: true,
125:       })
126:     }
127:     store.clearItems()
128:     await loadMore()
129:   }
130: 
131:   if (options.initialFetch) {
132:     loadMore()
133:   }
134: 
135:   return {
136:     store,
137:     loadMore,
138:     refresh,
139:     isSelecting,
140:   }
141: }
```

## File: layers/crud/composables/settings.store.ts
```typescript
 1: type SettingsKey = 'usersStore' | 'storeNews'
 2: 
 3: export const useSettingsStore = defineStore('settingsStore', () => {
 4:   const settings = ref({} as Settings)
 5:   const summaryLevel = ref('beginner' as SummaryLevel)
 6: 
 7:   function toggleSettings(key: SettingsKey) {
 8:     settings.value[key] = !settings.value[key]
 9:   }
10: 
11:   function isSettingsOn(key: SettingsKey) {
12:     return !settings.value[key]
13:   }
14: 
15:   const changeSummaryLevel = (level: 'beginner' | 'intermediate' | 'expert') => {
16:     summaryLevel.value = level
17:   }
18: 
19:   return {
20:     toggleSettings,
21:     isSettingsOn,
22:   }
23: })
24: 
25: if (import.meta.hot) {
26:   import.meta.hot.accept(acceptHMRUpdate(useSettingsStore, import.meta.hot))
27: }
```

## File: layers/crud/composables/update.ts
```typescript
 1: import { useErrorHandler, AppError, ErrorSeverity, ErrorType, useLogger } from '@ib/logger'
 2: import { useHttpHandler } from './http-handler'
 3: import { getOrCreateStore } from './main.store'
 4: import { useRateLimit } from './rate-limit'
 5: 
 6: export function useUpdateData<T extends { id: string | number }>(
 7:   tableName: string,
 8:   options: {
 9:     columns?: string
10:     validateData?: (data: Partial<T>) => boolean | Promise<boolean>
11:     refreshRelated?: () => Promise<void>
12:     transformData?: (data: Partial<T>) => Partial<T>
13:     rateLimitMs?: number
14:     auditLog?: (action: string, details: any) => Promise<void>
15:   } = {},
16: ) {
17:   const { update } = useHttpHandler()
18:   const { handleError } = useErrorHandler()
19:   const logger = useLogger('useUpdateData')
20:   const store = getOrCreateStore<T>(tableName)()
21:   const { checkRateLimit } = useRateLimit()
22: 
23:   const isUpdating: Ref<boolean> = ref(false)
24:   let lastUpdateTime = 0
25: 
26:   const updateData = async (id: string | number, data: Partial<T>) => {
27:     isUpdating.value = true
28:     const startTime = Date.now()
29:     let oldData: T | undefined = undefined
30: 
31:     try {
32:       // Rate limiting
33:       if (options.rateLimitMs) {
34:         await checkRateLimit('useUpdateData', { limitMs: options.rateLimitMs })
35:       }
36: 
37:       // Validation
38:       if (options.validateData && !(await options.validateData(data))) {
39:         throw new AppError({
40:           type: ErrorType.VALIDATION_ERROR,
41:           message: 'Data validation failed',
42:           severity: ErrorSeverity.MEDIUM,
43:           context: 'Data Validation',
44:         })
45:       }
46: 
47:       // Data transformation
48:       const transformedData = options.transformData ? options.transformData(data) : data
49: 
50:       // Optimistic update
51:       oldData = store.getItemById(id)
52:       if (!oldData) {
53:         throw new AppError({
54:           type: ErrorType.NOT_FOUND_ERROR,
55:           message: 'Item not found in store',
56:           severity: ErrorSeverity.MEDIUM,
57:           context: 'Data Update',
58:         })
59:       }
60:       store.updateItem({ ...oldData, ...transformedData, id })
61: 
62:       // Perform the update
63:       const result = await update(tableName, id, transformedData, { columns: options.columns })
64: 
65:       // Update store with actual server data
66:       store.updateItem(result)
67: 
68:       // Refresh related data if needed
69:       if (options.refreshRelated) {
70:         await options.refreshRelated()
71:       }
72: 
73:       // Audit logging
74:       if (options.auditLog) {
75:         await options.auditLog('UPDATE', { tableName, id, oldData, newData: result })
76:       }
77: 
78:       lastUpdateTime = Date.now()
79:       return result
80:     } catch (error: any) {
81:       // Revert optimistic update
82:       if (oldData) {
83:         store.updateItem(oldData)
84:       }
85:       handleError(error, 'Error updating data')
86:       throw error
87:     } finally {
88:       isUpdating.value = false
89:     }
90:   }
91: 
92:   return {
93:     updateData,
94:     isUpdating,
95:   }
96: }
```

## File: layers/crud/composables/upload.ts
```typescript
  1: import { v4 as uuidv4 } from 'uuid'
  2: import { useErrorHandler, AppError, ErrorType, ErrorSeverity, useLogger } from '@ib/logger'
  3: import { useRateLimit } from './rate-limit'
  4: 
  5: type FileType = 'profile' | 'document' | 'image' | 'video' | 'audio' | 'other'
  6: 
  7: interface UploadOptions {
  8:   bucket: string
  9:   path: string
 10:   fileType: FileType
 11:   userId?: string
 12:   metadata?: Record<string, string>
 13:   optimizeImage?: boolean
 14:   maxWidth?: number
 15:   maxHeight?: number
 16:   quality?: number
 17:   format?: 'jpeg' | 'jpg' | 'png' | 'webp'
 18:   rateLimitMs?: number
 19:   auditLog?: (action: string, details: any) => Promise<void>
 20:   onProgress?: (progress: number) => void
 21:   maxFileSize?: number
 22:   allowedMimeTypes?: string[]
 23:   serverSideOptimize?: boolean
 24:   useServerUpload?: boolean
 25:   replace?: boolean
 26: }
 27: 
 28: interface UploadResult {
 29:   path: string
 30:   publicUrl: string
 31:   size: number
 32:   mimeType: string
 33:   metadata: Record<string, string>
 34: }
 35: 
 36: export function useFileUpload() {
 37:   const supabase = useSupabaseClient()
 38:   const { handleError } = useErrorHandler()
 39:   const { checkRateLimit } = useRateLimit()
 40:   const isUploading: Ref<boolean> = ref(false)
 41:   const uploadProgress: Ref<number> = ref(0)
 42:   const lastUploadTime = ref(0)
 43:   const uploadQueue: Ref<File[]> = ref([])
 44:   const currentUpload: Ref<File | null> = ref(null)
 45: 
 46:   const isProcessing = computed(() => uploadQueue.value.length > 0 || currentUpload.value !== null)
 47: 
 48:   const getFilePath = (fileName: string, options: UploadOptions): string => {
 49:     const { bucket, path, fileType, userId, replace } = options
 50:     const timestamp = new Date().toISOString().replace(/[-:]/g, '').split('.')[0]
 51:     const uniqueId = uuidv4().slice(0, 8)
 52:     const userPath = userId ? `${userId}/` : ''
 53:     return `${bucket}/${fileType}/${userPath}${path || ''}/${replace ? '' : `${timestamp}_${uniqueId}_`}${fileName}`
 54:   }
 55: 
 56:   const validateFile = (file: File, options: UploadOptions): void => {
 57:     if (options.maxFileSize && file.size > options.maxFileSize) {
 58:       throw new AppError({
 59:         type: ErrorType.VALIDATION_ERROR,
 60:         message: `File size exceeds the maximum allowed size of ${options.maxFileSize} bytes`,
 61:         severity: ErrorSeverity.MEDIUM,
 62:         context: 'File Upload',
 63:       })
 64:     }
 65: 
 66:     if (options.allowedMimeTypes && !options.allowedMimeTypes.includes(file.type)) {
 67:       throw new AppError({
 68:         type: ErrorType.VALIDATION_ERROR,
 69:         message: `File type ${file.type} is not allowed`,
 70:         severity: ErrorSeverity.MEDIUM,
 71:         context: 'File Upload',
 72:       })
 73:     }
 74:   }
 75: 
 76:   const serverSideUpload = async (file: File, options: UploadOptions): Promise<UploadResult> => {
 77:     const formData = new FormData()
 78:     formData.append('file', file)
 79:     formData.append('userId', options.userId || '')
 80:     formData.append('fileType', options.fileType)
 81:     formData.append('bucket', options.bucket)
 82:     formData.append('path', options.path)
 83:     formData.append(
 84:       'optimizationOptions',
 85:       JSON.stringify({
 86:         maxWidth: options.maxWidth,
 87:         maxHeight: options.maxHeight,
 88:         quality: options.quality,
 89:         format: options.format,
 90:       }),
 91:     )
 92: 
 93:     const response = await $fetch('/api/upload', {
 94:       method: 'POST',
 95:       body: formData,
 96:       onUploadProgress: (progressEvent) => {
 97:         if (progressEvent.total) {
 98:           const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total)
 99:           uploadProgress.value = progress
100:           options.onProgress?.(progress)
101:         }
102:       },
103:     })
104: 
105:     if (!response || !response.fileName) {
106:       throw new Error('Failed to upload file on server')
107:     }
108: 
109:     const publicUrl = supabase.storage.from(options.bucket).getPublicUrl(response.fileName)
110:       .data.publicUrl
111: 
112:     return {
113:       path: response.fileName,
114:       publicUrl,
115:       size: file.size,
116:       mimeType: file.type,
117:       metadata: {
118:         originalName: file.name,
119:         ...options.metadata,
120:       },
121:     }
122:   }
123: 
124:   const uploadFile = async (file: File, options: UploadOptions): Promise<UploadResult> => {
125:     isUploading.value = true
126:     uploadProgress.value = 0
127:     currentUpload.value = file
128: 
129:     try {
130:       validateFile(file, options)
131: 
132:       // Rate limiting
133:       if (options.rateLimitMs) {
134:         await checkRateLimit('fileUpload', { limitMs: options.rateLimitMs })
135:       }
136: 
137:       let result: UploadResult
138: 
139:       if (options.useServerUpload) {
140:         result = await serverSideUpload(file, options)
141:       } else {
142:         const filePath = getFilePath(file.name, options)
143:         const { data, error } = await supabase.storage.from(options.bucket).upload(filePath, file, {
144:           cacheControl: '3600',
145:           upsert: options.replace,
146:           contentType: file.type,
147:         })
148: 
149:         if (error) {
150:           throw new AppError({
151:             type: ErrorType.UPLOAD_ERROR,
152:             message: `Error uploading file: ${error.message}`,
153:             severity: ErrorSeverity.HIGH,
154:             context: 'File Upload',
155:           })
156:         }
157: 
158:         const {
159:           data: { publicUrl },
160:         } = supabase.storage.from(options.bucket).getPublicUrl(data.path)
161: 
162:         result = {
163:           path: data.path,
164:           publicUrl,
165:           size: file.size,
166:           mimeType: file.type,
167:           metadata: {
168:             originalName: file.name,
169:             ...options.metadata,
170:           },
171:         }
172:       }
173: 
174:       lastUploadTime.value = Date.now()
175: 
176:       return result
177:     } catch (error: any) {
178:       handleError(error, 'Error uploading file')
179:       throw error
180:     } finally {
181:       isUploading.value = false
182:       uploadProgress.value = 100
183:       currentUpload.value = null
184:       processQueue()
185:     }
186:   }
187: 
188:   const processQueue = async () => {
189:     if (uploadQueue.value.length > 0 && !isUploading.value) {
190:       const nextFile = uploadQueue.value.shift()
191:       if (nextFile) {
192:         await uploadFile(nextFile, {
193:           bucket: 'default',
194:           path: 'uploads',
195:           fileType: 'other',
196:         })
197:       }
198:     }
199:   }
200: 
201:   const queueUpload = (file: File, options: UploadOptions) => {
202:     uploadQueue.value.push(file)
203:     processQueue()
204:   }
205: 
206:   const cancelUpload = () => {
207:     if (currentUpload.value) {
208:       // Implement cancellation logic here
209:       // This might involve aborting the Supabase upload if possible
210:       currentUpload.value = null
211:       isUploading.value = false
212:       uploadProgress.value = 0
213:     }
214:   }
215: 
216:   const clearQueue = () => {
217:     uploadQueue.value = []
218:   }
219: 
220:   return {
221:     uploadFile,
222:     queueUpload,
223:     cancelUpload,
224:     clearQueue,
225:     isUploading,
226:     isProcessing,
227:     uploadProgress,
228:     currentUpload,
229:     uploadQueue,
230:   }
231: }
```

## File: layers/crud/composables/useApiDataStore.ts
```typescript
 1: // stores/apiData.ts
 2: import { defineStore } from 'pinia'
 3: import { ref } from 'vue'
 4: 
 5: interface ApiDataStructure {
 6:   [key: string]: any
 7: }
 8: 
 9: export const useApiDataStore = defineStore('apiData', () => {
10:   const apiData = ref<ApiDataStructure>({})
11: 
12:   const setData = (url: string, data: any): void => {
13:     apiData.value[url] = data
14:   }
15: 
16:   const getData = (url: string): any => {
17:     return apiData.value[url]
18:   }
19: 
20:   const clearData = (): void => {
21:     apiData.value = {}
22:   }
23: 
24:   return {
25:     apiData,
26:     setData,
27:     getData,
28:     clearData,
29:   }
30: })
```

## File: layers/crud/composables/useBaseError.ts
```typescript
  1: import { useLogger } from '@ib/logger'
  2: 
  3: interface ErrorMessage {
  4:   userMessage: string // User-friendly error message if needed
  5:   devMessage: string // Make bugfixing easy!
  6:   error: any
  7: }
  8: 
  9: interface ErrorServer extends Omit<ErrorMessage, 'error'> {
 10:   devOnly: boolean // default true - don't show toasts in production
 11:   featureRelated?: boolean // default false - log to feature-specific log
 12:   response: { data: any; error: any }
 13: }
 14: 
 15: interface ErrorClient extends ErrorMessage {
 16:   isServer?: boolean // default false
 17:   featureRelated?: boolean // default false - log to feature-specific log
 18:   devOnly: boolean
 19: }
 20: 
 21: export function useBaseError() {
 22:   // !todo:med:easy - add prefix to base error
 23: 
 24:   // const toast = useNotification()
 25:   const logger = useLogger('useBaseError')
 26:   const isAdmin = useRuntimeConfig().public.nodeEnv === 'development'
 27: 
 28:   // function handleErrorWithCodes(error: any) {
 29:   //   switch (error.statusCode) {
 30:   //     case 429:
 31:   //       toast.feature({
 32:   //         summary: error.statusMessage,
 33:   //         message: error.message,
 34:   //       })
 35:   //       break
 36:   //     case 403:
 37:   //       toast.error({
 38:   //         summary: error.statusMessage,
 39:   //         message: error.message,
 40:   //       })
 41:   //       break
 42:   //     default:
 43:   //       console.error('Unhandled feature error:', error)
 44:   //   }
 45:   // }
 46: 
 47:   function formatErrorMessage({ userMessage, devMessage, error }: ErrorMessage) {
 48:     const devError = `${devMessage}: ${JSON.stringify(error)}`
 49:     logger.error(devError)
 50:     const userError = userMessage || 'An unexpected error occurred. Please try again later.'
 51:     return isAdmin ? devError : userError
 52:   }
 53: 
 54:   function handleError({
 55:     userMessage,
 56:     devMessage,
 57:     devOnly = true,
 58:     isServer = false,
 59:     error,
 60:   }: ErrorClient) {
 61:     // Determine the appropriate user message
 62:     const errorMessage = formatErrorMessage({ error, userMessage, devMessage })
 63: 
 64:     // Add an error toast notification with an option to retry if an action is provided
 65: 
 66:     // Handle critical errors specifically if needed
 67:     if (!devOnly || isAdmin) {
 68:       // toast.error({
 69:       //   summary: 'Error',
 70:       //   message: errorMessage,
 71:       // })
 72:       // Here you could navigate to an error page, log out the user, etc.
 73:       console.error('Handling critical error for:', devMessage)
 74:     }
 75: 
 76:     throw createError({
 77:       message: `${isServer ? 'SERVER' : 'CLIENT'} ERROR: ${errorMessage}`,
 78:     })
 79:   }
 80: 
 81:   function handleServerError({ response, devMessage, devOnly, userMessage }: ErrorServer) {
 82:     if (response.error) {
 83:       console.log('FeatError', response.error)
 84:       handleError({
 85:         error: response.error,
 86:         devOnly,
 87:         userMessage,
 88:         isServer: true,
 89:         devMessage,
 90:       })
 91:     } else if (response.data) {
 92:       logger.info(`Successfully fetched ${response.data.length} items`)
 93:       return response.data
 94:     }
 95:     logger.info('Nothing returned from database')
 96:     return null
 97:   }
 98: 
 99:   return {
100:     server: handleServerError,
101:     client: handleError,
102:   }
103: }
```

## File: layers/crud/composables/user.current.store.ts
```typescript
  1: import { useLogger } from '@ib/logger'
  2: 
  3: const DOMAIN_KEY = 'currentUser'
  4: 
  5: export const useCurrentUser = defineStore(DOMAIN_KEY, () => {
  6:   const authUrl = useRuntimeConfig().public.aeAuthUrl
  7:   const logger = useLogger(DOMAIN_KEY)
  8:   const errors = useBaseError()
  9:   const loading = useLoadingStore()
 10:   const { fetch } = useBaseFetch()
 11:   const userId = useCookie('userId')
 12:   const user = useSupabaseUser()
 13: 
 14:   // check:critical - user should only be able to fetch their own full profile
 15:   // check:critical - user should only be able to update their own profile
 16:   // todo:high - allow user to update their profile info
 17:   // todo:med - merge currentUser and profile into one, store all required data everything in their session
 18:   // assign Posthog identify
 19: 
 20:   console.log('user', user.value)
 21: 
 22:   const profile = computed(() => ({
 23:     id: user.value?.id,
 24:     given_name: user.value?.user_metadata?.given_name,
 25:     email_confirmed_at: user.value?.email_confirmed_at,
 26:     confirmation_sent_at: user.value?.confirmation_sent_at,
 27:     confirmed_at: user.value?.confirmed_at,
 28:     created_at: user.value?.created_at,
 29:     surname: user.value?.user_metadata?.surname,
 30:     last_sign_in_at: user.value?.last_sign_in_at,
 31:     email: user.value?.email,
 32:     providers: user.value?.app_metadata.providers,
 33:     avatar: user.value?.user_metadata.avatar ?? user.value?.user_metadata.avatar_url,
 34:     provider: user.value?.provider,
 35:     user_role: user.value?.app_metadata?.role,
 36:     user_plan: user.value?.app_metadata?.plan,
 37:   }))
 38: 
 39:   // extract as util func
 40:   function hasValueChanged(newValue: any, currentValue: any): boolean {
 41:     console.log('hasValueChanged', newValue, currentValue)
 42:     if (
 43:       typeof newValue === 'string' ||
 44:       typeof newValue === 'boolean' ||
 45:       typeof newValue === 'number'
 46:     ) {
 47:       return newValue !== currentValue
 48:     } else if (Array.isArray(newValue)) {
 49:       return JSON.stringify(newValue) !== JSON.stringify(currentValue)
 50:     } else if (typeof newValue === 'object' && newValue !== null) {
 51:       return JSON.stringify(newValue) !== JSON.stringify(currentValue)
 52:     } else {
 53:       return newValue !== currentValue
 54:     }
 55:   }
 56: 
 57:   function cleanDataForUpdate(newData: any, previousData: any) {
 58:     const updatedData: any = {}
 59:     for (const key in newData) {
 60:       if (
 61:         Object.hasOwnProperty.call(newData, key) &&
 62:         hasValueChanged(newData[key], previousData[key])
 63:       ) {
 64:         updatedData[key] = newData[key]
 65:       }
 66:     }
 67: 
 68:     return { data: updatedData, noDataUpdated: Object.keys(updatedData).length === 0 }
 69:   }
 70: 
 71:   async function updateProfile(newData: any, isMock: boolean = false) {
 72:     logger.info('Starting updateProfile function', { newData, isMock })
 73:     const updatedData: any = {}
 74: 
 75:     logger.debug('Cleaning data for update')
 76:     // Compare newData with fullProfile and only include changed values
 77:     const { noDataUpdated, data } = cleanDataForUpdate(newData, profile.value)
 78: 
 79:     if (noDataUpdated) {
 80:       logger.info('No changes detected, no update necessary')
 81:       return
 82:     }
 83: 
 84:     logger.debug('Changes detected', { changedData: data })
 85: 
 86:     try {
 87:       logger.info('Sending update request to server')
 88:       let response
 89:       if (isMock) {
 90:         logger.info('Using mock API call')
 91:         // response = await mockApiCall(data)
 92:       } else {
 93:         response = await $fetch('/api/users/update', {
 94:           method: 'POST',
 95:           body: JSON.stringify(data),
 96:         })
 97:       }
 98:       logger.debug('Received response from server', { response })
 99: 
100:       const validData = errors.server({
101:         response,
102:         devOnly: false,
103:         devMessage: 'Error updating user profile',
104:         userMessage: 'There was an error updating your profile after action',
105:       })
106: 
107:       logger.info('Successfully validated server response', { validData })
108: 
109:       // update state
110:       logger.debug('Updating user profile state')
111:       for (const key in validData[0]) {
112:         if (Object.hasOwnProperty.call(validData[0], key)) {
113:           logger.debug(`Updating profile field: ${key}`, {
114:             newValue: validData[0][key],
115:           })
116:         }
117:       }
118:       logger.info('Profile update completed successfully')
119:     } catch (error) {
120:       logger.error('Error occurred during profile update', { error })
121:       throw error // Re-throw the error for the caller to handle
122:     }
123:   }
124: 
125:   // Test function
126:   async function testUpdateProfile() {
127:     const testCases = [
128:       { name: 'John Doe', email: 'john@example.com' },
129:       { name: 'Jane Doe', email: 'error@example.com' }, // This will trigger an error
130:       {}, // This should result in no update
131:     ]
132: 
133:     for (const testCase of testCases) {
134:       try {
135:         console.log('Testing with data:', testCase)
136:         await updateProfile(testCase, true) // Use mock API
137:         console.log('Test passed successfully')
138:       } catch (error) {
139:         console.error('Test failed:', error.message)
140:       }
141:       console.log('---')
142:     }
143:   }
144: 
145:   type FileType = 'avatar'
146:   async function uploadImage(fileType: FileType, blob: Blob) {
147:     // currentFileName is the current file name in the database eg. avatar-drew-macgibbon.jpg
148:     const formData = new FormData()
149:     formData.append('file', blob)
150: 
151:     const response = await $fetch('/api/users/insert/image', {
152:       method: 'POST',
153:       body: formData,
154:       params: {
155:         fileType,
156:         userId: userId.value,
157:       },
158:     })
159: 
160:     console.log('fileName', response)
161: 
162:     const fileName = errors.server({
163:       response,
164:       devOnly: false,
165:       devMessage: `Error uploading ${fileType} image`,
166:       userMessage: `There was an error uploading your ${fileType}`,
167:     })
168: 
169:     let newData = {}
170: 
171:     console.log('fileName', fileName)
172: 
173:     if (fileType === 'avatar') {
174:       newData = {
175:         avatar: fileName,
176:       }
177:     }
178: 
179:     updateProfile(newData)
180:   }
181: 
182:   // first check if the user has an avatar in their profile
183:   // if not, check if the user has an avatar in their identities
184:   // cycle through identities check identities_data for picture
185: 
186:   return {
187:     haveUserSession: computed(() => !!profile.value),
188:     isAdmin: computed(
189:       () => profile.value?.user_role === 'admin' || profile.value?.user_role === 'super_admin',
190:     ),
191:     registeredWithProvider: computed(() => profile.value?.provider),
192:     profile,
193:     uploadImage,
194:     updateProfile,
195:     testUpdateProfile,
196:   }
197: })
198: 
199: if (import.meta.hot) {
200:   import.meta.hot.accept(acceptHMRUpdate(useCurrentUser, import.meta.hot))
201: }
```

## File: layers/crud/server/utils/base.interface.ts
```typescript
 1: type DBTable = keyof Database['public']['Tables'] & keyof Database['public']['Views']
 2: type DBColumns<T extends DBTable> = keyof Tables<T>
 3: type TableSpecificColumns<T extends DBTable> = Partial<DBColumns<T>>
 4: 
 5: // full list of filters here: https://postgrest.org/en/v12/references/api/tables_views.html#operators
 6: 
 7: type FilterKey =
 8:   | 'eq'
 9:   | 'match'
10:   | 'neq'
11:   | 'not'
12:   | 'gte'
13:   | 'gt'
14:   | 'lt'
15:   | 'lte'
16:   | 'like'
17:   | 'ilike'
18:   | 'is'
19:   | 'in'
20:   | 'contains'
21:   | 'containedBy'
22:   | 'rangeGt'
23:   | 'rangeGte'
24:   | 'rangeLt'
25:   | 'rangeLte'
26:   | 'rangeAdjacent'
27:   | 'overlaps'
28:   | 'textSearch'
29: 
30: interface Pagination {
31:   page?: number
32:   limit?: number
33:   from: number
34:   to: number
35: }
36: 
37: export type GenericReturn<T> = Promise<T[] | T | null>
38: 
39: export type TableKey = keyof Database['public']['Tables'] | keyof Database['public']['Views']
40: 
41: export type FilterBy<T extends DBTable> = {
42:   columnName: TableSpecificColumns<T>
43:   operator: FilterKey
44:   value: string | boolean | number
45: }
46: 
47: type OrderBy<T extends DBTable> = {
48:   columnNames: TableSpecificColumns<T>[]
49:   ascending: boolean
50:   referenceTable?: string
51: }
52: 
53: type Conflict = {
54:   onConflict: string[]
55:   ignoreDuplicates: boolean
56:   count?: 'exact' | 'planned' | 'estimated'
57:   defaultToNull?: boolean
58: }
59: 
60: // todo: refactor to have options under select/insert/update/delete
61: // for instance we can group limit, pagination, selectStatement all under select
62: export interface BaseOperationInput<T, K extends DBTable> {
63:   tableName: K
64:   data?: T | T[]
65:   selectStatement?: string
66:   filterBy?: FilterBy<K> | false
67:   orderBy?: OrderBy<K> | false
68:   pagination?: Pagination | false
69:   limit?: number
70:   isSingle?: boolean
71:   isReturned?: boolean
72:   conflict?: Conflict
73: }
74: 
75: export interface SelectInput<T, K extends DBTable> extends BaseOperationInput<T, K> {
76:   selectStatement: string
77: }
78: 
79: export interface InsertInput<T, K extends DBTable> extends BaseOperationInput<T, K> {
80:   data: T | T[]
81: }
82: 
83: export interface UpsertInput<T, K extends DBTable> extends BaseOperationInput<T, K> {
84:   data: T | T[]
85:   conflict: Conflict
86: }
87: 
88: export interface UpdateInput<T, K extends DBTable> extends BaseOperationInput<T, K> {
89:   data: T | T[]
90:   filterBy: FilterBy<K>
91: }
92: 
93: export interface DeleteInput<T, K extends DBTable> extends BaseOperationInput<T, K> {
94:   data: T | T[]
95:   filterBy: FilterBy<K>
96: }
97: 
98: export type { Database, Tables, DBTable }
```

## File: layers/crud/nuxt.config.ts
```typescript
 1: export default defineNuxtConfig({
 2:   modules: ['@nuxtjs/supabase'],
 3: 
 4:   supabase: {
 5:     redirect: false,
 6:     clientOptions: {
 7:       auth: {
 8:         flowType: 'pkce',
 9:         detectSessionInUrl: true,
10:         persistSession: true,
11:         autoRefreshToken: true,
12:       },
13:     },
14:     cookieName: 'sb',
15:   },
16: })
```

## File: libs/logger/src/environment.d.ts
```typescript
 1: // src/environment.d.ts
 2: 
 3: declare global {
 4:   // Add Nuxt runtime config types
 5:   interface RuntimeConfig {
 6:     public: {
 7:       nodeEnv?: string
 8:       [key: string]: any
 9:     }
10:     [key: string]: any
11:   }
12: 
13:   // Add useRuntimeConfig function type
14:   type UseRuntimeConfig = () => RuntimeConfig
15: 
16:   const useRuntimeConfig: UseRuntimeConfig | undefined
17: }
18: 
19: export interface ImportMetaEnv {
20:   MODE: string
21:   DEV: boolean
22:   PROD: boolean
23:   [key: string]: any
24: }
25: 
26: export interface ImportMeta {
27:   url: string
28:   env: ImportMetaEnv
29:   readonly hot?: {
30:     accept: () => void
31:     dispose: () => void
32:     invalidate: () => void
33:     [key: string]: any
34:   }
35: }
36: 
37: export {}
```

## File: libs/logger/src/environment.ts
```typescript
 1: // src/environment.ts
 2: export const getEnvironment = () => {
 3:   // Check for Node.js environment more safely
 4:   const isNode = (() => {
 5:     try {
 6:       return typeof globalThis.process !== 'undefined' && !!globalThis.process?.versions?.node
 7:     } catch {
 8:       return false
 9:     }
10:   })()
11: 
12:   // Check for browser environment
13:   const isBrowser = (() => {
14:     try {
15:       return typeof window !== 'undefined'
16:     } catch {
17:       return false
18:     }
19:   })()
20: 
21:   // Check for development mode across different environments
22:   const isDev = (() => {
23:     try {
24:       // For Nuxt specific environment
25:       if (typeof globalThis.useRuntimeConfig === 'function') {
26:         const config = globalThis.useRuntimeConfig()
27:         return config.public.nodeEnv === 'development'
28:       }
29: 
30:       // Fallback checks
31:       return Boolean(
32:         import.meta?.env?.DEV ||
33:           import.meta?.env?.MODE === 'development' ||
34:           (typeof process !== 'undefined' && process.env.NODE_ENV === 'development'),
35:       )
36:     } catch {
37:       return false
38:     }
39:   })()
40: 
41:   return {
42:     isNode,
43:     isBrowser,
44:     isDev,
45:   }
46: }
```

## File: libs/logger/src/error-interface.ts
```typescript
  1: export interface ErrorMessage {
  2:   userMessage: string // User-friendly error message if needed
  3:   devMessage: string // Make bugfixing easy!
  4:   error: any
  5: }
  6: 
  7: export interface ErrorServer extends Omit<ErrorMessage, 'error'> {
  8:   featureRelated?: boolean // default false - log to feature-specific log
  9:   response: { data: any; error: any }
 10: }
 11: 
 12: // Retryable status codes with descriptions
 13: export const retryableStatusCodes: { [key: number]: string } = {
 14:   408: 'Request Timeout - The server timed out waiting for the request.',
 15:   409: 'Conflict - The request could not be completed due to a conflict with the current state of the target resource.',
 16:   425: 'Too Early - The server is unwilling to risk processing a request that might be replayed.',
 17:   500: 'Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.',
 18:   502: 'Bad Gateway - The server, while acting as a gateway or proxy, received an invalid response from an inbound server.',
 19:   503: 'Service Unavailable - The server is currently unable to handle the request due to temporary overloading or maintenance of the server.',
 20:   504: 'Gateway Timeout - The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server.',
 21: }
 22: 
 23: export enum ErrorSeverity {
 24:   LOW = 'low',
 25:   MEDIUM = 'medium',
 26:   HIGH = 'high',
 27:   CRITICAL = 'critical',
 28: }
 29: 
 30: export enum ErrorType {
 31:   UPLOAD_ERROR = 'UPLOAD_ERROR',
 32:   CONNECTION_ERROR = 'CONNECTION_ERROR',
 33:   AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR',
 34:   UNIQUE_VIOLATION = 'UNIQUE_VIOLATION',
 35:   FOREIGN_KEY_VIOLATION = 'FOREIGN_KEY_VIOLATION',
 36:   NOT_NULL_VIOLATION = 'NOT_NULL_VIOLATION',
 37:   CONSTRAINT_ERROR = 'CONSTRAINT_ERROR',
 38:   UNDEFINED_TABLE = 'UNDEFINED_TABLE',
 39:   UNDEFINED_PARAMETER = 'UNDEFINED_PARAMETER',
 40:   SYNTAX_ERROR = 'SYNTAX_ERROR',
 41:   DUPLICATE_ALIAS = 'DUPLICATE_ALIAS',
 42:   UNDEFINED_COLUMN = 'UNDEFINED_COLUMN',
 43:   DATA_EXCEPTION = 'DATA_EXCEPTION',
 44:   SERIALIZATION_FAILURE = 'SERIALIZATION_FAILURE',
 45:   DEADLOCK_DETECTED = 'DEADLOCK_DETECTED',
 46:   INSUFFICIENT_RESOURCES = 'INSUFFICIENT_RESOURCES',
 47:   RATE_LIMIT_ERROR = 'RATE_LIMIT_ERROR',
 48:   SERVER_ERROR = 'SERVER_ERROR',
 49:   UNKNOWN_ERROR = 'UNKNOWN_ERROR',
 50:   VALIDATION_ERROR = 'VALIDATION_ERROR',
 51:   NOT_FOUND_ERROR = 'NOT_FOUND_ERROR',
 52:   NETWORK_ERROR = 'NETWORK_ERROR',
 53: }
 54: 
 55: // Types
 56: export interface ErrorDetails {
 57:   type: ErrorType
 58:   message: string
 59:   severity: ErrorSeverity
 60:   stack?: string
 61:   code?: string | number
 62:   context?: string
 63:   pgError?: string
 64:   operation?: string
 65:   originalError?: any
 66: }
 67: 
 68: export interface ErrorHandlerOptions {
 69:   context?: string
 70:   userMessage?: string
 71:   devMessage?: string
 72:   throwError?: boolean
 73: }
 74: 
 75: export interface FetchErrorResponse {
 76:   data?: any
 77:   error?: any
 78: }
 79: 
 80: export function mapErrorSeverity(error: any): ErrorSeverity {
 81:   if (error.status >= 500) return ErrorSeverity.CRITICAL
 82:   if (error.status === 429) return ErrorSeverity.HIGH
 83: 
 84:   // Connection errors are critical
 85:   if (error.code?.startsWith('08')) return ErrorSeverity.CRITICAL
 86: 
 87:   // Authentication errors are high severity
 88:   if (error.code?.startsWith('28')) return ErrorSeverity.HIGH
 89: 
 90:   // Constraint violations are high severity
 91:   if (error.code?.startsWith('23')) return ErrorSeverity.HIGH
 92: 
 93:   // Query errors are medium severity
 94:   if (error.code?.startsWith('42')) return ErrorSeverity.MEDIUM
 95: 
 96:   // Data exceptions are medium severity
 97:   if (error.code?.startsWith('22')) return ErrorSeverity.MEDIUM
 98: 
 99:   // Transaction errors are high severity
100:   if (error.code === '40001' || error.code === '40P01') return ErrorSeverity.HIGH
101: 
102:   // System errors are critical
103:   if (error.code?.startsWith('53')) return ErrorSeverity.CRITICAL
104: 
105:   // Default to medium severity for unknown errors
106:   return ErrorSeverity.MEDIUM
107: }
108: 
109: export function mapErrorType(error: any): ErrorType {
110:   // Connection errors
111:   if (
112:     error.code === '08000' ||
113:     error.code === '08003' ||
114:     error.code === '08006' ||
115:     error.code === '08001' ||
116:     error.code === '08004'
117:   ) {
118:     return ErrorType.CONNECTION_ERROR
119:   }
120: 
121:   // Authentication errors
122:   if (error.code === '28000' || error.code === '28P01') {
123:     return ErrorType.AUTHENTICATION_ERROR
124:   }
125: 
126:   // Constraint violations
127:   if (error.code === '23505') return ErrorType.UNIQUE_VIOLATION
128:   if (error.code === '23503') return ErrorType.FOREIGN_KEY_VIOLATION
129:   if (error.code === '23502') return ErrorType.NOT_NULL_VIOLATION
130:   if (error.code?.startsWith('23') && !['23505', '23503', '23502'].includes(error.code))
131:     return ErrorType.CONSTRAINT_ERROR
132: 
133:   // Query errors
134:   if (error.code === '42P01') return ErrorType.UNDEFINED_TABLE
135:   if (error.code === '42P02') return ErrorType.UNDEFINED_PARAMETER
136:   if (error.code === '42601') return ErrorType.SYNTAX_ERROR
137:   if (error.code === '42P07') return ErrorType.DUPLICATE_ALIAS
138:   if (error.code === '42703') return ErrorType.UNDEFINED_COLUMN
139: 
140:   // Data errors
141:   if (error.code?.startsWith('22')) return ErrorType.DATA_EXCEPTION
142: 
143:   // Transaction errors
144:   if (error.code === '40001') return ErrorType.SERIALIZATION_FAILURE
145:   if (error.code === '40P01') return ErrorType.DEADLOCK_DETECTED
146: 
147:   // System errors
148:   if (
149:     error.code === '53000' ||
150:     error.code === '53100' ||
151:     error.code === '53200' ||
152:     error.code === '53300'
153:   ) {
154:     return ErrorType.INSUFFICIENT_RESOURCES
155:   }
156: 
157:   // HTTP-specific errors
158:   if (error.status === 429) return ErrorType.RATE_LIMIT_ERROR
159:   if (error.status >= 500) return ErrorType.SERVER_ERROR
160: 
161:   // Catch-all for unspecified errors
162:   return ErrorType.UNKNOWN_ERROR
163: }
164: 
165: export interface LogLevels {
166:   error: 0
167:   warn: 1
168:   info: 2
169:   http: 3
170:   verbose: 4
171:   debug: 5
172:   silly: 6
173: }
174: 
175: export class AppError extends Error {
176:   details: ErrorDetails
177: 
178:   constructor(details: ErrorDetails) {
179:     super(details.message)
180:     this.details = details
181:     this.name = 'AppError'
182:   }
183: }
184: 
185: export interface Logger {
186:   error: (message: string, ...args: any[]) => void
187:   warn: (message: string, ...args: any[]) => void
188:   info: (message: string, ...args: any[]) => void
189:   verbose: (message: string, ...args: any[]) => void
190:   debug: (message: string, ...args: any[]) => void
191:   silly: (message: string, ...args: any[]) => void
192:   http: (message: string, ...args: any[]) => void
193: }
```

## File: libs/logger/src/handler.ts
```typescript
  1: // utils/error-handler.ts
  2: import { createLogger } from './logger'
  3: import { getEnvironment } from './environment'
  4: import {
  5:   ErrorType,
  6:   ErrorSeverity,
  7:   AppError,
  8:   mapErrorType,
  9:   mapErrorSeverity,
 10:   retryableStatusCodes,
 11:   type ErrorHandlerOptions,
 12:   type FetchErrorResponse,
 13: } from './error-interface'
 14: 
 15: export class ErrorHandler {
 16:   private logger
 17:   private env = getEnvironment()
 18: 
 19:   constructor(private context = 'ErrorHandler') {
 20:     this.logger = createLogger(context)
 21:   }
 22: 
 23:   private determineErrorType(error: any): ErrorType {
 24:     if (error instanceof AppError) return error.details.type
 25:     return mapErrorType(error)
 26:   }
 27: 
 28:   private determineSeverity(error: any): ErrorSeverity {
 29:     if (error instanceof AppError) return error.details.severity
 30:     return mapErrorSeverity(error)
 31:   }
 32: 
 33:   private formatErrorMessage(options: {
 34:     userMessage?: string
 35:     devMessage: string
 36:     error: any
 37:   }): string {
 38:     const { userMessage, devMessage, error } = options
 39:     const devError = `${devMessage}: ${JSON.stringify(error)}`
 40:     this.logger.error(devError)
 41:     return this.env.isDev ? devError : userMessage || 'An unexpected error occurred'
 42:   }
 43: 
 44:   private normalizeError(error: Error | AppError, context?: string): AppError {
 45:     if (error instanceof AppError) {
 46:       return error
 47:     }
 48: 
 49:     const errorType = this.determineErrorType(error)
 50:     const severity = this.determineSeverity(error)
 51: 
 52:     return new AppError({
 53:       type: errorType,
 54:       message: error.message,
 55:       severity,
 56:       stack: error.stack,
 57:       context,
 58:       code: (error as any).code,
 59:       pgError: (error as any).details || (error as any).hint,
 60:       operation: context,
 61:       originalError: error,
 62:     })
 63:   }
 64: 
 65:   private getErrorStatusCode(errorType: ErrorType): number {
 66:     switch (errorType) {
 67:       case ErrorType.AUTHENTICATION_ERROR:
 68:         return 401
 69:       case ErrorType.VALIDATION_ERROR:
 70:         return 400
 71:       case ErrorType.NOT_FOUND_ERROR:
 72:         return 404
 73:       case ErrorType.RATE_LIMIT_ERROR:
 74:         return 429
 75:       case ErrorType.CONSTRAINT_ERROR:
 76:       case ErrorType.UNIQUE_VIOLATION:
 77:       case ErrorType.FOREIGN_KEY_VIOLATION:
 78:         return 409
 79:       default:
 80:         return 500
 81:     }
 82:   }
 83: 
 84:   handleError(error: Error | AppError, options: ErrorHandlerOptions = {}) {
 85:     const appError = this.normalizeError(error, options.context)
 86: 
 87:     this.logger.error(`${appError.details.type}: ${appError.message}`, {
 88:       ...appError.details,
 89:       stack: this.env.isDev ? appError.stack : undefined,
 90:     })
 91: 
 92:     // Handle server-side errors
 93:     if (this.env.isNode) {
 94:       const errorMessage = this.formatErrorMessage({
 95:         userMessage: options.userMessage || appError.message,
 96:         devMessage: options.devMessage || appError.details.type,
 97:         error: appError,
 98:       })
 99: 
100:       if (options.throwError) {
101:         const serverError = new Error()
102:         serverError.message = `SERVER ERROR: ${errorMessage}`
103:         ;(serverError as any).statusCode = this.getErrorStatusCode(appError.details.type)
104:         ;(serverError as any).statusMessage = appError.message
105:         ;(serverError as any).data = {
106:           error: {
107:             type: appError.details.type,
108:             message: appError.message,
109:             severity: appError.details.severity,
110:             details: this.env.isDev ? appError.details : undefined,
111:           },
112:         }
113:         throw serverError
114:       }
115:     }
116: 
117:     // Handle critical errors
118:     if (appError.details.severity === ErrorSeverity.CRITICAL) {
119:       // Add critical error handling logic
120:       this.handleCriticalError(appError)
121:     }
122: 
123:     return appError
124:   }
125: 
126:   handleFetchError({
127:     response,
128:     devMessage,
129:     userMessage,
130:   }: {
131:     response: FetchErrorResponse
132:     devMessage: string
133:     userMessage?: string
134:   }) {
135:     if (response.error) {
136:       this.logger.error(`FETCH Error: ${response.error}`)
137:       return this.handleError(response.error, { userMessage, devMessage })
138:     }
139: 
140:     if (response.data) {
141:       this.logger.info(
142:         `Successfully fetched ${Array.isArray(response.data) ? response.data.length : 1} items`,
143:       )
144:       return response.data
145:     }
146: 
147:     this.logger.info('Nothing returned from fetch')
148:     return this.handleError(new Error('No data found'), {
149:       userMessage: 'Resource not found',
150:       devMessage: 'Fetch returned empty response',
151:     })
152:   }
153: 
154:   handleDBError(response: FetchErrorResponse, context: string) {
155:     if (response.error) {
156:       return this.handleError(response.error, {
157:         context,
158:         devMessage: `Database error in ${context}`,
159:         userMessage: 'Database operation failed',
160:       })
161:     }
162:     return response.data
163:   }
164: 
165:   private handleCriticalError(error: AppError) {
166:     // Implement critical error handling
167:     this.logger.error('CRITICAL ERROR:', error.details)
168:     // Could trigger alerts, notifications, etc.
169:   }
170: }
171: 
172: // Factory function
173: export function createErrorHandler(context = 'ErrorHandler') {
174:   const handler = new ErrorHandler(context)
175: 
176:   return {
177:     handleError: handler.handleError.bind(handler),
178:     handleFetchError: handler.handleFetchError.bind(handler),
179:     handleDBError: handler.handleDBError.bind(handler),
180:   }
181: }
182: 
183: // Convenience function for framework integration
184: export const useErrorHandler = (context = 'ErrorHandler') => {
185:   return createErrorHandler(context)
186: }
```

## File: libs/logger/src/logger.ts
```typescript
  1: // utils/logger.ts
  2: import { createConsola } from 'consola'
  3: import type { ConsolaInstance } from 'consola'
  4: import type { Logger, LogLevels } from './error-interface'
  5: import { getEnvironment } from './environment'
  6: 
  7: export class BaseLogger implements Logger {
  8:   protected logger: ConsolaInstance | Logger
  9:   protected env = getEnvironment()
 10: 
 11:   constructor(tag = '') {
 12:     this.logger = createConsola({
 13:       level: this.env.isDev ? 10 : 3,
 14:       formatOptions: {
 15:         date: this.env.isNode,
 16:         colors: true,
 17:       },
 18:     }).withTag(tag.toUpperCase())
 19:   }
 20: 
 21:   error(message: string, ...args: any[]) {
 22:     this.logger.error(message, ...args)
 23:   }
 24: 
 25:   warn(message: string, ...args: any[]) {
 26:     this.logger.warn(message, ...args)
 27:   }
 28: 
 29:   info(message: string, ...args: any[]) {
 30:     this.logger.info(message, ...args)
 31:   }
 32: 
 33:   verbose(message: string, ...args: any[]) {
 34:     if (this.env.isDev) {
 35:       this.logger.verbose(message, ...args)
 36:     }
 37:   }
 38: 
 39:   debug(message: string, ...args: any[]) {
 40:     if (this.env.isDev) {
 41:       this.logger.debug(message, ...args)
 42:     }
 43:   }
 44: 
 45:   silly(message: string, ...args: any[]) {
 46:     if (this.env.isDev) {
 47:       this.logger.info(message, ...args)
 48:     }
 49:   }
 50: 
 51:   http(message: string, ...args: any[]) {
 52:     this.logger.info(message, ...args)
 53:   }
 54: }
 55: 
 56: let winstonPackage: typeof import('winston') | undefined = undefined
 57: 
 58: export class NodeLogger extends BaseLogger {
 59:   private winstonLogger: any
 60: 
 61:   constructor(tag = '') {
 62:     super(tag)
 63: 
 64:     if (this.env.isNode) {
 65:       this.initWinston(tag).catch((err) => {
 66:         this.logger.error('Failed to initialize Winston:', err)
 67:       })
 68:     }
 69:   }
 70: 
 71:   private async initWinston(tag: string) {
 72:     try {
 73:       if (!winstonPackage) {
 74:         winstonPackage = await import('winston')
 75:       }
 76: 
 77:       const format = winstonPackage.format.combine(
 78:         winstonPackage.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss:ms' }),
 79:         winstonPackage.format.cli(),
 80:         winstonPackage.format.printf(
 81:           (info) => `${info['timestamp']} ${info.level}: [${tag}] ${info.message}`,
 82:         ),
 83:       )
 84: 
 85:       this.winstonLogger = winstonPackage.createLogger({
 86:         levels: {
 87:           error: 0,
 88:           warn: 1,
 89:           info: 2,
 90:           http: 3,
 91:           verbose: 4,
 92:           debug: 5,
 93:           silly: 6,
 94:         },
 95:         level: this.env.isDev ? 'silly' : 'info',
 96:         format,
 97:         transports: [
 98:           new winstonPackage.transports.Console(),
 99:           ...(this.env.isDev
100:             ? []
101:             : [
102:                 new winstonPackage.transports.File({
103:                   filename: './data/logs/error.log',
104:                   level: 'error',
105:                 }),
106:                 new winstonPackage.transports.File({
107:                   filename: './data/logs/combined.log',
108:                 }),
109:               ]),
110:         ],
111:       })
112:     } catch (err) {
113:       this.logger.warn('Winston not available, falling back to console logger')
114:     }
115:   }
116: 
117:   override error(message: string, ...args: any[]) {
118:     if (this.winstonLogger) {
119:       this.winstonLogger.error(message, ...args)
120:     } else {
121:       super.error(message, ...args)
122:     }
123:   }
124: 
125:   override warn(message: string, ...args: any[]) {
126:     if (this.winstonLogger) {
127:       this.winstonLogger.warn(message, ...args)
128:     } else {
129:       super.warn(message, ...args)
130:     }
131:   }
132: 
133:   override info(message: string, ...args: any[]) {
134:     if (this.winstonLogger) {
135:       this.winstonLogger.info(message, ...args)
136:     } else {
137:       super.info(message, ...args)
138:     }
139:   }
140: 
141:   override verbose(message: string, ...args: any[]) {
142:     if (this.winstonLogger && this.env.isDev) {
143:       this.winstonLogger.verbose(message, ...args)
144:     } else {
145:       super.verbose(message, ...args)
146:     }
147:   }
148: 
149:   override debug(message: string, ...args: any[]) {
150:     if (this.winstonLogger && this.env.isDev) {
151:       this.winstonLogger.debug(message, ...args)
152:     } else {
153:       super.debug(message, ...args)
154:     }
155:   }
156: 
157:   override silly(message: string, ...args: any[]) {
158:     if (this.winstonLogger && this.env.isDev) {
159:       this.winstonLogger.silly(message, ...args)
160:     } else {
161:       super.silly(message, ...args)
162:     }
163:   }
164: 
165:   override http(message: string, ...args: any[]) {
166:     if (this.winstonLogger) {
167:       this.winstonLogger.http(message, ...args)
168:     } else {
169:       super.http(message, ...args)
170:     }
171:   }
172: }
173: 
174: // Factory function to create the appropriate logger
175: export const createLogger = (tag = '') => {
176:   const env = getEnvironment()
177:   return env.isNode ? new NodeLogger(tag) : new BaseLogger(tag)
178: }
179: 
180: // Async version for when we want to ensure Winston is loaded
181: export const createLoggerAsync = async (tag = '') => {
182:   const logger = createLogger(tag)
183:   if (logger instanceof NodeLogger) {
184:     // Wait for Winston to initialize if needed
185:     await new Promise((resolve) => setTimeout(resolve, 100))
186:   }
187:   return logger
188: }
189: 
190: // Framework-specific wrappers if needed
191: export const useLogger = (tag = '') => {
192:   return createLogger(tag)
193: }
194: 
195: export const useLoggerAsync = async (tag = '') => {
196:   return await createLoggerAsync(tag)
197: }
```

## File: libs/logger/index.d.ts
```typescript
1: import type { Consola } from 'consola'
2: 
3: export * from './src/environment.d'
4: 
5: export function useLogger(tag?: string): Consola
```

## File: libs/logger/index.ts
```typescript
1: export * from './src/logger'
2: export * from './src/handler'
3: export * from './src/error-interface'
```

## File: shared-runtime.config.ts
```typescript
 1: import { config } from 'dotenv'
 2: 
 3: config()
 4: 
 5: export default defineNuxtConfig({
 6:   runtimeConfig: {
 7:     public: {
 8:       strapiUrl: process.env.NUXT_PUBLIC_STRAPI_URL,
 9:       formbricksEnvironment: process.env.NUXT_PUBLIC_FORMBRICKS_ENVIRONMENT,
10:       formbricksHost: process.env.NUXT_PUBLIC_FORMBRICKS_HOST,
11:       supabaseUrl: process.env.NUXT_PUBLIC_SUPABASE_URL,
12:       supabaseKey: process.env.NUXT_PUBLIC_SUPABASE_KEY,
13:       aeAuthUrl: process.env.NUXT_PUBLIC_AE_AUTH_URL,
14:       aeLoginUrl: process.env.NUXT_PUBLIC_AE_LOGIN_URL,
15:       aeAppUrl: process.env.NUXT_PUBLIC_AE_APP_URL,
16:       aeAdminUrl: process.env.NUXT_PUBLIC_AE_ADMIN_URL,
17:       aeMonitoringUrl: process.env.NUXT_PUBLIC_AE_MONITORING_URL,
18:       aeWebsiteUrl: process.env.NUXT_PUBLIC_AE_WEBSITE_URL,
19:       nodeEnv: process.env.NUXT_PUBLIC_NODE_ENV,
20:       logLevel: process.env.NUXT_PUBLIC_LOG_LEVEL,
21:       posthogKey: process.env.NUXT_PUBLIC_POSTHOG_KEY,
22:       posthogUrl: process.env.NUXT_PUBLIC_POSTHOG_URL,
23:       studioTokens: process.env.NUXT_PUBLIC_STUDIO_TOKENS,
24:       scraperUrl: process.env.NUXT_PUBLIC_SCRAPER_URL,
25:       devHelper: {
26:         enabled: true,
27:         features: {
28:           networkErrorClassifier: true,
29:           infiniteLoopDetector: true,
30:           unhandledPromiseRejectionTracker: true,
31:           environmentConsistencyChecker: true,
32:         },
33:       },
34:     },
35:     strapiUrl: process.env.NUXT_STRAPI_URL,
36:     supabaseServiceKey: process.env.NUXT_SUPABASE_SERVICE_KEY,
37:     googleApiKey: process.env.NUXT_GOOGLE_API_KEY,
38:     nasaApiKey: process.env.NUXT_NASA_API_KEY,
39:     openaiApiKey: process.env.NUXT_OPENAI_API_KEY,
40:     openaiOrg: process.env.NUXT_OPENAI_ORG,
41:     redisFlushKey: process.env.NUXT_REDIS_FLUSH_KEY,
42:     scraperKey: process.env.NUXT_SCRAPER_KEY,
43:     razorpayKey: process.env.NUXT_RAZORPAY_KEY,
44:     razorpaySecret: process.env.NUXT_RAZORPAY_SECRET,
45:     razorpayTestKey: process.env.NUXT_RAZORPAY_TEST_KEY,
46:     razorpayTestSecret: process.env.NUXT_RAZORPAY_TEST_SECRET,
47:   },
48: })
```
