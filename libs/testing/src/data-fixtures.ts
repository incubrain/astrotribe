// testing/src/data-fixtures.ts

import type { InboundTableSchema, OutboundTableSchema } from './schemas'

// User Profiles
const userProfiles: InboundTableSchema<'user_profiles'>[] = [
  {
    id: 'e1bf12c6-aad4-4905-bda2-127c027504a3',
    email: 'shwetakk6@gmail.com',
    given_name: 'Shweta',
    surname: 'Kulkarni',
    username: 'Shweta',
    dob: '1995-11-16',
    gender_id: 2,
    created_at: '2023-08-11 16:49:09.163+00',
    updated_at: '2023-08-11 16:49:09.163+00',
    last_seen: '2023-08-11 16:49:09.163+00',
    avatar: 'shweta-kulkarni.jpg',
    followed_count: 1,
    followers_count: 1,
    plan: 'free',
    role: 'user',
  },
  {
    id: 'e8976b16-02a9-4595-a8a9-6457548eec12',
    email: 'drewmacgibbon@gmail.com',
    given_name: 'Drew',
    surname: 'MacGibbon',
    username: 'Mac',
    dob: '1993-05-02',
    gender_id: 1,
    created_at: '2023-08-11 16:49:09.163+00',
    updated_at: '2023-08-11 16:49:09.163+00',
    last_seen: '2023-08-11 16:49:09.163+00',
    avatar: 'drew-macgibbon.jpg',
    followed_count: 3,
    followers_count: 4,
    plan: 'free',
    role: 'user',
  },
]

// Categories
const categoriesData: InboundTableSchema<'categories'>[] = [
  {
    name: 'Technology',
    // Other fields as needed
  },
  {
    name: 'Science',
    // Other fields as needed
  },
]

// Contents
// IDs are generated by the database; we'll capture them during insertion.
const contentsData: Omit<InboundTableSchema<'contents'>, 'id'>[] = [
  {
    content_type: 'news',
    url: 'http://example.com/news/sample-news-article',
    title: 'Sample News Article',
  },
  {
    content_type: 'research',
    url: 'http://example.com/research/sample-research-paper',
    title: 'Sample Research Paper',
  },
]

// News Data Template
const newsDataTemplate: Omit<InboundTableSchema<'news'>, 'id' | 'content_id'> = {
  title: 'Breaking News: Sample News Article',
  url: 'http://example.com/news/sample-news-article',
  body: 'This is the body of the sample news article.',
  author: 'Jane Doe',
  // Add other required fields
}

// Research Data Template
const researchDataTemplate: Omit<InboundTableSchema<'research'>, 'id' | 'content_id'> = {
  title: 'Research on Sample Topic',
  abstract: 'This is a sample abstract for the research paper.',
  authors: ['Dr. Alice', 'Dr. Bob'],
  category: 'Science',
  // Add other required fields
}

// Functions to create data with content IDs
const createNewsData = (contentId: string, categoryId: number): InboundTableSchema<'news'> => ({
  id: contentId,
  category_id: categoryId,
  ...newsDataTemplate,
})

const createResearchData = (contentId: string): InboundTableSchema<'research'> => ({
  id: contentId,
  abstract_url: 'http://example.com/research/sample-research-paper',
  ...researchDataTemplate,
})

// Bookmarks
const createBookmarkData = (
  userId: string,
  contentId: string,
  contentType: 'news' | 'research',
): InboundTableSchema<'bookmarks'> => ({
  user_id: userId,
  content_id: contentId,
  content_type: contentType,
  // Other fields as needed
})

// Comments
const createCommentData = (
  userId: string,
  contentId: string,
  contentType: 'news' | 'research',
): InboundTableSchema<'comments'> => ({
  user_id: userId,
  content_id: contentId,
  content_type: contentType,
  content: 'This is a sample comment.',
  // Other fields as needed
})

// Tags
const tagsData: InboundTableSchema<'tags'>[] = [
  {
    id: 1,
    name: 'SampleTag',
    // Other fields as needed
  },
]

// Content Tags
const createContentTagData = (
  contentId: string,
  tagId: number,
): InboundTableSchema<'content_tags'> => ({
  content_id: contentId,
  tag_id: tagId,
})

// Additional Data for Other Tables
// You can define similar patterns for other tables that need initial data.

// Example for `follows` table
const createFollowData = (userId: string, followedId: string): InboundTableSchema<'follows'> => ({
  user_id: userId,
  followed_id: followedId,
  followed_entity: 'user',
  // Other fields as needed
})

// Example for `votes` table
const createVoteData = (
  userId: string,
  contentId: string,
  contentType: 'news' | 'research',
  voteType: number,
): InboundTableSchema<'votes'> => ({
  user_id: userId,
  content_id: contentId,
  content_type: contentType,
  vote_type: voteType,
  // created_at will be set by the database
})

// Example for `feedbacks` table
const feedbacksData: Omit<InboundTableSchema<'feedbacks'>, 'id'>[] = [
  {
    user_id: 'e8976b16-02a9-4595-a8a9-6457548eec12',
    page_identifier: 'home_page',
    feedback_type: 'bug_report',
    message: 'Found a bug on the homepage.',
    // Other fields as needed
  },
]

// If there are any tables that require specific IDs or relationships, define functions or templates accordingly.

// Summary of insertion order based on dependencies:
// 1. user_profiles
// 2. categories
// 3. contents
// 4. news/research (dependent on contents)
// 5. tags
// 6. content_tags (dependent on contents and tags)
// 7. bookmarks (dependent on user_profiles and contents)
// 8. comments (dependent on user_profiles and contents)
// 9. follows/user_followers (dependent on user_profiles)
// 10. votes (dependent on user_profiles and contents)
// 11. feedbacks (dependent on user_profiles)

// Export all data and functions
export {
  userProfiles,
  categoriesData,
  contentsData,
  createNewsData,
  createResearchData,
  tagsData,
  createContentTagData,
  createBookmarkData,
  createCommentData,
  createFollowData,
  createVoteData,
  feedbacksData,
}
