create sequence "public"."responses_id_seq";

create sequence "public"."searches_id_seq";

drop index if exists "public"."categories_title_key";

drop index if exists "public"."tags_name_key";

create table "public"."responses" (
    "id" bigint generated by default as identity not null,
    "search_id" bigint not null,
    "output" text not null,
    "upvotes" integer default 0,
    "downvotes" integer default 0,
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP
);


alter table "public"."responses" enable row level security;

create table "public"."searches" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid,
    "input" text not null,
    "created_at" timestamp with time zone default CURRENT_TIMESTAMP
);


alter table "public"."countries" add column "code" character varying(2) not null;

alter table "public"."searches" enable row level security;

alter table "public"."categories" drop column "title";

alter table "public"."categories" add column "name" character varying(255) not null;

alter table "public"."categories" add column "updated_at" timestamp with time zone default now();

alter table "public"."tags" drop column "title";

alter table "public"."tags" add column "name" text not null;

alter sequence "public"."responses_id_seq" owned by "public"."responses"."id";

alter sequence "public"."searches_id_seq" owned by "public"."searches"."id";

CREATE UNIQUE INDEX responses_id_key ON public.responses USING btree (id);

CREATE UNIQUE INDEX responses_pkey ON public.responses USING btree (id);

CREATE UNIQUE INDEX searches_pkey ON public.searches USING btree (id);

CREATE UNIQUE INDEX categories_title_key ON public.categories USING btree (name);

CREATE UNIQUE INDEX tags_name_key ON public.tags USING btree (name);

alter table "public"."responses" add constraint "responses_pkey" PRIMARY KEY using index "responses_pkey";

alter table "public"."searches" add constraint "searches_pkey" PRIMARY KEY using index "searches_pkey";

alter table "public"."responses" add constraint "responses_id_key" UNIQUE using index "responses_id_key";

alter table "public"."responses" add constraint "responses_search_id_fkey" FOREIGN KEY (search_id) REFERENCES searches(id) not valid;

alter table "public"."responses" validate constraint "responses_search_id_fkey";

alter table "public"."searches" add constraint "searches_user_id_fkey" FOREIGN KEY (user_id) REFERENCES user_profiles(id) not valid;

alter table "public"."searches" validate constraint "searches_user_id_fkey";

grant delete on table "public"."responses" to "anon";

grant insert on table "public"."responses" to "anon";

grant references on table "public"."responses" to "anon";

grant select on table "public"."responses" to "anon";

grant trigger on table "public"."responses" to "anon";

grant truncate on table "public"."responses" to "anon";

grant update on table "public"."responses" to "anon";

grant delete on table "public"."responses" to "authenticated";

grant insert on table "public"."responses" to "authenticated";

grant references on table "public"."responses" to "authenticated";

grant select on table "public"."responses" to "authenticated";

grant trigger on table "public"."responses" to "authenticated";

grant truncate on table "public"."responses" to "authenticated";

grant update on table "public"."responses" to "authenticated";

grant delete on table "public"."responses" to "service_role";

grant insert on table "public"."responses" to "service_role";

grant references on table "public"."responses" to "service_role";

grant select on table "public"."responses" to "service_role";

grant trigger on table "public"."responses" to "service_role";

grant truncate on table "public"."responses" to "service_role";

grant update on table "public"."responses" to "service_role";

grant delete on table "public"."searches" to "anon";

grant insert on table "public"."searches" to "anon";

grant references on table "public"."searches" to "anon";

grant select on table "public"."searches" to "anon";

grant trigger on table "public"."searches" to "anon";

grant truncate on table "public"."searches" to "anon";

grant update on table "public"."searches" to "anon";

grant delete on table "public"."searches" to "authenticated";

grant insert on table "public"."searches" to "authenticated";

grant references on table "public"."searches" to "authenticated";

grant select on table "public"."searches" to "authenticated";

grant trigger on table "public"."searches" to "authenticated";

grant truncate on table "public"."searches" to "authenticated";

grant update on table "public"."searches" to "authenticated";

grant delete on table "public"."searches" to "service_role";

grant insert on table "public"."searches" to "service_role";

grant references on table "public"."searches" to "service_role";

grant select on table "public"."searches" to "service_role";

grant trigger on table "public"."searches" to "service_role";

grant truncate on table "public"."searches" to "service_role";

grant update on table "public"."searches" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."responses"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."responses"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."searches"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."searches"
as permissive
for select
to public
using (true);



