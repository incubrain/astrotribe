create sequence "public"."strapi_migrations_id_seq";

create sequence "public"."strapi_migrations_internal_id_seq";

create table "public"."feed_categories" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "feed_id" uuid,
    "category_id" bigint
);


create table "public"."feeds" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "user_id" uuid
);


create table "public"."strapi_migrations" (
    "id" integer not null default nextval('public.strapi_migrations_id_seq'::regclass),
    "name" character varying(255),
    "time" timestamp without time zone
);


create table "public"."strapi_migrations_internal" (
    "id" integer not null default nextval('public.strapi_migrations_internal_id_seq'::regclass),
    "name" character varying(255),
    "time" timestamp without time zone
);


alter table "public"."categories" add column "document_id" character varying(255);

alter table "public"."categories" add column "locale" character varying(255);

alter table "public"."categories" add column "published_at" character varying(255);

alter table "public"."companies" alter column "id" drop default;

alter table "public"."companies" alter column "url" set data type text using "url"::text;

alter table "public"."content_sources" add column "rss_urls" text[];

alter table "public"."contents" add column "rss_url" text;

alter table "public"."role_permissions" add column "select" boolean not null default false;

alter table "public"."role_permissions" add column "update" boolean not null default false;

alter table "public"."tags" add column "document_id" character varying(255);

alter table "public"."tags" add column "locale" character varying(255);

alter table "public"."tags" add column "published_at" character varying(255);

alter sequence "public"."strapi_migrations_id_seq" owned by "public"."strapi_migrations"."id";

alter sequence "public"."strapi_migrations_internal_id_seq" owned by "public"."strapi_migrations_internal"."id";

CREATE UNIQUE INDEX feed_categories_pkey ON public.feed_categories USING btree (id);

CREATE UNIQUE INDEX feeds_pkey ON public.feeds USING btree (id);

CREATE UNIQUE INDEX strapi_migrations_internal_pkey ON public.strapi_migrations_internal USING btree (id);

CREATE UNIQUE INDEX strapi_migrations_pkey ON public.strapi_migrations USING btree (id);

alter table "public"."feed_categories" add constraint "feed_categories_pkey" PRIMARY KEY using index "feed_categories_pkey";

alter table "public"."feeds" add constraint "feeds_pkey" PRIMARY KEY using index "feeds_pkey";

alter table "public"."strapi_migrations" add constraint "strapi_migrations_pkey" PRIMARY KEY using index "strapi_migrations_pkey";

alter table "public"."strapi_migrations_internal" add constraint "strapi_migrations_internal_pkey" PRIMARY KEY using index "strapi_migrations_internal_pkey";

alter table "public"."feed_categories" add constraint "feed_categories_category_id_fkey" FOREIGN KEY (category_id) REFERENCES public.categories(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."feed_categories" validate constraint "feed_categories_category_id_fkey";

alter table "public"."feed_categories" add constraint "feed_categories_feed_id_fkey" FOREIGN KEY (feed_id) REFERENCES public.feeds(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."feed_categories" validate constraint "feed_categories_feed_id_fkey";

alter table "public"."feeds" add constraint "feeds_user_id_fkey" FOREIGN KEY (user_id) REFERENCES public.user_profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."feeds" validate constraint "feeds_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_user_profile()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$DECLARE
  _username TEXT;
  _given_name TEXT;
  _surname TEXT;
  _avatar TEXT;
BEGIN
  -- Assign username from different potential keys
  _username := COALESCE(
    NEW.raw_user_meta_data ->> 'preferred_username',  -- Used by Twitter, Google, etc.
    NEW.raw_user_meta_data ->> 'user_name',           -- Alternate Twitter key
    NEW.raw_user_meta_data ->> 'nickname',             -- Possible key for other providers
    LOWER(CONCAT(NEW.raw_user_meta_data ->> 'given_name', '_', NEW.raw_user_meta_data ->> 'given_name')) -- email signup
  );

  -- Extract the given name (first name) from different keys
  _given_name := COALESCE(
    NEW.raw_user_meta_data ->> 'given_name',          -- Common key used by Google / email signup
    NEW.raw_user_meta_data ->> 'first_name',          -- Common key used by Facebook, LinkedIn
    (string_to_array(NEW.raw_user_meta_data ->> 'name', ' '))[1]  -- First element from 'name'
  );

  -- Extract the surname (last name) from different keys
  _surname := COALESCE(
    NEW.raw_user_meta_data ->> 'family_name',         -- Common key used by Google
    NEW.raw_user_meta_data ->> 'last_name',           -- Common key used by Facebook, LinkedIn
    NEW.raw_user_meta_data ->> 'surname',           -- email signup
    (string_to_array(NEW.raw_user_meta_data ->> 'name', ' '))[2]  -- Second element from 'name'
  );

  -- Assign avatar URL from different potential keys
  _avatar := COALESCE(
    NEW.raw_user_meta_data ->> 'avatar_url',          -- Used by Twitter
    NEW.raw_user_meta_data ->> 'picture',             -- Common key used by Google, Facebook
    NEW.raw_user_meta_data ->> 'image_url'            -- Possible key for other providers
  );

  -- Insert a new profile record using the new user's ID and email, along with extracted metadata.
  INSERT INTO public.user_profiles (id, email, username, given_name, surname, avatar)
  VALUES (
    NEW.id,
    NEW.email,
    _username,
    _given_name,
    _surname,
    _avatar
  );

  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.match_research(query_embedding public.vector, match_threshold double precision, match_count integer)
 RETURNS SETOF public.research_embeddings
 LANGUAGE sql
AS $function$
  select *
  from public.research_embeddings
  where research_embeddings.embedding <=> query_embedding < 1 - match_threshold
  order by research_embeddings.embedding <=> query_embedding asc
  limit least(match_count, 200);
$function$
;

CREATE OR REPLACE FUNCTION public.update_updated_at_column()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.users_columns_updateable()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
    current_user_role public.app_role_enum;
BEGIN
    -- Example of fetching current user's role from JWT; adjust based on your setup
    current_user_role := (auth.jwt() ->> 'user_role')::public.app_role_enum;

    RAISE LOG 'users_columns_updateable: user with role % attempted to change role or plan', current_user_role;

    -- Allow admins, super_admins, or service_role to change roles and plans
    IF current_user_role IN ('admin', 'super_admin') OR (auth.jwt() ->> 'role') = 'service_role' THEN
        RETURN NEW;
    END IF;

    -- Prevent non-admin users from changing roles and plans
    IF NEW.role IS DISTINCT FROM OLD.role THEN
        RAISE EXCEPTION 'Changing "role" is not allowed.';
    END IF;
    IF NEW.plan IS DISTINCT FROM OLD.plan THEN
        RAISE EXCEPTION 'Changing "plan" is not allowed.';
    END IF;

    RETURN NEW; -- Return the updated row to allow the update to proceed
END;
$function$
;

grant delete on table "public"."feed_categories" to "anon";

grant insert on table "public"."feed_categories" to "anon";

grant references on table "public"."feed_categories" to "anon";

grant select on table "public"."feed_categories" to "anon";

grant trigger on table "public"."feed_categories" to "anon";

grant truncate on table "public"."feed_categories" to "anon";

grant update on table "public"."feed_categories" to "anon";

grant delete on table "public"."feed_categories" to "authenticated";

grant insert on table "public"."feed_categories" to "authenticated";

grant references on table "public"."feed_categories" to "authenticated";

grant select on table "public"."feed_categories" to "authenticated";

grant trigger on table "public"."feed_categories" to "authenticated";

grant truncate on table "public"."feed_categories" to "authenticated";

grant update on table "public"."feed_categories" to "authenticated";

grant delete on table "public"."feed_categories" to "service_role";

grant insert on table "public"."feed_categories" to "service_role";

grant references on table "public"."feed_categories" to "service_role";

grant select on table "public"."feed_categories" to "service_role";

grant trigger on table "public"."feed_categories" to "service_role";

grant truncate on table "public"."feed_categories" to "service_role";

grant update on table "public"."feed_categories" to "service_role";

grant delete on table "public"."feeds" to "anon";

grant insert on table "public"."feeds" to "anon";

grant references on table "public"."feeds" to "anon";

grant select on table "public"."feeds" to "anon";

grant trigger on table "public"."feeds" to "anon";

grant truncate on table "public"."feeds" to "anon";

grant update on table "public"."feeds" to "anon";

grant delete on table "public"."feeds" to "authenticated";

grant insert on table "public"."feeds" to "authenticated";

grant references on table "public"."feeds" to "authenticated";

grant select on table "public"."feeds" to "authenticated";

grant trigger on table "public"."feeds" to "authenticated";

grant truncate on table "public"."feeds" to "authenticated";

grant update on table "public"."feeds" to "authenticated";

grant delete on table "public"."feeds" to "service_role";

grant insert on table "public"."feeds" to "service_role";

grant references on table "public"."feeds" to "service_role";

grant select on table "public"."feeds" to "service_role";

grant trigger on table "public"."feeds" to "service_role";

grant truncate on table "public"."feeds" to "service_role";

grant update on table "public"."feeds" to "service_role";

grant delete on table "public"."strapi_migrations" to "anon";

grant insert on table "public"."strapi_migrations" to "anon";

grant references on table "public"."strapi_migrations" to "anon";

grant select on table "public"."strapi_migrations" to "anon";

grant trigger on table "public"."strapi_migrations" to "anon";

grant truncate on table "public"."strapi_migrations" to "anon";

grant update on table "public"."strapi_migrations" to "anon";

grant delete on table "public"."strapi_migrations" to "authenticated";

grant insert on table "public"."strapi_migrations" to "authenticated";

grant references on table "public"."strapi_migrations" to "authenticated";

grant select on table "public"."strapi_migrations" to "authenticated";

grant trigger on table "public"."strapi_migrations" to "authenticated";

grant truncate on table "public"."strapi_migrations" to "authenticated";

grant update on table "public"."strapi_migrations" to "authenticated";

grant delete on table "public"."strapi_migrations" to "service_role";

grant insert on table "public"."strapi_migrations" to "service_role";

grant references on table "public"."strapi_migrations" to "service_role";

grant select on table "public"."strapi_migrations" to "service_role";

grant trigger on table "public"."strapi_migrations" to "service_role";

grant truncate on table "public"."strapi_migrations" to "service_role";

grant update on table "public"."strapi_migrations" to "service_role";

grant delete on table "public"."strapi_migrations_internal" to "anon";

grant insert on table "public"."strapi_migrations_internal" to "anon";

grant references on table "public"."strapi_migrations_internal" to "anon";

grant select on table "public"."strapi_migrations_internal" to "anon";

grant trigger on table "public"."strapi_migrations_internal" to "anon";

grant truncate on table "public"."strapi_migrations_internal" to "anon";

grant update on table "public"."strapi_migrations_internal" to "anon";

grant delete on table "public"."strapi_migrations_internal" to "authenticated";

grant insert on table "public"."strapi_migrations_internal" to "authenticated";

grant references on table "public"."strapi_migrations_internal" to "authenticated";

grant select on table "public"."strapi_migrations_internal" to "authenticated";

grant trigger on table "public"."strapi_migrations_internal" to "authenticated";

grant truncate on table "public"."strapi_migrations_internal" to "authenticated";

grant update on table "public"."strapi_migrations_internal" to "authenticated";

grant delete on table "public"."strapi_migrations_internal" to "service_role";

grant insert on table "public"."strapi_migrations_internal" to "service_role";

grant references on table "public"."strapi_migrations_internal" to "service_role";

grant select on table "public"."strapi_migrations_internal" to "service_role";

grant trigger on table "public"."strapi_migrations_internal" to "service_role";

grant truncate on table "public"."strapi_migrations_internal" to "service_role";

grant update on table "public"."strapi_migrations_internal" to "service_role";




